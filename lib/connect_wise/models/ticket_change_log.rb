# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class TicketChangeLog
    # Ticket Change Log ID
    attr_accessor :id

    # Partner ID.
    attr_accessor :partner_id

    # Product Instance ID.
    attr_accessor :product_instance_id

    # Action.
    attr_accessor :action

    # Board ID.
    attr_accessor :board_id

    # Board Name.
    attr_accessor :board_name

    # Company Identifier.
    attr_accessor :company_identifier

    # Company Name.
    attr_accessor :company_name

    # Contact ID.
    attr_accessor :contact_id

    # Contact Name.
    attr_accessor :contact_name

    # Impact.
    attr_accessor :impact

    # Owner Identifier.
    attr_accessor :owner_identifier

    # Priority ID.
    attr_accessor :priority_id

    # Priority Level.
    attr_accessor :priority_level

    # Priority Name.
    attr_accessor :priority_name

    # Priority Sort.
    attr_accessor :priority_sort

    # Resource List.
    attr_accessor :resource_list

    # Severity.
    attr_accessor :severity

    # SLA Name.
    attr_accessor :sla_name

    # SLA Status.
    attr_accessor :sla_status

    # Status.
    attr_accessor :status

    # Summary.
    attr_accessor :summary

    # Team Name.
    attr_accessor :team_name

    # Ticket Number.
    attr_accessor :ticket_number

    # Record Type.
    attr_accessor :record_type

    # Ticket Owner.
    attr_accessor :ticket_owner

    # Closed Flag.
    attr_accessor :closed_flag

    # Customer Updated Flag.
    attr_accessor :customer_updated_flag

    # Processing Status.
    attr_accessor :processing_status

    # Parent Ticket ID.
    attr_accessor :parent_ticket_id

    # Merged Parent Ticket ID.
    attr_accessor :merged_parent_ticket_id

    attr_accessor :_info

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        partner_id: :partnerId,
        product_instance_id: :productInstanceId,
        action: :action,
        board_id: :boardId,
        board_name: :boardName,
        company_identifier: :companyIdentifier,
        company_name: :companyName,
        contact_id: :contactId,
        contact_name: :contactName,
        impact: :impact,
        owner_identifier: :ownerIdentifier,
        priority_id: :priorityId,
        priority_level: :priorityLevel,
        priority_name: :priorityName,
        priority_sort: :prioritySort,
        resource_list: :resourceList,
        severity: :severity,
        sla_name: :slaName,
        sla_status: :slaStatus,
        status: :status,
        summary: :summary,
        team_name: :teamName,
        ticket_number: :ticketNumber,
        record_type: :recordType,
        ticket_owner: :ticketOwner,
        closed_flag: :closedFlag,
        customer_updated_flag: :customerUpdatedFlag,
        processing_status: :processingStatus,
        parent_ticket_id: :parentTicketId,
        merged_parent_ticket_id: :mergedParentTicketId,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        partner_id: :String,
        product_instance_id: :String,
        action: :String,
        board_id: :Integer,
        board_name: :String,
        company_identifier: :Integer,
        company_name: :String,
        contact_id: :Integer,
        contact_name: :String,
        impact: :String,
        owner_identifier: :Integer,
        priority_id: :Integer,
        priority_level: :String,
        priority_name: :String,
        priority_sort: :Integer,
        resource_list: :String,
        severity: :String,
        sla_name: :String,
        sla_status: :String,
        status: :String,
        summary: :String,
        team_name: :String,
        ticket_number: :Integer,
        record_type: :String,
        ticket_owner: :String,
        closed_flag: :Boolean,
        customer_updated_flag: :Boolean,
        processing_status: :String,
        parent_ticket_id: :Integer,
        merged_parent_ticket_id: :Integer,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                board_id
                company_identifier
                contact_id
                owner_identifier
                priority_id
                priority_sort
                ticket_number
                closed_flag
                customer_updated_flag
                parent_ticket_id
                merged_parent_ticket_id
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::TicketChangeLog` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::TicketChangeLog`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.partner_id = attributes[:partner_id] if attributes.key?(:partner_id)

      self.product_instance_id = attributes[:product_instance_id] if attributes.key?(:product_instance_id)

      self.action = attributes[:action] if attributes.key?(:action)

      self.board_id = attributes[:board_id] if attributes.key?(:board_id)

      self.board_name = attributes[:board_name] if attributes.key?(:board_name)

      self.company_identifier = attributes[:company_identifier] if attributes.key?(:company_identifier)

      self.company_name = attributes[:company_name] if attributes.key?(:company_name)

      self.contact_id = attributes[:contact_id] if attributes.key?(:contact_id)

      self.contact_name = attributes[:contact_name] if attributes.key?(:contact_name)

      self.impact = attributes[:impact] if attributes.key?(:impact)

      self.owner_identifier = attributes[:owner_identifier] if attributes.key?(:owner_identifier)

      self.priority_id = attributes[:priority_id] if attributes.key?(:priority_id)

      self.priority_level = attributes[:priority_level] if attributes.key?(:priority_level)

      self.priority_name = attributes[:priority_name] if attributes.key?(:priority_name)

      self.priority_sort = attributes[:priority_sort] if attributes.key?(:priority_sort)

      self.resource_list = attributes[:resource_list] if attributes.key?(:resource_list)

      self.severity = attributes[:severity] if attributes.key?(:severity)

      self.sla_name = attributes[:sla_name] if attributes.key?(:sla_name)

      self.sla_status = attributes[:sla_status] if attributes.key?(:sla_status)

      self.status = attributes[:status] if attributes.key?(:status)

      self.summary = attributes[:summary] if attributes.key?(:summary)

      self.team_name = attributes[:team_name] if attributes.key?(:team_name)

      self.ticket_number = attributes[:ticket_number] if attributes.key?(:ticket_number)

      self.record_type = attributes[:record_type] if attributes.key?(:record_type)

      self.ticket_owner = attributes[:ticket_owner] if attributes.key?(:ticket_owner)

      self.closed_flag = attributes[:closed_flag] if attributes.key?(:closed_flag)

      self.customer_updated_flag = attributes[:customer_updated_flag] if attributes.key?(:customer_updated_flag)

      self.processing_status = attributes[:processing_status] if attributes.key?(:processing_status)

      self.parent_ticket_id = attributes[:parent_ticket_id] if attributes.key?(:parent_ticket_id)

      self.merged_parent_ticket_id = attributes[:merged_parent_ticket_id] if attributes.key?(:merged_parent_ticket_id)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        partner_id == other.partner_id &&
        product_instance_id == other.product_instance_id &&
        action == other.action &&
        board_id == other.board_id &&
        board_name == other.board_name &&
        company_identifier == other.company_identifier &&
        company_name == other.company_name &&
        contact_id == other.contact_id &&
        contact_name == other.contact_name &&
        impact == other.impact &&
        owner_identifier == other.owner_identifier &&
        priority_id == other.priority_id &&
        priority_level == other.priority_level &&
        priority_name == other.priority_name &&
        priority_sort == other.priority_sort &&
        resource_list == other.resource_list &&
        severity == other.severity &&
        sla_name == other.sla_name &&
        sla_status == other.sla_status &&
        status == other.status &&
        summary == other.summary &&
        team_name == other.team_name &&
        ticket_number == other.ticket_number &&
        record_type == other.record_type &&
        ticket_owner == other.ticket_owner &&
        closed_flag == other.closed_flag &&
        customer_updated_flag == other.customer_updated_flag &&
        processing_status == other.processing_status &&
        parent_ticket_id == other.parent_ticket_id &&
        merged_parent_ticket_id == other.merged_parent_ticket_id &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, partner_id, product_instance_id, action, board_id, board_name, company_identifier, company_name, contact_id, contact_name, impact, owner_identifier, priority_id, priority_level, priority_name, priority_sort, resource_list, severity, sla_name, sla_status, status, summary, team_name, ticket_number, record_type, ticket_owner, closed_flag, customer_updated_flag, processing_status, parent_ticket_id, merged_parent_ticket_id, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
