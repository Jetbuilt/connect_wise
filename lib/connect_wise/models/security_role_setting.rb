=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class SecurityRoleSetting
    attr_accessor :id

    attr_accessor :add_level

    attr_accessor :edit_level

    attr_accessor :delete_level

    attr_accessor :inquire_level

    attr_accessor :module_function_name

    attr_accessor :module_function_description

    attr_accessor :my_all_flag

    attr_accessor :module_function_identifier

    attr_accessor :report_flag

    attr_accessor :restrict_flag

    attr_accessor :custom_flag

    attr_accessor :module_description

    attr_accessor :module_identifier

    attr_accessor :module_name

    attr_accessor :sort_order

    attr_accessor :_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'add_level' => :'addLevel',
        :'edit_level' => :'editLevel',
        :'delete_level' => :'deleteLevel',
        :'inquire_level' => :'inquireLevel',
        :'module_function_name' => :'moduleFunctionName',
        :'module_function_description' => :'moduleFunctionDescription',
        :'my_all_flag' => :'myAllFlag',
        :'module_function_identifier' => :'moduleFunctionIdentifier',
        :'report_flag' => :'reportFlag',
        :'restrict_flag' => :'restrictFlag',
        :'custom_flag' => :'customFlag',
        :'module_description' => :'moduleDescription',
        :'module_identifier' => :'moduleIdentifier',
        :'module_name' => :'moduleName',
        :'sort_order' => :'sortOrder',
        :'_info' => :'_info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'add_level' => :'String',
        :'edit_level' => :'String',
        :'delete_level' => :'String',
        :'inquire_level' => :'String',
        :'module_function_name' => :'String',
        :'module_function_description' => :'String',
        :'my_all_flag' => :'Boolean',
        :'module_function_identifier' => :'String',
        :'report_flag' => :'Boolean',
        :'restrict_flag' => :'Boolean',
        :'custom_flag' => :'Boolean',
        :'module_description' => :'String',
        :'module_identifier' => :'String',
        :'module_name' => :'String',
        :'sort_order' => :'Integer',
        :'_info' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'add_level',
        :'edit_level',
        :'delete_level',
        :'inquire_level',
        :'my_all_flag',
        :'report_flag',
        :'restrict_flag',
        :'custom_flag',
        :'sort_order',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::SecurityRoleSetting` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::SecurityRoleSetting`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'add_level')
        self.add_level = attributes[:'add_level']
      end

      if attributes.key?(:'edit_level')
        self.edit_level = attributes[:'edit_level']
      end

      if attributes.key?(:'delete_level')
        self.delete_level = attributes[:'delete_level']
      end

      if attributes.key?(:'inquire_level')
        self.inquire_level = attributes[:'inquire_level']
      end

      if attributes.key?(:'module_function_name')
        self.module_function_name = attributes[:'module_function_name']
      end

      if attributes.key?(:'module_function_description')
        self.module_function_description = attributes[:'module_function_description']
      end

      if attributes.key?(:'my_all_flag')
        self.my_all_flag = attributes[:'my_all_flag']
      end

      if attributes.key?(:'module_function_identifier')
        self.module_function_identifier = attributes[:'module_function_identifier']
      end

      if attributes.key?(:'report_flag')
        self.report_flag = attributes[:'report_flag']
      end

      if attributes.key?(:'restrict_flag')
        self.restrict_flag = attributes[:'restrict_flag']
      end

      if attributes.key?(:'custom_flag')
        self.custom_flag = attributes[:'custom_flag']
      end

      if attributes.key?(:'module_description')
        self.module_description = attributes[:'module_description']
      end

      if attributes.key?(:'module_identifier')
        self.module_identifier = attributes[:'module_identifier']
      end

      if attributes.key?(:'module_name')
        self.module_name = attributes[:'module_name']
      end

      if attributes.key?(:'sort_order')
        self.sort_order = attributes[:'sort_order']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      add_level_validator = EnumAttributeValidator.new('String', ["None", "My", "All"])
      return false unless add_level_validator.valid?(@add_level)
      edit_level_validator = EnumAttributeValidator.new('String', ["None", "My", "All"])
      return false unless edit_level_validator.valid?(@edit_level)
      delete_level_validator = EnumAttributeValidator.new('String', ["None", "My", "All"])
      return false unless delete_level_validator.valid?(@delete_level)
      inquire_level_validator = EnumAttributeValidator.new('String', ["None", "My", "All"])
      return false unless inquire_level_validator.valid?(@inquire_level)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] add_level Object to be assigned
    def add_level=(add_level)
      validator = EnumAttributeValidator.new('String', ["None", "My", "All"])
      unless validator.valid?(add_level)
        fail ArgumentError, "invalid value for \"add_level\", must be one of #{validator.allowable_values}."
      end
      @add_level = add_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] edit_level Object to be assigned
    def edit_level=(edit_level)
      validator = EnumAttributeValidator.new('String', ["None", "My", "All"])
      unless validator.valid?(edit_level)
        fail ArgumentError, "invalid value for \"edit_level\", must be one of #{validator.allowable_values}."
      end
      @edit_level = edit_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] delete_level Object to be assigned
    def delete_level=(delete_level)
      validator = EnumAttributeValidator.new('String', ["None", "My", "All"])
      unless validator.valid?(delete_level)
        fail ArgumentError, "invalid value for \"delete_level\", must be one of #{validator.allowable_values}."
      end
      @delete_level = delete_level
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] inquire_level Object to be assigned
    def inquire_level=(inquire_level)
      validator = EnumAttributeValidator.new('String', ["None", "My", "All"])
      unless validator.valid?(inquire_level)
        fail ArgumentError, "invalid value for \"inquire_level\", must be one of #{validator.allowable_values}."
      end
      @inquire_level = inquire_level
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          add_level == o.add_level &&
          edit_level == o.edit_level &&
          delete_level == o.delete_level &&
          inquire_level == o.inquire_level &&
          module_function_name == o.module_function_name &&
          module_function_description == o.module_function_description &&
          my_all_flag == o.my_all_flag &&
          module_function_identifier == o.module_function_identifier &&
          report_flag == o.report_flag &&
          restrict_flag == o.restrict_flag &&
          custom_flag == o.custom_flag &&
          module_description == o.module_description &&
          module_identifier == o.module_identifier &&
          module_name == o.module_name &&
          sort_order == o.sort_order &&
          _info == o._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, add_level, edit_level, delete_level, inquire_level, module_function_name, module_function_description, my_all_flag, module_function_identifier, report_flag, restrict_flag, custom_flag, module_description, module_identifier, module_name, sort_order, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
