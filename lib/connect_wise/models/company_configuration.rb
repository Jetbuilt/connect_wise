=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class CompanyConfiguration
    #  Max length: 100;
    attr_accessor :name

    attr_accessor :id

    attr_accessor :type

    attr_accessor :status

    attr_accessor :company

    attr_accessor :contact

    attr_accessor :site

    attr_accessor :location_id

    attr_accessor :business_unit_id

    #  Max length: 100;
    attr_accessor :device_identifier

    #  Max length: 250;
    attr_accessor :serial_number

    #  Max length: 50;
    attr_accessor :model_number

    #  Max length: 50;
    attr_accessor :tag_number

    attr_accessor :purchase_date

    attr_accessor :installation_date

    attr_accessor :installed_by

    attr_accessor :warranty_expiration_date

    attr_accessor :vendor_notes

    attr_accessor :notes

    #  Max length: 25;
    attr_accessor :mac_address

    #  Max length: 100;
    attr_accessor :last_login_name

    attr_accessor :bill_flag

    attr_accessor :backup_successes

    attr_accessor :backup_incomplete

    attr_accessor :backup_failed

    attr_accessor :backup_restores

    attr_accessor :last_backup_date

    #  Max length: 50;
    attr_accessor :backup_server_name

    attr_accessor :backup_billable_space_gb

    attr_accessor :backup_protected_device_list

    attr_accessor :backup_year

    attr_accessor :backup_month

    #  Max length: 50;
    attr_accessor :ip_address

    #  Max length: 50;
    attr_accessor :default_gateway

    #  Max length: 250;
    attr_accessor :os_type

    #  Max length: 250;
    attr_accessor :os_info

    #  Max length: 100;
    attr_accessor :cpu_speed

    #  Max length: 25;
    attr_accessor :ram

    attr_accessor :local_hard_drives

    attr_accessor :parent_configuration_id

    attr_accessor :vendor

    attr_accessor :manufacturer

    attr_accessor :questions

    attr_accessor :active_flag

    #  Max length: 1000;
    attr_accessor :management_link

    #  Max length: 1000;
    attr_accessor :remote_link

    attr_accessor :sla

    attr_accessor :mobile_guid

    attr_accessor :_info

    attr_accessor :display_vendor_flag

    attr_accessor :company_location_id

    attr_accessor :show_remote_flag

    attr_accessor :show_automate_flag

    attr_accessor :needs_renewal_flag

    #  Max length: 50;
    attr_accessor :manufacturer_part_number

    attr_accessor :custom_fields

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'id' => :'id',
        :'type' => :'type',
        :'status' => :'status',
        :'company' => :'company',
        :'contact' => :'contact',
        :'site' => :'site',
        :'location_id' => :'locationId',
        :'business_unit_id' => :'businessUnitId',
        :'device_identifier' => :'deviceIdentifier',
        :'serial_number' => :'serialNumber',
        :'model_number' => :'modelNumber',
        :'tag_number' => :'tagNumber',
        :'purchase_date' => :'purchaseDate',
        :'installation_date' => :'installationDate',
        :'installed_by' => :'installedBy',
        :'warranty_expiration_date' => :'warrantyExpirationDate',
        :'vendor_notes' => :'vendorNotes',
        :'notes' => :'notes',
        :'mac_address' => :'macAddress',
        :'last_login_name' => :'lastLoginName',
        :'bill_flag' => :'billFlag',
        :'backup_successes' => :'backupSuccesses',
        :'backup_incomplete' => :'backupIncomplete',
        :'backup_failed' => :'backupFailed',
        :'backup_restores' => :'backupRestores',
        :'last_backup_date' => :'lastBackupDate',
        :'backup_server_name' => :'backupServerName',
        :'backup_billable_space_gb' => :'backupBillableSpaceGb',
        :'backup_protected_device_list' => :'backupProtectedDeviceList',
        :'backup_year' => :'backupYear',
        :'backup_month' => :'backupMonth',
        :'ip_address' => :'ipAddress',
        :'default_gateway' => :'defaultGateway',
        :'os_type' => :'osType',
        :'os_info' => :'osInfo',
        :'cpu_speed' => :'cpuSpeed',
        :'ram' => :'ram',
        :'local_hard_drives' => :'localHardDrives',
        :'parent_configuration_id' => :'parentConfigurationId',
        :'vendor' => :'vendor',
        :'manufacturer' => :'manufacturer',
        :'questions' => :'questions',
        :'active_flag' => :'activeFlag',
        :'management_link' => :'managementLink',
        :'remote_link' => :'remoteLink',
        :'sla' => :'sla',
        :'mobile_guid' => :'mobileGuid',
        :'_info' => :'_info',
        :'display_vendor_flag' => :'displayVendorFlag',
        :'company_location_id' => :'companyLocationId',
        :'show_remote_flag' => :'showRemoteFlag',
        :'show_automate_flag' => :'showAutomateFlag',
        :'needs_renewal_flag' => :'needsRenewalFlag',
        :'manufacturer_part_number' => :'manufacturerPartNumber',
        :'custom_fields' => :'customFields'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'id' => :'Integer',
        :'type' => :'ConfigurationTypeReference',
        :'status' => :'ConfigurationStatusReference',
        :'company' => :'CompanyReference',
        :'contact' => :'ContactReference',
        :'site' => :'SiteReference',
        :'location_id' => :'Integer',
        :'business_unit_id' => :'Integer',
        :'device_identifier' => :'String',
        :'serial_number' => :'String',
        :'model_number' => :'String',
        :'tag_number' => :'String',
        :'purchase_date' => :'Time',
        :'installation_date' => :'Time',
        :'installed_by' => :'MemberReference',
        :'warranty_expiration_date' => :'Time',
        :'vendor_notes' => :'String',
        :'notes' => :'String',
        :'mac_address' => :'String',
        :'last_login_name' => :'String',
        :'bill_flag' => :'Boolean',
        :'backup_successes' => :'Integer',
        :'backup_incomplete' => :'Integer',
        :'backup_failed' => :'Integer',
        :'backup_restores' => :'Integer',
        :'last_backup_date' => :'Time',
        :'backup_server_name' => :'String',
        :'backup_billable_space_gb' => :'Float',
        :'backup_protected_device_list' => :'String',
        :'backup_year' => :'Integer',
        :'backup_month' => :'Integer',
        :'ip_address' => :'String',
        :'default_gateway' => :'String',
        :'os_type' => :'String',
        :'os_info' => :'String',
        :'cpu_speed' => :'String',
        :'ram' => :'String',
        :'local_hard_drives' => :'String',
        :'parent_configuration_id' => :'Integer',
        :'vendor' => :'CompanyReference',
        :'manufacturer' => :'ManufacturerReference',
        :'questions' => :'Array<ConfigurationQuestion>',
        :'active_flag' => :'Boolean',
        :'management_link' => :'String',
        :'remote_link' => :'String',
        :'sla' => :'SLAReference',
        :'mobile_guid' => :'String',
        :'_info' => :'Hash<String, String>',
        :'display_vendor_flag' => :'Boolean',
        :'company_location_id' => :'Integer',
        :'show_remote_flag' => :'Boolean',
        :'show_automate_flag' => :'Boolean',
        :'needs_renewal_flag' => :'Boolean',
        :'manufacturer_part_number' => :'String',
        :'custom_fields' => :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'location_id',
        :'business_unit_id',
        :'bill_flag',
        :'backup_successes',
        :'backup_incomplete',
        :'backup_failed',
        :'backup_restores',
        :'backup_billable_space_gb',
        :'backup_year',
        :'backup_month',
        :'parent_configuration_id',
        :'active_flag',
        :'mobile_guid',
        :'display_vendor_flag',
        :'company_location_id',
        :'show_remote_flag',
        :'show_automate_flag',
        :'needs_renewal_flag',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::CompanyConfiguration` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::CompanyConfiguration`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'contact')
        self.contact = attributes[:'contact']
      end

      if attributes.key?(:'site')
        self.site = attributes[:'site']
      end

      if attributes.key?(:'location_id')
        self.location_id = attributes[:'location_id']
      end

      if attributes.key?(:'business_unit_id')
        self.business_unit_id = attributes[:'business_unit_id']
      end

      if attributes.key?(:'device_identifier')
        self.device_identifier = attributes[:'device_identifier']
      end

      if attributes.key?(:'serial_number')
        self.serial_number = attributes[:'serial_number']
      end

      if attributes.key?(:'model_number')
        self.model_number = attributes[:'model_number']
      end

      if attributes.key?(:'tag_number')
        self.tag_number = attributes[:'tag_number']
      end

      if attributes.key?(:'purchase_date')
        self.purchase_date = attributes[:'purchase_date']
      end

      if attributes.key?(:'installation_date')
        self.installation_date = attributes[:'installation_date']
      end

      if attributes.key?(:'installed_by')
        self.installed_by = attributes[:'installed_by']
      end

      if attributes.key?(:'warranty_expiration_date')
        self.warranty_expiration_date = attributes[:'warranty_expiration_date']
      end

      if attributes.key?(:'vendor_notes')
        self.vendor_notes = attributes[:'vendor_notes']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'mac_address')
        self.mac_address = attributes[:'mac_address']
      end

      if attributes.key?(:'last_login_name')
        self.last_login_name = attributes[:'last_login_name']
      end

      if attributes.key?(:'bill_flag')
        self.bill_flag = attributes[:'bill_flag']
      end

      if attributes.key?(:'backup_successes')
        self.backup_successes = attributes[:'backup_successes']
      end

      if attributes.key?(:'backup_incomplete')
        self.backup_incomplete = attributes[:'backup_incomplete']
      end

      if attributes.key?(:'backup_failed')
        self.backup_failed = attributes[:'backup_failed']
      end

      if attributes.key?(:'backup_restores')
        self.backup_restores = attributes[:'backup_restores']
      end

      if attributes.key?(:'last_backup_date')
        self.last_backup_date = attributes[:'last_backup_date']
      end

      if attributes.key?(:'backup_server_name')
        self.backup_server_name = attributes[:'backup_server_name']
      end

      if attributes.key?(:'backup_billable_space_gb')
        self.backup_billable_space_gb = attributes[:'backup_billable_space_gb']
      end

      if attributes.key?(:'backup_protected_device_list')
        self.backup_protected_device_list = attributes[:'backup_protected_device_list']
      end

      if attributes.key?(:'backup_year')
        self.backup_year = attributes[:'backup_year']
      end

      if attributes.key?(:'backup_month')
        self.backup_month = attributes[:'backup_month']
      end

      if attributes.key?(:'ip_address')
        self.ip_address = attributes[:'ip_address']
      end

      if attributes.key?(:'default_gateway')
        self.default_gateway = attributes[:'default_gateway']
      end

      if attributes.key?(:'os_type')
        self.os_type = attributes[:'os_type']
      end

      if attributes.key?(:'os_info')
        self.os_info = attributes[:'os_info']
      end

      if attributes.key?(:'cpu_speed')
        self.cpu_speed = attributes[:'cpu_speed']
      end

      if attributes.key?(:'ram')
        self.ram = attributes[:'ram']
      end

      if attributes.key?(:'local_hard_drives')
        self.local_hard_drives = attributes[:'local_hard_drives']
      end

      if attributes.key?(:'parent_configuration_id')
        self.parent_configuration_id = attributes[:'parent_configuration_id']
      end

      if attributes.key?(:'vendor')
        self.vendor = attributes[:'vendor']
      end

      if attributes.key?(:'manufacturer')
        self.manufacturer = attributes[:'manufacturer']
      end

      if attributes.key?(:'questions')
        if (value = attributes[:'questions']).is_a?(Array)
          self.questions = value
        end
      end

      if attributes.key?(:'active_flag')
        self.active_flag = attributes[:'active_flag']
      end

      if attributes.key?(:'management_link')
        self.management_link = attributes[:'management_link']
      end

      if attributes.key?(:'remote_link')
        self.remote_link = attributes[:'remote_link']
      end

      if attributes.key?(:'sla')
        self.sla = attributes[:'sla']
      end

      if attributes.key?(:'mobile_guid')
        self.mobile_guid = attributes[:'mobile_guid']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end

      if attributes.key?(:'display_vendor_flag')
        self.display_vendor_flag = attributes[:'display_vendor_flag']
      end

      if attributes.key?(:'company_location_id')
        self.company_location_id = attributes[:'company_location_id']
      end

      if attributes.key?(:'show_remote_flag')
        self.show_remote_flag = attributes[:'show_remote_flag']
      end

      if attributes.key?(:'show_automate_flag')
        self.show_automate_flag = attributes[:'show_automate_flag']
      end

      if attributes.key?(:'needs_renewal_flag')
        self.needs_renewal_flag = attributes[:'needs_renewal_flag']
      end

      if attributes.key?(:'manufacturer_part_number')
        self.manufacturer_part_number = attributes[:'manufacturer_part_number']
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          id == o.id &&
          type == o.type &&
          status == o.status &&
          company == o.company &&
          contact == o.contact &&
          site == o.site &&
          location_id == o.location_id &&
          business_unit_id == o.business_unit_id &&
          device_identifier == o.device_identifier &&
          serial_number == o.serial_number &&
          model_number == o.model_number &&
          tag_number == o.tag_number &&
          purchase_date == o.purchase_date &&
          installation_date == o.installation_date &&
          installed_by == o.installed_by &&
          warranty_expiration_date == o.warranty_expiration_date &&
          vendor_notes == o.vendor_notes &&
          notes == o.notes &&
          mac_address == o.mac_address &&
          last_login_name == o.last_login_name &&
          bill_flag == o.bill_flag &&
          backup_successes == o.backup_successes &&
          backup_incomplete == o.backup_incomplete &&
          backup_failed == o.backup_failed &&
          backup_restores == o.backup_restores &&
          last_backup_date == o.last_backup_date &&
          backup_server_name == o.backup_server_name &&
          backup_billable_space_gb == o.backup_billable_space_gb &&
          backup_protected_device_list == o.backup_protected_device_list &&
          backup_year == o.backup_year &&
          backup_month == o.backup_month &&
          ip_address == o.ip_address &&
          default_gateway == o.default_gateway &&
          os_type == o.os_type &&
          os_info == o.os_info &&
          cpu_speed == o.cpu_speed &&
          ram == o.ram &&
          local_hard_drives == o.local_hard_drives &&
          parent_configuration_id == o.parent_configuration_id &&
          vendor == o.vendor &&
          manufacturer == o.manufacturer &&
          questions == o.questions &&
          active_flag == o.active_flag &&
          management_link == o.management_link &&
          remote_link == o.remote_link &&
          sla == o.sla &&
          mobile_guid == o.mobile_guid &&
          _info == o._info &&
          display_vendor_flag == o.display_vendor_flag &&
          company_location_id == o.company_location_id &&
          show_remote_flag == o.show_remote_flag &&
          show_automate_flag == o.show_automate_flag &&
          needs_renewal_flag == o.needs_renewal_flag &&
          manufacturer_part_number == o.manufacturer_part_number &&
          custom_fields == o.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, id, type, status, company, contact, site, location_id, business_unit_id, device_identifier, serial_number, model_number, tag_number, purchase_date, installation_date, installed_by, warranty_expiration_date, vendor_notes, notes, mac_address, last_login_name, bill_flag, backup_successes, backup_incomplete, backup_failed, backup_restores, last_backup_date, backup_server_name, backup_billable_space_gb, backup_protected_device_list, backup_year, backup_month, ip_address, default_gateway, os_type, os_info, cpu_speed, ram, local_hard_drives, parent_configuration_id, vendor, manufacturer, questions, active_flag, management_link, remote_link, sla, mobile_guid, _info, display_vendor_flag, company_location_id, show_remote_flag, show_automate_flag, needs_renewal_flag, manufacturer_part_number, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
