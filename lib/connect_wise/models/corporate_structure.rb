=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class CorporateStructure
    attr_accessor :fiscal_year_start

    #  Max length: 50;
    attr_accessor :location_caption

    #  Max length: 50;
    attr_accessor :group_caption

    attr_accessor :base_currency

    attr_accessor :id

    attr_accessor :level_count

    #  Max length: 20;
    attr_accessor :level1_name

    #  Max length: 20;
    attr_accessor :level2_name

    #  Max length: 20;
    attr_accessor :level3_name

    #  Max length: 20;
    attr_accessor :level4_name

    #  Max length: 20;
    attr_accessor :level5_name

    attr_accessor :president

    attr_accessor :chief_operating_officer

    attr_accessor :controller

    attr_accessor :dispatcher

    attr_accessor :service_manager

    attr_accessor :duty_manager

    attr_accessor :_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'fiscal_year_start' => :'fiscalYearStart',
        :'location_caption' => :'locationCaption',
        :'group_caption' => :'groupCaption',
        :'base_currency' => :'baseCurrency',
        :'id' => :'id',
        :'level_count' => :'levelCount',
        :'level1_name' => :'level1Name',
        :'level2_name' => :'level2Name',
        :'level3_name' => :'level3Name',
        :'level4_name' => :'level4Name',
        :'level5_name' => :'level5Name',
        :'president' => :'president',
        :'chief_operating_officer' => :'chiefOperatingOfficer',
        :'controller' => :'controller',
        :'dispatcher' => :'dispatcher',
        :'service_manager' => :'serviceManager',
        :'duty_manager' => :'dutyManager',
        :'_info' => :'_info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'fiscal_year_start' => :'String',
        :'location_caption' => :'String',
        :'group_caption' => :'String',
        :'base_currency' => :'CurrencyReference',
        :'id' => :'Integer',
        :'level_count' => :'String',
        :'level1_name' => :'String',
        :'level2_name' => :'String',
        :'level3_name' => :'String',
        :'level4_name' => :'String',
        :'level5_name' => :'String',
        :'president' => :'MemberReference',
        :'chief_operating_officer' => :'MemberReference',
        :'controller' => :'MemberReference',
        :'dispatcher' => :'MemberReference',
        :'service_manager' => :'MemberReference',
        :'duty_manager' => :'MemberReference',
        :'_info' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'fiscal_year_start',
        :'level_count',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::CorporateStructure` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::CorporateStructure`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'fiscal_year_start')
        self.fiscal_year_start = attributes[:'fiscal_year_start']
      end

      if attributes.key?(:'location_caption')
        self.location_caption = attributes[:'location_caption']
      end

      if attributes.key?(:'group_caption')
        self.group_caption = attributes[:'group_caption']
      end

      if attributes.key?(:'base_currency')
        self.base_currency = attributes[:'base_currency']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'level_count')
        self.level_count = attributes[:'level_count']
      end

      if attributes.key?(:'level1_name')
        self.level1_name = attributes[:'level1_name']
      end

      if attributes.key?(:'level2_name')
        self.level2_name = attributes[:'level2_name']
      end

      if attributes.key?(:'level3_name')
        self.level3_name = attributes[:'level3_name']
      end

      if attributes.key?(:'level4_name')
        self.level4_name = attributes[:'level4_name']
      end

      if attributes.key?(:'level5_name')
        self.level5_name = attributes[:'level5_name']
      end

      if attributes.key?(:'president')
        self.president = attributes[:'president']
      end

      if attributes.key?(:'chief_operating_officer')
        self.chief_operating_officer = attributes[:'chief_operating_officer']
      end

      if attributes.key?(:'controller')
        self.controller = attributes[:'controller']
      end

      if attributes.key?(:'dispatcher')
        self.dispatcher = attributes[:'dispatcher']
      end

      if attributes.key?(:'service_manager')
        self.service_manager = attributes[:'service_manager']
      end

      if attributes.key?(:'duty_manager')
        self.duty_manager = attributes[:'duty_manager']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @location_caption.nil?
        invalid_properties.push('invalid value for "location_caption", location_caption cannot be nil.')
      end

      if @group_caption.nil?
        invalid_properties.push('invalid value for "group_caption", group_caption cannot be nil.')
      end

      if @base_currency.nil?
        invalid_properties.push('invalid value for "base_currency", base_currency cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      fiscal_year_start_validator = EnumAttributeValidator.new('String', ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"])
      return false unless fiscal_year_start_validator.valid?(@fiscal_year_start)
      return false if @location_caption.nil?
      return false if @group_caption.nil?
      return false if @base_currency.nil?
      level_count_validator = EnumAttributeValidator.new('String', ["Level1", "Level2", "Level3", "Level4", "Level5"])
      return false unless level_count_validator.valid?(@level_count)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fiscal_year_start Object to be assigned
    def fiscal_year_start=(fiscal_year_start)
      validator = EnumAttributeValidator.new('String', ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"])
      unless validator.valid?(fiscal_year_start)
        fail ArgumentError, "invalid value for \"fiscal_year_start\", must be one of #{validator.allowable_values}."
      end
      @fiscal_year_start = fiscal_year_start
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] level_count Object to be assigned
    def level_count=(level_count)
      validator = EnumAttributeValidator.new('String', ["Level1", "Level2", "Level3", "Level4", "Level5"])
      unless validator.valid?(level_count)
        fail ArgumentError, "invalid value for \"level_count\", must be one of #{validator.allowable_values}."
      end
      @level_count = level_count
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          fiscal_year_start == o.fiscal_year_start &&
          location_caption == o.location_caption &&
          group_caption == o.group_caption &&
          base_currency == o.base_currency &&
          id == o.id &&
          level_count == o.level_count &&
          level1_name == o.level1_name &&
          level2_name == o.level2_name &&
          level3_name == o.level3_name &&
          level4_name == o.level4_name &&
          level5_name == o.level5_name &&
          president == o.president &&
          chief_operating_officer == o.chief_operating_officer &&
          controller == o.controller &&
          dispatcher == o.dispatcher &&
          service_manager == o.service_manager &&
          duty_manager == o.duty_manager &&
          _info == o._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [fiscal_year_start, location_caption, group_caption, base_currency, id, level_count, level1_name, level2_name, level3_name, level4_name, level5_name, president, chief_operating_officer, controller, dispatcher, service_manager, duty_manager, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
