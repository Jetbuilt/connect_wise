# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class CorporateStructure
    attr_accessor :fiscal_year_start, :base_currency, :id, :level_count, :president, :chief_operating_officer, :controller, :dispatcher, :service_manager, :duty_manager, :_info

    #  Max length: 50;
    attr_accessor :location_caption

    #  Max length: 50;
    attr_accessor :group_caption

    #  Max length: 20;
    attr_accessor :level1_name

    #  Max length: 20;
    attr_accessor :level2_name

    #  Max length: 20;
    attr_accessor :level3_name

    #  Max length: 20;
    attr_accessor :level4_name

    #  Max length: 20;
    attr_accessor :level5_name

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        fiscal_year_start: :fiscalYearStart,
        location_caption: :locationCaption,
        group_caption: :groupCaption,
        base_currency: :baseCurrency,
        id: :id,
        level_count: :levelCount,
        level1_name: :level1Name,
        level2_name: :level2Name,
        level3_name: :level3Name,
        level4_name: :level4Name,
        level5_name: :level5Name,
        president: :president,
        chief_operating_officer: :chiefOperatingOfficer,
        controller: :controller,
        dispatcher: :dispatcher,
        service_manager: :serviceManager,
        duty_manager: :dutyManager,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        fiscal_year_start: :String,
        location_caption: :String,
        group_caption: :String,
        base_currency: :CurrencyReference,
        id: :Integer,
        level_count: :String,
        level1_name: :String,
        level2_name: :String,
        level3_name: :String,
        level4_name: :String,
        level5_name: :String,
        president: :MemberReference,
        chief_operating_officer: :MemberReference,
        controller: :MemberReference,
        dispatcher: :MemberReference,
        service_manager: :MemberReference,
        duty_manager: :MemberReference,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                fiscal_year_start
                level_count
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::CorporateStructure` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::CorporateStructure`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.fiscal_year_start = (attributes[:fiscal_year_start] if attributes.key?(:fiscal_year_start))

      self.location_caption = (attributes[:location_caption] if attributes.key?(:location_caption))

      self.group_caption = (attributes[:group_caption] if attributes.key?(:group_caption))

      self.base_currency = (attributes[:base_currency] if attributes.key?(:base_currency))

      self.id = attributes[:id] if attributes.key?(:id)

      self.level_count = attributes[:level_count] if attributes.key?(:level_count)

      self.level1_name = attributes[:level1_name] if attributes.key?(:level1_name)

      self.level2_name = attributes[:level2_name] if attributes.key?(:level2_name)

      self.level3_name = attributes[:level3_name] if attributes.key?(:level3_name)

      self.level4_name = attributes[:level4_name] if attributes.key?(:level4_name)

      self.level5_name = attributes[:level5_name] if attributes.key?(:level5_name)

      self.president = attributes[:president] if attributes.key?(:president)

      self.chief_operating_officer = attributes[:chief_operating_officer] if attributes.key?(:chief_operating_officer)

      self.controller = attributes[:controller] if attributes.key?(:controller)

      self.dispatcher = attributes[:dispatcher] if attributes.key?(:dispatcher)

      self.service_manager = attributes[:service_manager] if attributes.key?(:service_manager)

      self.duty_manager = attributes[:duty_manager] if attributes.key?(:duty_manager)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "location_caption", location_caption cannot be nil.') if @location_caption.nil?

      invalid_properties.push('invalid value for "group_caption", group_caption cannot be nil.') if @group_caption.nil?

      invalid_properties.push('invalid value for "base_currency", base_currency cannot be nil.') if @base_currency.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      fiscal_year_start_validator = EnumAttributeValidator.new('String', %w[January February March April May June July August September October November December])
      return false unless fiscal_year_start_validator.valid?(@fiscal_year_start)
      return false if @location_caption.nil?
      return false if @group_caption.nil?
      return false if @base_currency.nil?

      level_count_validator = EnumAttributeValidator.new('String', %w[Level1 Level2 Level3 Level4 Level5])
      return false unless level_count_validator.valid?(@level_count)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fiscal_year_start Object to be assigned
    def fiscal_year_start=(fiscal_year_start)
      validator = EnumAttributeValidator.new('String', %w[January February March April May June July August September October November December])
      raise ArgumentError, "invalid value for \"fiscal_year_start\", must be one of #{validator.allowable_values}." unless validator.valid?(fiscal_year_start)

      @fiscal_year_start = fiscal_year_start
    end

    # Custom attribute writer method with validation
    # @param [Object] location_caption Value to be assigned
    def location_caption=(location_caption)
      raise ArgumentError, 'location_caption cannot be nil' if location_caption.nil?

      @location_caption = location_caption
    end

    # Custom attribute writer method with validation
    # @param [Object] group_caption Value to be assigned
    def group_caption=(group_caption)
      raise ArgumentError, 'group_caption cannot be nil' if group_caption.nil?

      @group_caption = group_caption
    end

    # Custom attribute writer method with validation
    # @param [Object] base_currency Value to be assigned
    def base_currency=(base_currency)
      raise ArgumentError, 'base_currency cannot be nil' if base_currency.nil?

      @base_currency = base_currency
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] level_count Object to be assigned
    def level_count=(level_count)
      validator = EnumAttributeValidator.new('String', %w[Level1 Level2 Level3 Level4 Level5])
      raise ArgumentError, "invalid value for \"level_count\", must be one of #{validator.allowable_values}." unless validator.valid?(level_count)

      @level_count = level_count
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        fiscal_year_start == other.fiscal_year_start &&
        location_caption == other.location_caption &&
        group_caption == other.group_caption &&
        base_currency == other.base_currency &&
        id == other.id &&
        level_count == other.level_count &&
        level1_name == other.level1_name &&
        level2_name == other.level2_name &&
        level3_name == other.level3_name &&
        level4_name == other.level4_name &&
        level5_name == other.level5_name &&
        president == other.president &&
        chief_operating_officer == other.chief_operating_officer &&
        controller == other.controller &&
        dispatcher == other.dispatcher &&
        service_manager == other.service_manager &&
        duty_manager == other.duty_manager &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [fiscal_year_start, location_caption, group_caption, base_currency, id, level_count, level1_name, level2_name, level3_name, level4_name, level5_name, president, chief_operating_officer, controller, dispatcher, service_manager, duty_manager, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
