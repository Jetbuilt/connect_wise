# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class TaxCode
    #  Max length: 8;
    attr_accessor :identifier

    #  Max length: 50;
    attr_accessor :description

    #  Max length: 25;
    attr_accessor :invoice_caption

    attr_accessor :effective_date, :id, :country, :default_flag, :display_on_invoice_flag, :canada_calculate_gst_flag, :cancel_date, :level_one_rate, :level_one_rate_type, :level_one_taxable_max, :level_one_services_flag, :level_one_expenses_flag, :level_one_products_flag, :level_one_apply_single_unit_flag, :level_one_apply_single_unit_min, :level_one_apply_single_unit_max, :level_two_rate, :level_two_rate_type, :level_two_taxable_max, :level_two_services_flag, :level_two_expenses_flag, :level_two_products_flag, :level_two_apply_single_unit_flag, :level_two_apply_single_unit_min, :level_two_apply_single_unit_max, :level_three_rate, :level_three_rate_type, :level_three_taxable_max, :level_three_services_flag, :level_three_expenses_flag, :level_three_products_flag, :level_three_apply_single_unit_flag, :level_three_apply_single_unit_min, :level_three_apply_single_unit_max, :level_four_rate, :level_four_rate_type, :level_four_taxable_max, :level_four_services_flag, :level_four_expenses_flag, :level_four_products_flag, :level_four_apply_single_unit_flag, :level_four_apply_single_unit_min, :level_four_apply_single_unit_max, :level_five_rate, :level_five_rate_type, :level_five_taxable_max, :level_five_services_flag, :level_five_expenses_flag, :level_five_products_flag, :level_five_apply_single_unit_flag, :level_five_apply_single_unit_min, :level_five_apply_single_unit_max, :level_six_rate, :level_six_rate_type, :level_six_taxable_max, :level_six_services_flag, :level_six_expenses_flag, :level_six_products_flag, :level_six_apply_single_unit_flag, :level_six_apply_single_unit_min, :level_six_apply_single_unit_max, :add_all_work_roles, :remove_all_work_roles, :add_all_expense_types, :remove_all_expense_types, :add_all_product_types, :remove_all_product_types, :_info

    #  Max length: 25;
    attr_accessor :level_one_caption

    #  Max length: 50;
    attr_accessor :level_one_tax_code_xref

    #  Max length: 100;
    attr_accessor :level_one_agency_xref

    #  Max length: 25;
    attr_accessor :level_two_caption

    #  Max length: 50;
    attr_accessor :level_two_tax_code_xref

    #  Max length: 100;
    attr_accessor :level_two_agency_xref

    #  Max length: 25;
    attr_accessor :level_three_caption

    #  Max length: 50;
    attr_accessor :level_three_tax_code_xref

    #  Max length: 100;
    attr_accessor :level_three_agency_xref

    #  Max length: 25;
    attr_accessor :level_four_caption

    #  Max length: 50;
    attr_accessor :level_four_tax_code_xref

    #  Max length: 100;
    attr_accessor :level_four_agency_xref

    #  Max length: 25;
    attr_accessor :level_five_caption

    #  Max length: 50;
    attr_accessor :level_five_tax_code_xref

    #  Max length: 100;
    attr_accessor :level_five_agency_xref

    #  Max length: 25;
    attr_accessor :level_six_caption

    #  Max length: 50;
    attr_accessor :level_six_tax_code_xref

    #  Max length: 100;
    attr_accessor :level_six_agency_xref

    # Array of work role exemptions for the tax code.
    attr_accessor :work_role_ids

    # Array of expense type exemptions for the tax code.
    attr_accessor :expense_type_ids

    # Array of product type exemptions for the tax code.
    attr_accessor :product_type_ids

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        identifier: :identifier,
        description: :description,
        invoice_caption: :invoiceCaption,
        effective_date: :effectiveDate,
        id: :id,
        country: :country,
        default_flag: :defaultFlag,
        display_on_invoice_flag: :displayOnInvoiceFlag,
        canada_calculate_gst_flag: :canadaCalculateGSTFlag,
        cancel_date: :cancelDate,
        level_one_rate: :levelOneRate,
        level_one_rate_type: :levelOneRateType,
        level_one_taxable_max: :levelOneTaxableMax,
        level_one_caption: :levelOneCaption,
        level_one_tax_code_xref: :levelOneTaxCodeXref,
        level_one_agency_xref: :levelOneAgencyXref,
        level_one_services_flag: :levelOneServicesFlag,
        level_one_expenses_flag: :levelOneExpensesFlag,
        level_one_products_flag: :levelOneProductsFlag,
        level_one_apply_single_unit_flag: :levelOneApplySingleUnitFlag,
        level_one_apply_single_unit_min: :levelOneApplySingleUnitMin,
        level_one_apply_single_unit_max: :levelOneApplySingleUnitMax,
        level_two_rate: :levelTwoRate,
        level_two_rate_type: :levelTwoRateType,
        level_two_taxable_max: :levelTwoTaxableMax,
        level_two_caption: :levelTwoCaption,
        level_two_tax_code_xref: :levelTwoTaxCodeXref,
        level_two_agency_xref: :levelTwoAgencyXref,
        level_two_services_flag: :levelTwoServicesFlag,
        level_two_expenses_flag: :levelTwoExpensesFlag,
        level_two_products_flag: :levelTwoProductsFlag,
        level_two_apply_single_unit_flag: :levelTwoApplySingleUnitFlag,
        level_two_apply_single_unit_min: :levelTwoApplySingleUnitMin,
        level_two_apply_single_unit_max: :levelTwoApplySingleUnitMax,
        level_three_rate: :levelThreeRate,
        level_three_rate_type: :levelThreeRateType,
        level_three_taxable_max: :levelThreeTaxableMax,
        level_three_caption: :levelThreeCaption,
        level_three_tax_code_xref: :levelThreeTaxCodeXref,
        level_three_agency_xref: :levelThreeAgencyXref,
        level_three_services_flag: :levelThreeServicesFlag,
        level_three_expenses_flag: :levelThreeExpensesFlag,
        level_three_products_flag: :levelThreeProductsFlag,
        level_three_apply_single_unit_flag: :levelThreeApplySingleUnitFlag,
        level_three_apply_single_unit_min: :levelThreeApplySingleUnitMin,
        level_three_apply_single_unit_max: :levelThreeApplySingleUnitMax,
        level_four_rate: :levelFourRate,
        level_four_rate_type: :levelFourRateType,
        level_four_taxable_max: :levelFourTaxableMax,
        level_four_caption: :levelFourCaption,
        level_four_tax_code_xref: :levelFourTaxCodeXref,
        level_four_agency_xref: :levelFourAgencyXref,
        level_four_services_flag: :levelFourServicesFlag,
        level_four_expenses_flag: :levelFourExpensesFlag,
        level_four_products_flag: :levelFourProductsFlag,
        level_four_apply_single_unit_flag: :levelFourApplySingleUnitFlag,
        level_four_apply_single_unit_min: :levelFourApplySingleUnitMin,
        level_four_apply_single_unit_max: :levelFourApplySingleUnitMax,
        level_five_rate: :levelFiveRate,
        level_five_rate_type: :levelFiveRateType,
        level_five_taxable_max: :levelFiveTaxableMax,
        level_five_caption: :levelFiveCaption,
        level_five_tax_code_xref: :levelFiveTaxCodeXref,
        level_five_agency_xref: :levelFiveAgencyXref,
        level_five_services_flag: :levelFiveServicesFlag,
        level_five_expenses_flag: :levelFiveExpensesFlag,
        level_five_products_flag: :levelFiveProductsFlag,
        level_five_apply_single_unit_flag: :levelFiveApplySingleUnitFlag,
        level_five_apply_single_unit_min: :levelFiveApplySingleUnitMin,
        level_five_apply_single_unit_max: :levelFiveApplySingleUnitMax,
        level_six_rate: :levelSixRate,
        level_six_rate_type: :levelSixRateType,
        level_six_taxable_max: :levelSixTaxableMax,
        level_six_caption: :levelSixCaption,
        level_six_tax_code_xref: :levelSixTaxCodeXref,
        level_six_agency_xref: :levelSixAgencyXref,
        level_six_services_flag: :levelSixServicesFlag,
        level_six_expenses_flag: :levelSixExpensesFlag,
        level_six_products_flag: :levelSixProductsFlag,
        level_six_apply_single_unit_flag: :levelSixApplySingleUnitFlag,
        level_six_apply_single_unit_min: :levelSixApplySingleUnitMin,
        level_six_apply_single_unit_max: :levelSixApplySingleUnitMax,
        work_role_ids: :workRoleIds,
        add_all_work_roles: :addAllWorkRoles,
        remove_all_work_roles: :removeAllWorkRoles,
        expense_type_ids: :expenseTypeIds,
        add_all_expense_types: :addAllExpenseTypes,
        remove_all_expense_types: :removeAllExpenseTypes,
        product_type_ids: :productTypeIds,
        add_all_product_types: :addAllProductTypes,
        remove_all_product_types: :removeAllProductTypes,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        identifier: :String,
        description: :String,
        invoice_caption: :String,
        effective_date: :Time,
        id: :Integer,
        country: :CountryReference,
        default_flag: :Boolean,
        display_on_invoice_flag: :Boolean,
        canada_calculate_gst_flag: :Boolean,
        cancel_date: :Time,
        level_one_rate: :Float,
        level_one_rate_type: :String,
        level_one_taxable_max: :Float,
        level_one_caption: :String,
        level_one_tax_code_xref: :String,
        level_one_agency_xref: :String,
        level_one_services_flag: :Boolean,
        level_one_expenses_flag: :Boolean,
        level_one_products_flag: :Boolean,
        level_one_apply_single_unit_flag: :Boolean,
        level_one_apply_single_unit_min: :Float,
        level_one_apply_single_unit_max: :Float,
        level_two_rate: :Float,
        level_two_rate_type: :String,
        level_two_taxable_max: :Float,
        level_two_caption: :String,
        level_two_tax_code_xref: :String,
        level_two_agency_xref: :String,
        level_two_services_flag: :Boolean,
        level_two_expenses_flag: :Boolean,
        level_two_products_flag: :Boolean,
        level_two_apply_single_unit_flag: :Boolean,
        level_two_apply_single_unit_min: :Float,
        level_two_apply_single_unit_max: :Float,
        level_three_rate: :Float,
        level_three_rate_type: :String,
        level_three_taxable_max: :Float,
        level_three_caption: :String,
        level_three_tax_code_xref: :String,
        level_three_agency_xref: :String,
        level_three_services_flag: :Boolean,
        level_three_expenses_flag: :Boolean,
        level_three_products_flag: :Boolean,
        level_three_apply_single_unit_flag: :Boolean,
        level_three_apply_single_unit_min: :Float,
        level_three_apply_single_unit_max: :Float,
        level_four_rate: :Float,
        level_four_rate_type: :String,
        level_four_taxable_max: :Float,
        level_four_caption: :String,
        level_four_tax_code_xref: :String,
        level_four_agency_xref: :String,
        level_four_services_flag: :Boolean,
        level_four_expenses_flag: :Boolean,
        level_four_products_flag: :Boolean,
        level_four_apply_single_unit_flag: :Boolean,
        level_four_apply_single_unit_min: :Float,
        level_four_apply_single_unit_max: :Float,
        level_five_rate: :Float,
        level_five_rate_type: :String,
        level_five_taxable_max: :Float,
        level_five_caption: :String,
        level_five_tax_code_xref: :String,
        level_five_agency_xref: :String,
        level_five_services_flag: :Boolean,
        level_five_expenses_flag: :Boolean,
        level_five_products_flag: :Boolean,
        level_five_apply_single_unit_flag: :Boolean,
        level_five_apply_single_unit_min: :Float,
        level_five_apply_single_unit_max: :Float,
        level_six_rate: :Float,
        level_six_rate_type: :String,
        level_six_taxable_max: :Float,
        level_six_caption: :String,
        level_six_tax_code_xref: :String,
        level_six_agency_xref: :String,
        level_six_services_flag: :Boolean,
        level_six_expenses_flag: :Boolean,
        level_six_products_flag: :Boolean,
        level_six_apply_single_unit_flag: :Boolean,
        level_six_apply_single_unit_min: :Float,
        level_six_apply_single_unit_max: :Float,
        work_role_ids: :'Array<Integer>',
        add_all_work_roles: :Boolean,
        remove_all_work_roles: :Boolean,
        expense_type_ids: :'Array<Integer>',
        add_all_expense_types: :Boolean,
        remove_all_expense_types: :Boolean,
        product_type_ids: :'Array<Integer>',
        add_all_product_types: :Boolean,
        remove_all_product_types: :Boolean,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                default_flag
                display_on_invoice_flag
                canada_calculate_gst_flag
                level_one_rate
                level_one_rate_type
                level_one_taxable_max
                level_one_services_flag
                level_one_expenses_flag
                level_one_products_flag
                level_one_apply_single_unit_flag
                level_one_apply_single_unit_min
                level_one_apply_single_unit_max
                level_two_rate
                level_two_rate_type
                level_two_taxable_max
                level_two_services_flag
                level_two_expenses_flag
                level_two_products_flag
                level_two_apply_single_unit_flag
                level_two_apply_single_unit_min
                level_two_apply_single_unit_max
                level_three_rate
                level_three_rate_type
                level_three_taxable_max
                level_three_services_flag
                level_three_expenses_flag
                level_three_products_flag
                level_three_apply_single_unit_flag
                level_three_apply_single_unit_min
                level_three_apply_single_unit_max
                level_four_rate
                level_four_rate_type
                level_four_taxable_max
                level_four_services_flag
                level_four_expenses_flag
                level_four_products_flag
                level_four_apply_single_unit_flag
                level_four_apply_single_unit_min
                level_four_apply_single_unit_max
                level_five_rate
                level_five_rate_type
                level_five_taxable_max
                level_five_services_flag
                level_five_expenses_flag
                level_five_products_flag
                level_five_apply_single_unit_flag
                level_five_apply_single_unit_min
                level_five_apply_single_unit_max
                level_six_rate
                level_six_rate_type
                level_six_taxable_max
                level_six_services_flag
                level_six_expenses_flag
                level_six_products_flag
                level_six_apply_single_unit_flag
                level_six_apply_single_unit_min
                level_six_apply_single_unit_max
                add_all_work_roles
                remove_all_work_roles
                add_all_expense_types
                remove_all_expense_types
                add_all_product_types
                remove_all_product_types
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::TaxCode` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::TaxCode`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.identifier = (attributes[:identifier] if attributes.key?(:identifier))

      self.description = (attributes[:description] if attributes.key?(:description))

      self.invoice_caption = (attributes[:invoice_caption] if attributes.key?(:invoice_caption))

      self.effective_date = (attributes[:effective_date] if attributes.key?(:effective_date))

      self.id = attributes[:id] if attributes.key?(:id)

      self.country = attributes[:country] if attributes.key?(:country)

      self.default_flag = attributes[:default_flag] if attributes.key?(:default_flag)

      self.display_on_invoice_flag = attributes[:display_on_invoice_flag] if attributes.key?(:display_on_invoice_flag)

      self.canada_calculate_gst_flag = attributes[:canada_calculate_gst_flag] if attributes.key?(:canada_calculate_gst_flag)

      self.cancel_date = attributes[:cancel_date] if attributes.key?(:cancel_date)

      self.level_one_rate = attributes[:level_one_rate] if attributes.key?(:level_one_rate)

      self.level_one_rate_type = attributes[:level_one_rate_type] if attributes.key?(:level_one_rate_type)

      self.level_one_taxable_max = attributes[:level_one_taxable_max] if attributes.key?(:level_one_taxable_max)

      self.level_one_caption = attributes[:level_one_caption] if attributes.key?(:level_one_caption)

      self.level_one_tax_code_xref = attributes[:level_one_tax_code_xref] if attributes.key?(:level_one_tax_code_xref)

      self.level_one_agency_xref = attributes[:level_one_agency_xref] if attributes.key?(:level_one_agency_xref)

      self.level_one_services_flag = attributes[:level_one_services_flag] if attributes.key?(:level_one_services_flag)

      self.level_one_expenses_flag = attributes[:level_one_expenses_flag] if attributes.key?(:level_one_expenses_flag)

      self.level_one_products_flag = attributes[:level_one_products_flag] if attributes.key?(:level_one_products_flag)

      self.level_one_apply_single_unit_flag = attributes[:level_one_apply_single_unit_flag] if attributes.key?(:level_one_apply_single_unit_flag)

      self.level_one_apply_single_unit_min = attributes[:level_one_apply_single_unit_min] if attributes.key?(:level_one_apply_single_unit_min)

      self.level_one_apply_single_unit_max = attributes[:level_one_apply_single_unit_max] if attributes.key?(:level_one_apply_single_unit_max)

      self.level_two_rate = attributes[:level_two_rate] if attributes.key?(:level_two_rate)

      self.level_two_rate_type = attributes[:level_two_rate_type] if attributes.key?(:level_two_rate_type)

      self.level_two_taxable_max = attributes[:level_two_taxable_max] if attributes.key?(:level_two_taxable_max)

      self.level_two_caption = attributes[:level_two_caption] if attributes.key?(:level_two_caption)

      self.level_two_tax_code_xref = attributes[:level_two_tax_code_xref] if attributes.key?(:level_two_tax_code_xref)

      self.level_two_agency_xref = attributes[:level_two_agency_xref] if attributes.key?(:level_two_agency_xref)

      self.level_two_services_flag = attributes[:level_two_services_flag] if attributes.key?(:level_two_services_flag)

      self.level_two_expenses_flag = attributes[:level_two_expenses_flag] if attributes.key?(:level_two_expenses_flag)

      self.level_two_products_flag = attributes[:level_two_products_flag] if attributes.key?(:level_two_products_flag)

      self.level_two_apply_single_unit_flag = attributes[:level_two_apply_single_unit_flag] if attributes.key?(:level_two_apply_single_unit_flag)

      self.level_two_apply_single_unit_min = attributes[:level_two_apply_single_unit_min] if attributes.key?(:level_two_apply_single_unit_min)

      self.level_two_apply_single_unit_max = attributes[:level_two_apply_single_unit_max] if attributes.key?(:level_two_apply_single_unit_max)

      self.level_three_rate = attributes[:level_three_rate] if attributes.key?(:level_three_rate)

      self.level_three_rate_type = attributes[:level_three_rate_type] if attributes.key?(:level_three_rate_type)

      self.level_three_taxable_max = attributes[:level_three_taxable_max] if attributes.key?(:level_three_taxable_max)

      self.level_three_caption = attributes[:level_three_caption] if attributes.key?(:level_three_caption)

      self.level_three_tax_code_xref = attributes[:level_three_tax_code_xref] if attributes.key?(:level_three_tax_code_xref)

      self.level_three_agency_xref = attributes[:level_three_agency_xref] if attributes.key?(:level_three_agency_xref)

      self.level_three_services_flag = attributes[:level_three_services_flag] if attributes.key?(:level_three_services_flag)

      self.level_three_expenses_flag = attributes[:level_three_expenses_flag] if attributes.key?(:level_three_expenses_flag)

      self.level_three_products_flag = attributes[:level_three_products_flag] if attributes.key?(:level_three_products_flag)

      self.level_three_apply_single_unit_flag = attributes[:level_three_apply_single_unit_flag] if attributes.key?(:level_three_apply_single_unit_flag)

      self.level_three_apply_single_unit_min = attributes[:level_three_apply_single_unit_min] if attributes.key?(:level_three_apply_single_unit_min)

      self.level_three_apply_single_unit_max = attributes[:level_three_apply_single_unit_max] if attributes.key?(:level_three_apply_single_unit_max)

      self.level_four_rate = attributes[:level_four_rate] if attributes.key?(:level_four_rate)

      self.level_four_rate_type = attributes[:level_four_rate_type] if attributes.key?(:level_four_rate_type)

      self.level_four_taxable_max = attributes[:level_four_taxable_max] if attributes.key?(:level_four_taxable_max)

      self.level_four_caption = attributes[:level_four_caption] if attributes.key?(:level_four_caption)

      self.level_four_tax_code_xref = attributes[:level_four_tax_code_xref] if attributes.key?(:level_four_tax_code_xref)

      self.level_four_agency_xref = attributes[:level_four_agency_xref] if attributes.key?(:level_four_agency_xref)

      self.level_four_services_flag = attributes[:level_four_services_flag] if attributes.key?(:level_four_services_flag)

      self.level_four_expenses_flag = attributes[:level_four_expenses_flag] if attributes.key?(:level_four_expenses_flag)

      self.level_four_products_flag = attributes[:level_four_products_flag] if attributes.key?(:level_four_products_flag)

      self.level_four_apply_single_unit_flag = attributes[:level_four_apply_single_unit_flag] if attributes.key?(:level_four_apply_single_unit_flag)

      self.level_four_apply_single_unit_min = attributes[:level_four_apply_single_unit_min] if attributes.key?(:level_four_apply_single_unit_min)

      self.level_four_apply_single_unit_max = attributes[:level_four_apply_single_unit_max] if attributes.key?(:level_four_apply_single_unit_max)

      self.level_five_rate = attributes[:level_five_rate] if attributes.key?(:level_five_rate)

      self.level_five_rate_type = attributes[:level_five_rate_type] if attributes.key?(:level_five_rate_type)

      self.level_five_taxable_max = attributes[:level_five_taxable_max] if attributes.key?(:level_five_taxable_max)

      self.level_five_caption = attributes[:level_five_caption] if attributes.key?(:level_five_caption)

      self.level_five_tax_code_xref = attributes[:level_five_tax_code_xref] if attributes.key?(:level_five_tax_code_xref)

      self.level_five_agency_xref = attributes[:level_five_agency_xref] if attributes.key?(:level_five_agency_xref)

      self.level_five_services_flag = attributes[:level_five_services_flag] if attributes.key?(:level_five_services_flag)

      self.level_five_expenses_flag = attributes[:level_five_expenses_flag] if attributes.key?(:level_five_expenses_flag)

      self.level_five_products_flag = attributes[:level_five_products_flag] if attributes.key?(:level_five_products_flag)

      self.level_five_apply_single_unit_flag = attributes[:level_five_apply_single_unit_flag] if attributes.key?(:level_five_apply_single_unit_flag)

      self.level_five_apply_single_unit_min = attributes[:level_five_apply_single_unit_min] if attributes.key?(:level_five_apply_single_unit_min)

      self.level_five_apply_single_unit_max = attributes[:level_five_apply_single_unit_max] if attributes.key?(:level_five_apply_single_unit_max)

      self.level_six_rate = attributes[:level_six_rate] if attributes.key?(:level_six_rate)

      self.level_six_rate_type = attributes[:level_six_rate_type] if attributes.key?(:level_six_rate_type)

      self.level_six_taxable_max = attributes[:level_six_taxable_max] if attributes.key?(:level_six_taxable_max)

      self.level_six_caption = attributes[:level_six_caption] if attributes.key?(:level_six_caption)

      self.level_six_tax_code_xref = attributes[:level_six_tax_code_xref] if attributes.key?(:level_six_tax_code_xref)

      self.level_six_agency_xref = attributes[:level_six_agency_xref] if attributes.key?(:level_six_agency_xref)

      self.level_six_services_flag = attributes[:level_six_services_flag] if attributes.key?(:level_six_services_flag)

      self.level_six_expenses_flag = attributes[:level_six_expenses_flag] if attributes.key?(:level_six_expenses_flag)

      self.level_six_products_flag = attributes[:level_six_products_flag] if attributes.key?(:level_six_products_flag)

      self.level_six_apply_single_unit_flag = attributes[:level_six_apply_single_unit_flag] if attributes.key?(:level_six_apply_single_unit_flag)

      self.level_six_apply_single_unit_min = attributes[:level_six_apply_single_unit_min] if attributes.key?(:level_six_apply_single_unit_min)

      self.level_six_apply_single_unit_max = attributes[:level_six_apply_single_unit_max] if attributes.key?(:level_six_apply_single_unit_max)

      if attributes.key?(:work_role_ids) && (value = attributes[:work_role_ids]).is_a?(Array)
        self.work_role_ids = value
      end

      self.add_all_work_roles = attributes[:add_all_work_roles] if attributes.key?(:add_all_work_roles)

      self.remove_all_work_roles = attributes[:remove_all_work_roles] if attributes.key?(:remove_all_work_roles)

      if attributes.key?(:expense_type_ids) && (value = attributes[:expense_type_ids]).is_a?(Array)
        self.expense_type_ids = value
      end

      self.add_all_expense_types = attributes[:add_all_expense_types] if attributes.key?(:add_all_expense_types)

      self.remove_all_expense_types = attributes[:remove_all_expense_types] if attributes.key?(:remove_all_expense_types)

      if attributes.key?(:product_type_ids) && (value = attributes[:product_type_ids]).is_a?(Array)
        self.product_type_ids = value
      end

      self.add_all_product_types = attributes[:add_all_product_types] if attributes.key?(:add_all_product_types)

      self.remove_all_product_types = attributes[:remove_all_product_types] if attributes.key?(:remove_all_product_types)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "identifier", identifier cannot be nil.') if @identifier.nil?

      invalid_properties.push('invalid value for "description", description cannot be nil.') if @description.nil?

      invalid_properties.push('invalid value for "invoice_caption", invoice_caption cannot be nil.') if @invoice_caption.nil?

      invalid_properties.push('invalid value for "effective_date", effective_date cannot be nil.') if @effective_date.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @identifier.nil?
      return false if @description.nil?
      return false if @invoice_caption.nil?
      return false if @effective_date.nil?

      level_one_rate_type_validator = EnumAttributeValidator.new('String', %w[Amount Percent])
      return false unless level_one_rate_type_validator.valid?(@level_one_rate_type)

      level_two_rate_type_validator = EnumAttributeValidator.new('String', %w[Amount Percent])
      return false unless level_two_rate_type_validator.valid?(@level_two_rate_type)

      level_three_rate_type_validator = EnumAttributeValidator.new('String', %w[Amount Percent])
      return false unless level_three_rate_type_validator.valid?(@level_three_rate_type)

      level_four_rate_type_validator = EnumAttributeValidator.new('String', %w[Amount Percent])
      return false unless level_four_rate_type_validator.valid?(@level_four_rate_type)

      level_five_rate_type_validator = EnumAttributeValidator.new('String', %w[Amount Percent])
      return false unless level_five_rate_type_validator.valid?(@level_five_rate_type)

      level_six_rate_type_validator = EnumAttributeValidator.new('String', %w[Amount Percent])
      return false unless level_six_rate_type_validator.valid?(@level_six_rate_type)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] identifier Value to be assigned
    def identifier=(identifier)
      raise ArgumentError, 'identifier cannot be nil' if identifier.nil?

      @identifier = identifier
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      raise ArgumentError, 'description cannot be nil' if description.nil?

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_caption Value to be assigned
    def invoice_caption=(invoice_caption)
      raise ArgumentError, 'invoice_caption cannot be nil' if invoice_caption.nil?

      @invoice_caption = invoice_caption
    end

    # Custom attribute writer method with validation
    # @param [Object] effective_date Value to be assigned
    def effective_date=(effective_date)
      raise ArgumentError, 'effective_date cannot be nil' if effective_date.nil?

      @effective_date = effective_date
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] level_one_rate_type Object to be assigned
    def level_one_rate_type=(level_one_rate_type)
      validator = EnumAttributeValidator.new('String', %w[Amount Percent])
      raise ArgumentError, "invalid value for \"level_one_rate_type\", must be one of #{validator.allowable_values}." unless validator.valid?(level_one_rate_type)

      @level_one_rate_type = level_one_rate_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] level_two_rate_type Object to be assigned
    def level_two_rate_type=(level_two_rate_type)
      validator = EnumAttributeValidator.new('String', %w[Amount Percent])
      raise ArgumentError, "invalid value for \"level_two_rate_type\", must be one of #{validator.allowable_values}." unless validator.valid?(level_two_rate_type)

      @level_two_rate_type = level_two_rate_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] level_three_rate_type Object to be assigned
    def level_three_rate_type=(level_three_rate_type)
      validator = EnumAttributeValidator.new('String', %w[Amount Percent])
      raise ArgumentError, "invalid value for \"level_three_rate_type\", must be one of #{validator.allowable_values}." unless validator.valid?(level_three_rate_type)

      @level_three_rate_type = level_three_rate_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] level_four_rate_type Object to be assigned
    def level_four_rate_type=(level_four_rate_type)
      validator = EnumAttributeValidator.new('String', %w[Amount Percent])
      raise ArgumentError, "invalid value for \"level_four_rate_type\", must be one of #{validator.allowable_values}." unless validator.valid?(level_four_rate_type)

      @level_four_rate_type = level_four_rate_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] level_five_rate_type Object to be assigned
    def level_five_rate_type=(level_five_rate_type)
      validator = EnumAttributeValidator.new('String', %w[Amount Percent])
      raise ArgumentError, "invalid value for \"level_five_rate_type\", must be one of #{validator.allowable_values}." unless validator.valid?(level_five_rate_type)

      @level_five_rate_type = level_five_rate_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] level_six_rate_type Object to be assigned
    def level_six_rate_type=(level_six_rate_type)
      validator = EnumAttributeValidator.new('String', %w[Amount Percent])
      raise ArgumentError, "invalid value for \"level_six_rate_type\", must be one of #{validator.allowable_values}." unless validator.valid?(level_six_rate_type)

      @level_six_rate_type = level_six_rate_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        identifier == other.identifier &&
        description == other.description &&
        invoice_caption == other.invoice_caption &&
        effective_date == other.effective_date &&
        id == other.id &&
        country == other.country &&
        default_flag == other.default_flag &&
        display_on_invoice_flag == other.display_on_invoice_flag &&
        canada_calculate_gst_flag == other.canada_calculate_gst_flag &&
        cancel_date == other.cancel_date &&
        level_one_rate == other.level_one_rate &&
        level_one_rate_type == other.level_one_rate_type &&
        level_one_taxable_max == other.level_one_taxable_max &&
        level_one_caption == other.level_one_caption &&
        level_one_tax_code_xref == other.level_one_tax_code_xref &&
        level_one_agency_xref == other.level_one_agency_xref &&
        level_one_services_flag == other.level_one_services_flag &&
        level_one_expenses_flag == other.level_one_expenses_flag &&
        level_one_products_flag == other.level_one_products_flag &&
        level_one_apply_single_unit_flag == other.level_one_apply_single_unit_flag &&
        level_one_apply_single_unit_min == other.level_one_apply_single_unit_min &&
        level_one_apply_single_unit_max == other.level_one_apply_single_unit_max &&
        level_two_rate == other.level_two_rate &&
        level_two_rate_type == other.level_two_rate_type &&
        level_two_taxable_max == other.level_two_taxable_max &&
        level_two_caption == other.level_two_caption &&
        level_two_tax_code_xref == other.level_two_tax_code_xref &&
        level_two_agency_xref == other.level_two_agency_xref &&
        level_two_services_flag == other.level_two_services_flag &&
        level_two_expenses_flag == other.level_two_expenses_flag &&
        level_two_products_flag == other.level_two_products_flag &&
        level_two_apply_single_unit_flag == other.level_two_apply_single_unit_flag &&
        level_two_apply_single_unit_min == other.level_two_apply_single_unit_min &&
        level_two_apply_single_unit_max == other.level_two_apply_single_unit_max &&
        level_three_rate == other.level_three_rate &&
        level_three_rate_type == other.level_three_rate_type &&
        level_three_taxable_max == other.level_three_taxable_max &&
        level_three_caption == other.level_three_caption &&
        level_three_tax_code_xref == other.level_three_tax_code_xref &&
        level_three_agency_xref == other.level_three_agency_xref &&
        level_three_services_flag == other.level_three_services_flag &&
        level_three_expenses_flag == other.level_three_expenses_flag &&
        level_three_products_flag == other.level_three_products_flag &&
        level_three_apply_single_unit_flag == other.level_three_apply_single_unit_flag &&
        level_three_apply_single_unit_min == other.level_three_apply_single_unit_min &&
        level_three_apply_single_unit_max == other.level_three_apply_single_unit_max &&
        level_four_rate == other.level_four_rate &&
        level_four_rate_type == other.level_four_rate_type &&
        level_four_taxable_max == other.level_four_taxable_max &&
        level_four_caption == other.level_four_caption &&
        level_four_tax_code_xref == other.level_four_tax_code_xref &&
        level_four_agency_xref == other.level_four_agency_xref &&
        level_four_services_flag == other.level_four_services_flag &&
        level_four_expenses_flag == other.level_four_expenses_flag &&
        level_four_products_flag == other.level_four_products_flag &&
        level_four_apply_single_unit_flag == other.level_four_apply_single_unit_flag &&
        level_four_apply_single_unit_min == other.level_four_apply_single_unit_min &&
        level_four_apply_single_unit_max == other.level_four_apply_single_unit_max &&
        level_five_rate == other.level_five_rate &&
        level_five_rate_type == other.level_five_rate_type &&
        level_five_taxable_max == other.level_five_taxable_max &&
        level_five_caption == other.level_five_caption &&
        level_five_tax_code_xref == other.level_five_tax_code_xref &&
        level_five_agency_xref == other.level_five_agency_xref &&
        level_five_services_flag == other.level_five_services_flag &&
        level_five_expenses_flag == other.level_five_expenses_flag &&
        level_five_products_flag == other.level_five_products_flag &&
        level_five_apply_single_unit_flag == other.level_five_apply_single_unit_flag &&
        level_five_apply_single_unit_min == other.level_five_apply_single_unit_min &&
        level_five_apply_single_unit_max == other.level_five_apply_single_unit_max &&
        level_six_rate == other.level_six_rate &&
        level_six_rate_type == other.level_six_rate_type &&
        level_six_taxable_max == other.level_six_taxable_max &&
        level_six_caption == other.level_six_caption &&
        level_six_tax_code_xref == other.level_six_tax_code_xref &&
        level_six_agency_xref == other.level_six_agency_xref &&
        level_six_services_flag == other.level_six_services_flag &&
        level_six_expenses_flag == other.level_six_expenses_flag &&
        level_six_products_flag == other.level_six_products_flag &&
        level_six_apply_single_unit_flag == other.level_six_apply_single_unit_flag &&
        level_six_apply_single_unit_min == other.level_six_apply_single_unit_min &&
        level_six_apply_single_unit_max == other.level_six_apply_single_unit_max &&
        work_role_ids == other.work_role_ids &&
        add_all_work_roles == other.add_all_work_roles &&
        remove_all_work_roles == other.remove_all_work_roles &&
        expense_type_ids == other.expense_type_ids &&
        add_all_expense_types == other.add_all_expense_types &&
        remove_all_expense_types == other.remove_all_expense_types &&
        product_type_ids == other.product_type_ids &&
        add_all_product_types == other.add_all_product_types &&
        remove_all_product_types == other.remove_all_product_types &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [identifier, description, invoice_caption, effective_date, id, country, default_flag, display_on_invoice_flag, canada_calculate_gst_flag, cancel_date, level_one_rate, level_one_rate_type, level_one_taxable_max, level_one_caption, level_one_tax_code_xref, level_one_agency_xref, level_one_services_flag, level_one_expenses_flag, level_one_products_flag, level_one_apply_single_unit_flag, level_one_apply_single_unit_min, level_one_apply_single_unit_max, level_two_rate, level_two_rate_type, level_two_taxable_max, level_two_caption, level_two_tax_code_xref, level_two_agency_xref, level_two_services_flag, level_two_expenses_flag, level_two_products_flag, level_two_apply_single_unit_flag, level_two_apply_single_unit_min, level_two_apply_single_unit_max, level_three_rate, level_three_rate_type, level_three_taxable_max, level_three_caption, level_three_tax_code_xref, level_three_agency_xref, level_three_services_flag, level_three_expenses_flag, level_three_products_flag, level_three_apply_single_unit_flag, level_three_apply_single_unit_min, level_three_apply_single_unit_max, level_four_rate, level_four_rate_type, level_four_taxable_max, level_four_caption, level_four_tax_code_xref, level_four_agency_xref, level_four_services_flag, level_four_expenses_flag, level_four_products_flag, level_four_apply_single_unit_flag, level_four_apply_single_unit_min, level_four_apply_single_unit_max, level_five_rate, level_five_rate_type, level_five_taxable_max, level_five_caption, level_five_tax_code_xref, level_five_agency_xref, level_five_services_flag, level_five_expenses_flag, level_five_products_flag, level_five_apply_single_unit_flag, level_five_apply_single_unit_min, level_five_apply_single_unit_max, level_six_rate, level_six_rate_type, level_six_taxable_max, level_six_caption, level_six_tax_code_xref, level_six_agency_xref, level_six_services_flag, level_six_expenses_flag, level_six_products_flag, level_six_apply_single_unit_flag, level_six_apply_single_unit_min, level_six_apply_single_unit_max, work_role_ids, add_all_work_roles, remove_all_work_roles, expense_type_ids, add_all_expense_types, remove_all_expense_types, product_type_ids, add_all_product_types, remove_all_product_types, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
