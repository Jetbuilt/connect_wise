=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class ExpenseEntry
    attr_accessor :amount

    attr_accessor :date

    attr_accessor :id

    attr_accessor :expense_report

    attr_accessor :company

    attr_accessor :charge_to_id

    # Company or chargeToType is required
    attr_accessor :charge_to_type

    attr_accessor :type

    attr_accessor :member

    attr_accessor :payment_method

    attr_accessor :classification

    attr_accessor :billable_option

    attr_accessor :location_id

    attr_accessor :business_unit_id

    attr_accessor :notes

    attr_accessor :agreement

    attr_accessor :invoice_amount

    attr_accessor :mobile_guid

    attr_accessor :taxes

    attr_accessor :invoice

    attr_accessor :currency

    attr_accessor :status

    attr_accessor :bill_amount

    attr_accessor :agreement_amount

    attr_accessor :odometer_start

    attr_accessor :odometer_end

    attr_accessor :ticket

    attr_accessor :project

    attr_accessor :phase

    attr_accessor :_info

    attr_accessor :custom_fields

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'amount' => :'amount',
        :'date' => :'date',
        :'id' => :'id',
        :'expense_report' => :'expenseReport',
        :'company' => :'company',
        :'charge_to_id' => :'chargeToId',
        :'charge_to_type' => :'chargeToType',
        :'type' => :'type',
        :'member' => :'member',
        :'payment_method' => :'paymentMethod',
        :'classification' => :'classification',
        :'billable_option' => :'billableOption',
        :'location_id' => :'locationId',
        :'business_unit_id' => :'businessUnitId',
        :'notes' => :'notes',
        :'agreement' => :'agreement',
        :'invoice_amount' => :'invoiceAmount',
        :'mobile_guid' => :'mobileGuid',
        :'taxes' => :'taxes',
        :'invoice' => :'invoice',
        :'currency' => :'currency',
        :'status' => :'status',
        :'bill_amount' => :'billAmount',
        :'agreement_amount' => :'agreementAmount',
        :'odometer_start' => :'odometerStart',
        :'odometer_end' => :'odometerEnd',
        :'ticket' => :'ticket',
        :'project' => :'project',
        :'phase' => :'phase',
        :'_info' => :'_info',
        :'custom_fields' => :'customFields'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'amount' => :'Float',
        :'date' => :'Time',
        :'id' => :'Integer',
        :'expense_report' => :'ExpenseReportReference',
        :'company' => :'CompanyReference',
        :'charge_to_id' => :'Integer',
        :'charge_to_type' => :'String',
        :'type' => :'ExpenseTypeReference',
        :'member' => :'MemberReference',
        :'payment_method' => :'PaymentMethodReference',
        :'classification' => :'ClassificationReference',
        :'billable_option' => :'String',
        :'location_id' => :'Integer',
        :'business_unit_id' => :'Integer',
        :'notes' => :'String',
        :'agreement' => :'AgreementReference',
        :'invoice_amount' => :'Float',
        :'mobile_guid' => :'String',
        :'taxes' => :'Array<ExpenseTax>',
        :'invoice' => :'InvoiceReference',
        :'currency' => :'CurrencyReference',
        :'status' => :'String',
        :'bill_amount' => :'Float',
        :'agreement_amount' => :'Float',
        :'odometer_start' => :'Float',
        :'odometer_end' => :'Float',
        :'ticket' => :'TicketReference',
        :'project' => :'ProjectReference',
        :'phase' => :'ProjectPhaseReference',
        :'_info' => :'Hash<String, String>',
        :'custom_fields' => :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'amount',
        :'charge_to_id',
        :'charge_to_type',
        :'billable_option',
        :'location_id',
        :'business_unit_id',
        :'invoice_amount',
        :'mobile_guid',
        :'status',
        :'bill_amount',
        :'agreement_amount',
        :'odometer_start',
        :'odometer_end',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::ExpenseEntry` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::ExpenseEntry`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'expense_report')
        self.expense_report = attributes[:'expense_report']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'charge_to_id')
        self.charge_to_id = attributes[:'charge_to_id']
      end

      if attributes.key?(:'charge_to_type')
        self.charge_to_type = attributes[:'charge_to_type']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'member')
        self.member = attributes[:'member']
      end

      if attributes.key?(:'payment_method')
        self.payment_method = attributes[:'payment_method']
      end

      if attributes.key?(:'classification')
        self.classification = attributes[:'classification']
      end

      if attributes.key?(:'billable_option')
        self.billable_option = attributes[:'billable_option']
      end

      if attributes.key?(:'location_id')
        self.location_id = attributes[:'location_id']
      end

      if attributes.key?(:'business_unit_id')
        self.business_unit_id = attributes[:'business_unit_id']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'agreement')
        self.agreement = attributes[:'agreement']
      end

      if attributes.key?(:'invoice_amount')
        self.invoice_amount = attributes[:'invoice_amount']
      end

      if attributes.key?(:'mobile_guid')
        self.mobile_guid = attributes[:'mobile_guid']
      end

      if attributes.key?(:'taxes')
        if (value = attributes[:'taxes']).is_a?(Array)
          self.taxes = value
        end
      end

      if attributes.key?(:'invoice')
        self.invoice = attributes[:'invoice']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'bill_amount')
        self.bill_amount = attributes[:'bill_amount']
      end

      if attributes.key?(:'agreement_amount')
        self.agreement_amount = attributes[:'agreement_amount']
      end

      if attributes.key?(:'odometer_start')
        self.odometer_start = attributes[:'odometer_start']
      end

      if attributes.key?(:'odometer_end')
        self.odometer_end = attributes[:'odometer_end']
      end

      if attributes.key?(:'ticket')
        self.ticket = attributes[:'ticket']
      end

      if attributes.key?(:'project')
        self.project = attributes[:'project']
      end

      if attributes.key?(:'phase')
        self.phase = attributes[:'phase']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @date.nil?
        invalid_properties.push('invalid value for "date", date cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @date.nil?
      charge_to_type_validator = EnumAttributeValidator.new('String', ["ServiceTicket", "ProjectTicket", "ChargeCode", "Activity"])
      return false unless charge_to_type_validator.valid?(@charge_to_type)
      billable_option_validator = EnumAttributeValidator.new('String', ["Billable", "DoNotBill", "NoCharge", "NoDefault"])
      return false unless billable_option_validator.valid?(@billable_option)
      status_validator = EnumAttributeValidator.new('String', ["Open", "Rejected", "PendingApproval", "ErrorsCorrected", "PendingProjectApproval", "ApprovedByTierOne", "RejectBySecondTier", "ApprovedByTierTwo", "ReadyToBill", "Billed", "WrittenOff", "BilledAgreement"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] charge_to_type Object to be assigned
    def charge_to_type=(charge_to_type)
      validator = EnumAttributeValidator.new('String', ["ServiceTicket", "ProjectTicket", "ChargeCode", "Activity"])
      unless validator.valid?(charge_to_type)
        fail ArgumentError, "invalid value for \"charge_to_type\", must be one of #{validator.allowable_values}."
      end
      @charge_to_type = charge_to_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billable_option Object to be assigned
    def billable_option=(billable_option)
      validator = EnumAttributeValidator.new('String', ["Billable", "DoNotBill", "NoCharge", "NoDefault"])
      unless validator.valid?(billable_option)
        fail ArgumentError, "invalid value for \"billable_option\", must be one of #{validator.allowable_values}."
      end
      @billable_option = billable_option
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["Open", "Rejected", "PendingApproval", "ErrorsCorrected", "PendingProjectApproval", "ApprovedByTierOne", "RejectBySecondTier", "ApprovedByTierTwo", "ReadyToBill", "Billed", "WrittenOff", "BilledAgreement"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          amount == o.amount &&
          date == o.date &&
          id == o.id &&
          expense_report == o.expense_report &&
          company == o.company &&
          charge_to_id == o.charge_to_id &&
          charge_to_type == o.charge_to_type &&
          type == o.type &&
          member == o.member &&
          payment_method == o.payment_method &&
          classification == o.classification &&
          billable_option == o.billable_option &&
          location_id == o.location_id &&
          business_unit_id == o.business_unit_id &&
          notes == o.notes &&
          agreement == o.agreement &&
          invoice_amount == o.invoice_amount &&
          mobile_guid == o.mobile_guid &&
          taxes == o.taxes &&
          invoice == o.invoice &&
          currency == o.currency &&
          status == o.status &&
          bill_amount == o.bill_amount &&
          agreement_amount == o.agreement_amount &&
          odometer_start == o.odometer_start &&
          odometer_end == o.odometer_end &&
          ticket == o.ticket &&
          project == o.project &&
          phase == o.phase &&
          _info == o._info &&
          custom_fields == o.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [amount, date, id, expense_report, company, charge_to_id, charge_to_type, type, member, payment_method, classification, billable_option, location_id, business_unit_id, notes, agreement, invoice_amount, mobile_guid, taxes, invoice, currency, status, bill_amount, agreement_amount, odometer_start, odometer_end, ticket, project, phase, _info, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
