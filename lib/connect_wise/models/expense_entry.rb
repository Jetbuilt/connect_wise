# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class ExpenseEntry
    attr_accessor :type, :amount, :date, :id, :expense_report, :company, :charge_to_id, :member, :payment_method,
                  :classification, :billable_option, :location_id, :business_unit_id, :notes, :agreement, :invoice_amount, :mobile_guid, :taxes, :invoice, :currency, :status, :bill_amount, :agreement_amount, :odometer_start, :odometer_end, :ticket, :project, :phase, :_info, :custom_fields

    # Gets or sets             company or chargeToType is required.
    attr_accessor :charge_to_type

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        type: :type,
        amount: :amount,
        date: :date,
        id: :id,
        expense_report: :expenseReport,
        company: :company,
        charge_to_id: :chargeToId,
        charge_to_type: :chargeToType,
        member: :member,
        payment_method: :paymentMethod,
        classification: :classification,
        billable_option: :billableOption,
        location_id: :locationId,
        business_unit_id: :businessUnitId,
        notes: :notes,
        agreement: :agreement,
        invoice_amount: :invoiceAmount,
        mobile_guid: :mobileGuid,
        taxes: :taxes,
        invoice: :invoice,
        currency: :currency,
        status: :status,
        bill_amount: :billAmount,
        agreement_amount: :agreementAmount,
        odometer_start: :odometerStart,
        odometer_end: :odometerEnd,
        ticket: :ticket,
        project: :project,
        phase: :phase,
        _info: :_info,
        custom_fields: :customFields
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        type: :ExpenseTypeReference,
        amount: :Float,
        date: :Time,
        id: :Integer,
        expense_report: :ExpenseReportReference,
        company: :CompanyReference,
        charge_to_id: :Integer,
        charge_to_type: :String,
        member: :MemberReference,
        payment_method: :PaymentMethodReference,
        classification: :ClassificationReference,
        billable_option: :String,
        location_id: :Integer,
        business_unit_id: :Integer,
        notes: :String,
        agreement: :AgreementReference,
        invoice_amount: :Float,
        mobile_guid: :String,
        taxes: :'Array<ExpenseTax>',
        invoice: :InvoiceReference,
        currency: :CurrencyReference,
        status: :String,
        bill_amount: :Float,
        agreement_amount: :Float,
        odometer_start: :Float,
        odometer_end: :Float,
        ticket: :TicketReference,
        project: :ProjectReference,
        phase: :ProjectPhaseReference,
        _info: :'Hash<String, String>',
        custom_fields: :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                amount
                charge_to_id
                charge_to_type
                billable_option
                location_id
                business_unit_id
                invoice_amount
                mobile_guid
                status
                bill_amount
                agreement_amount
                odometer_start
                odometer_end
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `ConnectWise::ExpenseEntry` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless acceptable_attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `ConnectWise::ExpenseEntry`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.type = (attributes[:type] if attributes.key?(:type))

      self.amount = (attributes[:amount] if attributes.key?(:amount))

      self.date = (attributes[:date] if attributes.key?(:date))

      self.id = attributes[:id] if attributes.key?(:id)

      self.expense_report = attributes[:expense_report] if attributes.key?(:expense_report)

      self.company = attributes[:company] if attributes.key?(:company)

      self.charge_to_id = attributes[:charge_to_id] if attributes.key?(:charge_to_id)

      self.charge_to_type = attributes[:charge_to_type] if attributes.key?(:charge_to_type)

      self.member = attributes[:member] if attributes.key?(:member)

      self.payment_method = attributes[:payment_method] if attributes.key?(:payment_method)

      self.classification = attributes[:classification] if attributes.key?(:classification)

      self.billable_option = attributes[:billable_option] if attributes.key?(:billable_option)

      self.location_id = attributes[:location_id] if attributes.key?(:location_id)

      self.business_unit_id = attributes[:business_unit_id] if attributes.key?(:business_unit_id)

      self.notes = attributes[:notes] if attributes.key?(:notes)

      self.agreement = attributes[:agreement] if attributes.key?(:agreement)

      self.invoice_amount = attributes[:invoice_amount] if attributes.key?(:invoice_amount)

      self.mobile_guid = attributes[:mobile_guid] if attributes.key?(:mobile_guid)

      if attributes.key?(:taxes) && (value = attributes[:taxes]).is_a?(Array)
        self.taxes = value
      end

      self.invoice = attributes[:invoice] if attributes.key?(:invoice)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      self.status = attributes[:status] if attributes.key?(:status)

      self.bill_amount = attributes[:bill_amount] if attributes.key?(:bill_amount)

      self.agreement_amount = attributes[:agreement_amount] if attributes.key?(:agreement_amount)

      self.odometer_start = attributes[:odometer_start] if attributes.key?(:odometer_start)

      self.odometer_end = attributes[:odometer_end] if attributes.key?(:odometer_end)

      self.ticket = attributes[:ticket] if attributes.key?(:ticket)

      self.project = attributes[:project] if attributes.key?(:project)

      self.phase = attributes[:phase] if attributes.key?(:phase)

      if attributes.key?(:_info) && (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end

      return unless attributes.key?(:custom_fields)

      if (value = attributes[:custom_fields]).is_a?(Array)
        self.custom_fields = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "type", type cannot be nil.') if @type.nil?

      invalid_properties.push('invalid value for "date", date cannot be nil.') if @date.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @type.nil?
      return false if @date.nil?

      charge_to_type_validator = EnumAttributeValidator.new('String',
                                                            %w[Company ServiceTicket ProjectTicket ChargeCode
                                                               Activity])
      return false unless charge_to_type_validator.valid?(@charge_to_type)

      billable_option_validator = EnumAttributeValidator.new('String',
                                                             %w[Billable DoNotBill NoCharge NoDefault])
      return false unless billable_option_validator.valid?(@billable_option)

      status_validator = EnumAttributeValidator.new('String',
                                                    %w[Open Rejected PendingApproval ErrorsCorrected PendingProjectApproval ApprovedByTierOne
                                                       RejectBySecondTier ApprovedByTierTwo ReadyToBill Billed WrittenOff BilledAgreement])
      return false unless status_validator.valid?(@status)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] type Value to be assigned
    def type=(type)
      raise ArgumentError, 'type cannot be nil' if type.nil?

      @type = type
    end

    # Custom attribute writer method with validation
    # @param [Object] date Value to be assigned
    def date=(date)
      raise ArgumentError, 'date cannot be nil' if date.nil?

      @date = date
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] charge_to_type Object to be assigned
    def charge_to_type=(charge_to_type)
      validator = EnumAttributeValidator.new('String',
                                             %w[Company ServiceTicket ProjectTicket ChargeCode Activity])
      unless validator.valid?(charge_to_type)
        raise ArgumentError, "invalid value for \"charge_to_type\", must be one of #{validator.allowable_values}."
      end

      @charge_to_type = charge_to_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billable_option Object to be assigned
    def billable_option=(billable_option)
      validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      unless validator.valid?(billable_option)
        raise ArgumentError, "invalid value for \"billable_option\", must be one of #{validator.allowable_values}."
      end

      @billable_option = billable_option
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String',
                                             %w[Open Rejected PendingApproval ErrorsCorrected PendingProjectApproval ApprovedByTierOne
                                                RejectBySecondTier ApprovedByTierTwo ReadyToBill Billed WrittenOff BilledAgreement])
      unless validator.valid?(status)
        raise ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end

      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        type == other.type &&
        amount == other.amount &&
        date == other.date &&
        id == other.id &&
        expense_report == other.expense_report &&
        company == other.company &&
        charge_to_id == other.charge_to_id &&
        charge_to_type == other.charge_to_type &&
        member == other.member &&
        payment_method == other.payment_method &&
        classification == other.classification &&
        billable_option == other.billable_option &&
        location_id == other.location_id &&
        business_unit_id == other.business_unit_id &&
        notes == other.notes &&
        agreement == other.agreement &&
        invoice_amount == other.invoice_amount &&
        mobile_guid == other.mobile_guid &&
        taxes == other.taxes &&
        invoice == other.invoice &&
        currency == other.currency &&
        status == other.status &&
        bill_amount == other.bill_amount &&
        agreement_amount == other.agreement_amount &&
        odometer_start == other.odometer_start &&
        odometer_end == other.odometer_end &&
        ticket == other.ticket &&
        project == other.project &&
        phase == other.phase &&
        _info == other._info &&
        custom_fields == other.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, amount, date, id, expense_report, company, charge_to_id, charge_to_type, member, payment_method,
       classification, billable_option, location_id, business_unit_id, notes, agreement, invoice_amount, mobile_guid, taxes, invoice, currency, status, bill_amount, agreement_amount, odometer_start, odometer_end, ticket, project, phase, _info, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
