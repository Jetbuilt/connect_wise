# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class Addition
    attr_accessor :product, :bill_customer, :id, :quantity, :less_included, :unit_price, :unit_cost, :effective_date, :cancelled_date, :taxable_flag, :purchase_item_flag, :special_order_flag, :agreement_id, :description, :billed_quantity, :uom, :ext_price, :ext_cost, :sequence_number, :margin, :prorate_cost, :prorate_price, :extended_prorate_cost, :extended_prorate_price, :prorate_current_period_flag, :opportunity, :agreement_status, :invoice_grouping, :_info, :custom_fields

    #  Max length: 50;
    attr_accessor :serial_number

    #  Max length: 6000;
    attr_accessor :invoice_description

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        product: :product,
        bill_customer: :billCustomer,
        id: :id,
        quantity: :quantity,
        less_included: :lessIncluded,
        unit_price: :unitPrice,
        unit_cost: :unitCost,
        effective_date: :effectiveDate,
        cancelled_date: :cancelledDate,
        taxable_flag: :taxableFlag,
        serial_number: :serialNumber,
        invoice_description: :invoiceDescription,
        purchase_item_flag: :purchaseItemFlag,
        special_order_flag: :specialOrderFlag,
        agreement_id: :agreementId,
        description: :description,
        billed_quantity: :billedQuantity,
        uom: :uom,
        ext_price: :extPrice,
        ext_cost: :extCost,
        sequence_number: :sequenceNumber,
        margin: :margin,
        prorate_cost: :prorateCost,
        prorate_price: :proratePrice,
        extended_prorate_cost: :extendedProrateCost,
        extended_prorate_price: :extendedProratePrice,
        prorate_current_period_flag: :prorateCurrentPeriodFlag,
        opportunity: :opportunity,
        agreement_status: :agreementStatus,
        invoice_grouping: :invoiceGrouping,
        _info: :_info,
        custom_fields: :customFields
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        product: :IvItemReference,
        bill_customer: :String,
        id: :Integer,
        quantity: :Float,
        less_included: :Float,
        unit_price: :Float,
        unit_cost: :Float,
        effective_date: :Time,
        cancelled_date: :Time,
        taxable_flag: :Boolean,
        serial_number: :String,
        invoice_description: :String,
        purchase_item_flag: :Boolean,
        special_order_flag: :Boolean,
        agreement_id: :Integer,
        description: :String,
        billed_quantity: :Float,
        uom: :String,
        ext_price: :Float,
        ext_cost: :Float,
        sequence_number: :Float,
        margin: :Float,
        prorate_cost: :Float,
        prorate_price: :Float,
        extended_prorate_cost: :Float,
        extended_prorate_price: :Float,
        prorate_current_period_flag: :Boolean,
        opportunity: :OpportunityReference,
        agreement_status: :String,
        invoice_grouping: :InvoiceGroupingReference,
        _info: :'Hash<String, String>',
        custom_fields: :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                bill_customer
                quantity
                less_included
                unit_price
                unit_cost
                taxable_flag
                purchase_item_flag
                special_order_flag
                agreement_id
                billed_quantity
                ext_price
                ext_cost
                sequence_number
                margin
                prorate_cost
                prorate_price
                extended_prorate_cost
                extended_prorate_price
                prorate_current_period_flag
                agreement_status
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::Addition` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::Addition`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.product = (attributes[:product] if attributes.key?(:product))

      self.bill_customer = (attributes[:bill_customer] if attributes.key?(:bill_customer))

      self.id = attributes[:id] if attributes.key?(:id)

      self.quantity = attributes[:quantity] if attributes.key?(:quantity)

      self.less_included = attributes[:less_included] if attributes.key?(:less_included)

      self.unit_price = attributes[:unit_price] if attributes.key?(:unit_price)

      self.unit_cost = attributes[:unit_cost] if attributes.key?(:unit_cost)

      self.effective_date = attributes[:effective_date] if attributes.key?(:effective_date)

      self.cancelled_date = attributes[:cancelled_date] if attributes.key?(:cancelled_date)

      self.taxable_flag = attributes[:taxable_flag] if attributes.key?(:taxable_flag)

      self.serial_number = attributes[:serial_number] if attributes.key?(:serial_number)

      self.invoice_description = attributes[:invoice_description] if attributes.key?(:invoice_description)

      self.purchase_item_flag = attributes[:purchase_item_flag] if attributes.key?(:purchase_item_flag)

      self.special_order_flag = attributes[:special_order_flag] if attributes.key?(:special_order_flag)

      self.agreement_id = attributes[:agreement_id] if attributes.key?(:agreement_id)

      self.description = attributes[:description] if attributes.key?(:description)

      self.billed_quantity = attributes[:billed_quantity] if attributes.key?(:billed_quantity)

      self.uom = attributes[:uom] if attributes.key?(:uom)

      self.ext_price = attributes[:ext_price] if attributes.key?(:ext_price)

      self.ext_cost = attributes[:ext_cost] if attributes.key?(:ext_cost)

      self.sequence_number = attributes[:sequence_number] if attributes.key?(:sequence_number)

      self.margin = attributes[:margin] if attributes.key?(:margin)

      self.prorate_cost = attributes[:prorate_cost] if attributes.key?(:prorate_cost)

      self.prorate_price = attributes[:prorate_price] if attributes.key?(:prorate_price)

      self.extended_prorate_cost = attributes[:extended_prorate_cost] if attributes.key?(:extended_prorate_cost)

      self.extended_prorate_price = attributes[:extended_prorate_price] if attributes.key?(:extended_prorate_price)

      self.prorate_current_period_flag = attributes[:prorate_current_period_flag] if attributes.key?(:prorate_current_period_flag)

      self.opportunity = attributes[:opportunity] if attributes.key?(:opportunity)

      self.agreement_status = attributes[:agreement_status] if attributes.key?(:agreement_status)

      self.invoice_grouping = attributes[:invoice_grouping] if attributes.key?(:invoice_grouping)

      if attributes.key?(:_info) && (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end

      return unless attributes.key?(:custom_fields)

      if (value = attributes[:custom_fields]).is_a?(Array)
        self.custom_fields = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "product", product cannot be nil.') if @product.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @product.nil?

      bill_customer_validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge])
      return false unless bill_customer_validator.valid?(@bill_customer)

      agreement_status_validator = EnumAttributeValidator.new('String', %w[Active Cancelled Expired Inactive])
      return false unless agreement_status_validator.valid?(@agreement_status)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] product Value to be assigned
    def product=(product)
      raise ArgumentError, 'product cannot be nil' if product.nil?

      @product = product
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bill_customer Object to be assigned
    def bill_customer=(bill_customer)
      validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge])
      raise ArgumentError, "invalid value for \"bill_customer\", must be one of #{validator.allowable_values}." unless validator.valid?(bill_customer)

      @bill_customer = bill_customer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] agreement_status Object to be assigned
    def agreement_status=(agreement_status)
      validator = EnumAttributeValidator.new('String', %w[Active Cancelled Expired Inactive])
      raise ArgumentError, "invalid value for \"agreement_status\", must be one of #{validator.allowable_values}." unless validator.valid?(agreement_status)

      @agreement_status = agreement_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        product == other.product &&
        bill_customer == other.bill_customer &&
        id == other.id &&
        quantity == other.quantity &&
        less_included == other.less_included &&
        unit_price == other.unit_price &&
        unit_cost == other.unit_cost &&
        effective_date == other.effective_date &&
        cancelled_date == other.cancelled_date &&
        taxable_flag == other.taxable_flag &&
        serial_number == other.serial_number &&
        invoice_description == other.invoice_description &&
        purchase_item_flag == other.purchase_item_flag &&
        special_order_flag == other.special_order_flag &&
        agreement_id == other.agreement_id &&
        description == other.description &&
        billed_quantity == other.billed_quantity &&
        uom == other.uom &&
        ext_price == other.ext_price &&
        ext_cost == other.ext_cost &&
        sequence_number == other.sequence_number &&
        margin == other.margin &&
        prorate_cost == other.prorate_cost &&
        prorate_price == other.prorate_price &&
        extended_prorate_cost == other.extended_prorate_cost &&
        extended_prorate_price == other.extended_prorate_price &&
        prorate_current_period_flag == other.prorate_current_period_flag &&
        opportunity == other.opportunity &&
        agreement_status == other.agreement_status &&
        invoice_grouping == other.invoice_grouping &&
        _info == other._info &&
        custom_fields == other.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [product, bill_customer, id, quantity, less_included, unit_price, unit_cost, effective_date, cancelled_date, taxable_flag, serial_number, invoice_description, purchase_item_flag, special_order_flag, agreement_id, description, billed_quantity, uom, ext_price, ext_cost, sequence_number, margin, prorate_cost, prorate_price, extended_prorate_cost, extended_prorate_price, prorate_current_period_flag, opportunity, agreement_status, invoice_grouping, _info, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
