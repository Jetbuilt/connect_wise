# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class TimeAccrual
    attr_accessor :id, :location, :vacation_available_type, :vacation_carryover_allowed_flag, :vacation_carryover_limit, :sick_available_type, :sick_carryover_allowed_flag, :sick_carryover_limit, :pto_available_type, :pto_carryover_allowed_flag, :pto_carryover_limit, :holiday_available_type, :holiday_carryover_allowed_flag, :holiday_carryover_limit, :_info

    # if vacationFlag is set to false, system will clear out or ingore the values of vacationAvailableType, vacationCarryoverAllowedFlag, vacationCarryoverLimit
    attr_accessor :vacation_flag

    # if sickFlag is set to false, system will clear out or ignore the values of sickAvailableType, sickCarryoverAllowedFlag, sickCarryoverLimit
    attr_accessor :sick_flag

    # if ptoFlag is set to false, system will clear out or ignore the values of ptoAvailableType, ptoCarryoverAllowedFlag, ptoCarryoverLimit
    attr_accessor :pto_flag

    # if holidayFlag is set to false, system will clear out or ignore the values of holidayAvailableType, holidayCarryoverAllowedFlag, holidayCarryoverLimit
    attr_accessor :holiday_flag

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        location: :location,
        vacation_flag: :vacationFlag,
        vacation_available_type: :vacationAvailableType,
        vacation_carryover_allowed_flag: :vacationCarryoverAllowedFlag,
        vacation_carryover_limit: :vacationCarryoverLimit,
        sick_flag: :sickFlag,
        sick_available_type: :sickAvailableType,
        sick_carryover_allowed_flag: :sickCarryoverAllowedFlag,
        sick_carryover_limit: :sickCarryoverLimit,
        pto_flag: :ptoFlag,
        pto_available_type: :ptoAvailableType,
        pto_carryover_allowed_flag: :ptoCarryoverAllowedFlag,
        pto_carryover_limit: :ptoCarryoverLimit,
        holiday_flag: :holidayFlag,
        holiday_available_type: :holidayAvailableType,
        holiday_carryover_allowed_flag: :holidayCarryoverAllowedFlag,
        holiday_carryover_limit: :holidayCarryoverLimit,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        location: :SystemLocationReference,
        vacation_flag: :Boolean,
        vacation_available_type: :String,
        vacation_carryover_allowed_flag: :Boolean,
        vacation_carryover_limit: :Float,
        sick_flag: :Boolean,
        sick_available_type: :String,
        sick_carryover_allowed_flag: :Boolean,
        sick_carryover_limit: :Float,
        pto_flag: :Boolean,
        pto_available_type: :String,
        pto_carryover_allowed_flag: :Boolean,
        pto_carryover_limit: :Float,
        holiday_flag: :Boolean,
        holiday_available_type: :String,
        holiday_carryover_allowed_flag: :Boolean,
        holiday_carryover_limit: :Float,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                vacation_flag
                vacation_available_type
                vacation_carryover_allowed_flag
                vacation_carryover_limit
                sick_flag
                sick_available_type
                sick_carryover_allowed_flag
                sick_carryover_limit
                pto_flag
                pto_available_type
                pto_carryover_allowed_flag
                pto_carryover_limit
                holiday_flag
                holiday_available_type
                holiday_carryover_allowed_flag
                holiday_carryover_limit
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::TimeAccrual` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::TimeAccrual`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.location = attributes[:location] if attributes.key?(:location)

      self.vacation_flag = attributes[:vacation_flag] if attributes.key?(:vacation_flag)

      self.vacation_available_type = attributes[:vacation_available_type] if attributes.key?(:vacation_available_type)

      self.vacation_carryover_allowed_flag = attributes[:vacation_carryover_allowed_flag] if attributes.key?(:vacation_carryover_allowed_flag)

      self.vacation_carryover_limit = attributes[:vacation_carryover_limit] if attributes.key?(:vacation_carryover_limit)

      self.sick_flag = attributes[:sick_flag] if attributes.key?(:sick_flag)

      self.sick_available_type = attributes[:sick_available_type] if attributes.key?(:sick_available_type)

      self.sick_carryover_allowed_flag = attributes[:sick_carryover_allowed_flag] if attributes.key?(:sick_carryover_allowed_flag)

      self.sick_carryover_limit = attributes[:sick_carryover_limit] if attributes.key?(:sick_carryover_limit)

      self.pto_flag = attributes[:pto_flag] if attributes.key?(:pto_flag)

      self.pto_available_type = attributes[:pto_available_type] if attributes.key?(:pto_available_type)

      self.pto_carryover_allowed_flag = attributes[:pto_carryover_allowed_flag] if attributes.key?(:pto_carryover_allowed_flag)

      self.pto_carryover_limit = attributes[:pto_carryover_limit] if attributes.key?(:pto_carryover_limit)

      self.holiday_flag = attributes[:holiday_flag] if attributes.key?(:holiday_flag)

      self.holiday_available_type = attributes[:holiday_available_type] if attributes.key?(:holiday_available_type)

      self.holiday_carryover_allowed_flag = attributes[:holiday_carryover_allowed_flag] if attributes.key?(:holiday_carryover_allowed_flag)

      self.holiday_carryover_limit = attributes[:holiday_carryover_limit] if attributes.key?(:holiday_carryover_limit)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      vacation_available_type_validator = EnumAttributeValidator.new('String', %w[AnniversaryYear CalendarYear])
      return false unless vacation_available_type_validator.valid?(@vacation_available_type)

      sick_available_type_validator = EnumAttributeValidator.new('String', %w[AnniversaryYear CalendarYear])
      return false unless sick_available_type_validator.valid?(@sick_available_type)

      pto_available_type_validator = EnumAttributeValidator.new('String', %w[AnniversaryYear CalendarYear])
      return false unless pto_available_type_validator.valid?(@pto_available_type)

      holiday_available_type_validator = EnumAttributeValidator.new('String', %w[AnniversaryYear CalendarYear])
      return false unless holiday_available_type_validator.valid?(@holiday_available_type)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vacation_available_type Object to be assigned
    def vacation_available_type=(vacation_available_type)
      validator = EnumAttributeValidator.new('String', %w[AnniversaryYear CalendarYear])
      raise ArgumentError, "invalid value for \"vacation_available_type\", must be one of #{validator.allowable_values}." unless validator.valid?(vacation_available_type)

      @vacation_available_type = vacation_available_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sick_available_type Object to be assigned
    def sick_available_type=(sick_available_type)
      validator = EnumAttributeValidator.new('String', %w[AnniversaryYear CalendarYear])
      raise ArgumentError, "invalid value for \"sick_available_type\", must be one of #{validator.allowable_values}." unless validator.valid?(sick_available_type)

      @sick_available_type = sick_available_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pto_available_type Object to be assigned
    def pto_available_type=(pto_available_type)
      validator = EnumAttributeValidator.new('String', %w[AnniversaryYear CalendarYear])
      raise ArgumentError, "invalid value for \"pto_available_type\", must be one of #{validator.allowable_values}." unless validator.valid?(pto_available_type)

      @pto_available_type = pto_available_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] holiday_available_type Object to be assigned
    def holiday_available_type=(holiday_available_type)
      validator = EnumAttributeValidator.new('String', %w[AnniversaryYear CalendarYear])
      raise ArgumentError, "invalid value for \"holiday_available_type\", must be one of #{validator.allowable_values}." unless validator.valid?(holiday_available_type)

      @holiday_available_type = holiday_available_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        location == other.location &&
        vacation_flag == other.vacation_flag &&
        vacation_available_type == other.vacation_available_type &&
        vacation_carryover_allowed_flag == other.vacation_carryover_allowed_flag &&
        vacation_carryover_limit == other.vacation_carryover_limit &&
        sick_flag == other.sick_flag &&
        sick_available_type == other.sick_available_type &&
        sick_carryover_allowed_flag == other.sick_carryover_allowed_flag &&
        sick_carryover_limit == other.sick_carryover_limit &&
        pto_flag == other.pto_flag &&
        pto_available_type == other.pto_available_type &&
        pto_carryover_allowed_flag == other.pto_carryover_allowed_flag &&
        pto_carryover_limit == other.pto_carryover_limit &&
        holiday_flag == other.holiday_flag &&
        holiday_available_type == other.holiday_available_type &&
        holiday_carryover_allowed_flag == other.holiday_carryover_allowed_flag &&
        holiday_carryover_limit == other.holiday_carryover_limit &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, location, vacation_flag, vacation_available_type, vacation_carryover_allowed_flag, vacation_carryover_limit, sick_flag, sick_available_type, sick_carryover_allowed_flag, sick_carryover_limit, pto_flag, pto_available_type, pto_carryover_allowed_flag, pto_carryover_limit, holiday_flag, holiday_available_type, holiday_carryover_allowed_flag, holiday_carryover_limit, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
