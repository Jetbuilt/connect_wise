# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class Company
    #  Max length: 30;
    attr_accessor :identifier

    #  Max length: 50;
    attr_accessor :name

    attr_accessor :id, :status, :country, :territory, :market, :account_number, :default_contact, :date_acquired, :sic_code, :parent_company, :annual_revenue, :number_of_employees, :year_established, :revenue_year, :ownership_type, :time_zone_setup, :lead_flag, :unsubscribe_flag, :calendar, :vendor_identifier, :tax_identifier, :tax_code, :billing_terms, :invoice_template, :pricing_schedule, :company_entity_type, :bill_to_company, :billing_site, :billing_contact, :invoice_delivery_method, :invoice_to_email_address, :invoice_cc_email_address, :deleted_flag, :date_deleted, :deleted_by, :mobile_guid, :facebook_url, :twitter_url, :linked_in_url, :currency, :territory_manager, :reseller_identifier, :is_vendor_flag, :site, :integrator_tags, :_info, :custom_fields

    # Gets or sets at least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country. Max length: 50;
    attr_accessor :address_line1

    # Gets or sets at least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country. Max length: 50;
    attr_accessor :address_line2

    # Gets or sets at least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country. Max length: 50;
    attr_accessor :city

    # Gets or sets at least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country. Max length: 50;
    attr_accessor :state

    # Gets or sets at least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country. Max length: 12;
    attr_accessor :zip

    #  Max length: 30;
    attr_accessor :phone_number

    #  Max length: 30;
    attr_accessor :fax_number

    #  Max length: 255;
    attr_accessor :website

    #  Max length: 50;
    attr_accessor :lead_source

    #  Max length: 50;
    attr_accessor :user_defined_field1

    #  Max length: 50;
    attr_accessor :user_defined_field2

    #  Max length: 50;
    attr_accessor :user_defined_field3

    #  Max length: 50;
    attr_accessor :user_defined_field4

    #  Max length: 50;
    attr_accessor :user_defined_field5

    #  Max length: 50;
    attr_accessor :user_defined_field6

    #  Max length: 50;
    attr_accessor :user_defined_field7

    #  Max length: 50;
    attr_accessor :user_defined_field8

    #  Max length: 50;
    attr_accessor :user_defined_field9

    #  Max length: 50;
    attr_accessor :user_defined_field10

    # Gets or sets integrer array of Company_Type_Recids to be assigned to company that can be passed in only during new company creation (post)             To update existing companies type, use the /company/companyTypeAssociations or /company/companies/{ID}/typeAssociations endpoints.
    attr_accessor :types

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        identifier: :identifier,
        name: :name,
        id: :id,
        status: :status,
        address_line1: :addressLine1,
        address_line2: :addressLine2,
        city: :city,
        state: :state,
        zip: :zip,
        country: :country,
        phone_number: :phoneNumber,
        fax_number: :faxNumber,
        website: :website,
        territory: :territory,
        market: :market,
        account_number: :accountNumber,
        default_contact: :defaultContact,
        date_acquired: :dateAcquired,
        sic_code: :sicCode,
        parent_company: :parentCompany,
        annual_revenue: :annualRevenue,
        number_of_employees: :numberOfEmployees,
        year_established: :yearEstablished,
        revenue_year: :revenueYear,
        ownership_type: :ownershipType,
        time_zone_setup: :timeZoneSetup,
        lead_source: :leadSource,
        lead_flag: :leadFlag,
        unsubscribe_flag: :unsubscribeFlag,
        calendar: :calendar,
        user_defined_field1: :userDefinedField1,
        user_defined_field2: :userDefinedField2,
        user_defined_field3: :userDefinedField3,
        user_defined_field4: :userDefinedField4,
        user_defined_field5: :userDefinedField5,
        user_defined_field6: :userDefinedField6,
        user_defined_field7: :userDefinedField7,
        user_defined_field8: :userDefinedField8,
        user_defined_field9: :userDefinedField9,
        user_defined_field10: :userDefinedField10,
        vendor_identifier: :vendorIdentifier,
        tax_identifier: :taxIdentifier,
        tax_code: :taxCode,
        billing_terms: :billingTerms,
        invoice_template: :invoiceTemplate,
        pricing_schedule: :pricingSchedule,
        company_entity_type: :companyEntityType,
        bill_to_company: :billToCompany,
        billing_site: :billingSite,
        billing_contact: :billingContact,
        invoice_delivery_method: :invoiceDeliveryMethod,
        invoice_to_email_address: :invoiceToEmailAddress,
        invoice_cc_email_address: :invoiceCCEmailAddress,
        deleted_flag: :deletedFlag,
        date_deleted: :dateDeleted,
        deleted_by: :deletedBy,
        mobile_guid: :mobileGuid,
        facebook_url: :facebookUrl,
        twitter_url: :twitterUrl,
        linked_in_url: :linkedInUrl,
        currency: :currency,
        territory_manager: :territoryManager,
        reseller_identifier: :resellerIdentifier,
        is_vendor_flag: :isVendorFlag,
        types: :types,
        site: :site,
        integrator_tags: :integratorTags,
        _info: :_info,
        custom_fields: :customFields
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        identifier: :String,
        name: :String,
        id: :Integer,
        status: :CompanyStatusReference,
        address_line1: :String,
        address_line2: :String,
        city: :String,
        state: :String,
        zip: :String,
        country: :CountryReference,
        phone_number: :String,
        fax_number: :String,
        website: :String,
        territory: :SystemLocationReference,
        market: :MarketDescriptionReference,
        account_number: :String,
        default_contact: :ContactReference,
        date_acquired: :Time,
        sic_code: :SicCodeReference,
        parent_company: :CompanyReference,
        annual_revenue: :Float,
        number_of_employees: :Integer,
        year_established: :Integer,
        revenue_year: :Integer,
        ownership_type: :OwnershipTypeReference,
        time_zone_setup: :TimeZoneSetupReference,
        lead_source: :String,
        lead_flag: :Boolean,
        unsubscribe_flag: :Boolean,
        calendar: :CalendarReference,
        user_defined_field1: :String,
        user_defined_field2: :String,
        user_defined_field3: :String,
        user_defined_field4: :String,
        user_defined_field5: :String,
        user_defined_field6: :String,
        user_defined_field7: :String,
        user_defined_field8: :String,
        user_defined_field9: :String,
        user_defined_field10: :String,
        vendor_identifier: :String,
        tax_identifier: :String,
        tax_code: :TaxCodeReference,
        billing_terms: :BillingTermsReference,
        invoice_template: :InvoiceTemplateReference,
        pricing_schedule: :PricingScheduleReference,
        company_entity_type: :EntityTypeReference,
        bill_to_company: :CompanyReference,
        billing_site: :SiteReference,
        billing_contact: :ContactReference,
        invoice_delivery_method: :BillingDeliveryReference,
        invoice_to_email_address: :String,
        invoice_cc_email_address: :String,
        deleted_flag: :Boolean,
        date_deleted: :Time,
        deleted_by: :String,
        mobile_guid: :String,
        facebook_url: :String,
        twitter_url: :String,
        linked_in_url: :String,
        currency: :CurrencyReference,
        territory_manager: :MemberReference,
        reseller_identifier: :String,
        is_vendor_flag: :Boolean,
        types: :'Array<CompanyTypeReference>',
        site: :SiteReference,
        integrator_tags: :'Array<String>',
        _info: :'Hash<String, String>',
        custom_fields: :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                annual_revenue
                number_of_employees
                year_established
                revenue_year
                lead_flag
                unsubscribe_flag
                deleted_flag
                mobile_guid
                is_vendor_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::Company` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::Company`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.identifier = (attributes[:identifier] if attributes.key?(:identifier))

      self.name = (attributes[:name] if attributes.key?(:name))

      self.id = attributes[:id] if attributes.key?(:id)

      self.status = attributes[:status] if attributes.key?(:status)

      self.address_line1 = attributes[:address_line1] if attributes.key?(:address_line1)

      self.address_line2 = attributes[:address_line2] if attributes.key?(:address_line2)

      self.city = attributes[:city] if attributes.key?(:city)

      self.state = attributes[:state] if attributes.key?(:state)

      self.zip = attributes[:zip] if attributes.key?(:zip)

      self.country = attributes[:country] if attributes.key?(:country)

      self.phone_number = attributes[:phone_number] if attributes.key?(:phone_number)

      self.fax_number = attributes[:fax_number] if attributes.key?(:fax_number)

      self.website = attributes[:website] if attributes.key?(:website)

      self.territory = attributes[:territory] if attributes.key?(:territory)

      self.market = attributes[:market] if attributes.key?(:market)

      self.account_number = attributes[:account_number] if attributes.key?(:account_number)

      self.default_contact = attributes[:default_contact] if attributes.key?(:default_contact)

      self.date_acquired = attributes[:date_acquired] if attributes.key?(:date_acquired)

      self.sic_code = attributes[:sic_code] if attributes.key?(:sic_code)

      self.parent_company = attributes[:parent_company] if attributes.key?(:parent_company)

      self.annual_revenue = attributes[:annual_revenue] if attributes.key?(:annual_revenue)

      self.number_of_employees = attributes[:number_of_employees] if attributes.key?(:number_of_employees)

      self.year_established = attributes[:year_established] if attributes.key?(:year_established)

      self.revenue_year = attributes[:revenue_year] if attributes.key?(:revenue_year)

      self.ownership_type = attributes[:ownership_type] if attributes.key?(:ownership_type)

      self.time_zone_setup = attributes[:time_zone_setup] if attributes.key?(:time_zone_setup)

      self.lead_source = attributes[:lead_source] if attributes.key?(:lead_source)

      self.lead_flag = attributes[:lead_flag] if attributes.key?(:lead_flag)

      self.unsubscribe_flag = attributes[:unsubscribe_flag] if attributes.key?(:unsubscribe_flag)

      self.calendar = attributes[:calendar] if attributes.key?(:calendar)

      self.user_defined_field1 = attributes[:user_defined_field1] if attributes.key?(:user_defined_field1)

      self.user_defined_field2 = attributes[:user_defined_field2] if attributes.key?(:user_defined_field2)

      self.user_defined_field3 = attributes[:user_defined_field3] if attributes.key?(:user_defined_field3)

      self.user_defined_field4 = attributes[:user_defined_field4] if attributes.key?(:user_defined_field4)

      self.user_defined_field5 = attributes[:user_defined_field5] if attributes.key?(:user_defined_field5)

      self.user_defined_field6 = attributes[:user_defined_field6] if attributes.key?(:user_defined_field6)

      self.user_defined_field7 = attributes[:user_defined_field7] if attributes.key?(:user_defined_field7)

      self.user_defined_field8 = attributes[:user_defined_field8] if attributes.key?(:user_defined_field8)

      self.user_defined_field9 = attributes[:user_defined_field9] if attributes.key?(:user_defined_field9)

      self.user_defined_field10 = attributes[:user_defined_field10] if attributes.key?(:user_defined_field10)

      self.vendor_identifier = attributes[:vendor_identifier] if attributes.key?(:vendor_identifier)

      self.tax_identifier = attributes[:tax_identifier] if attributes.key?(:tax_identifier)

      self.tax_code = attributes[:tax_code] if attributes.key?(:tax_code)

      self.billing_terms = attributes[:billing_terms] if attributes.key?(:billing_terms)

      self.invoice_template = attributes[:invoice_template] if attributes.key?(:invoice_template)

      self.pricing_schedule = attributes[:pricing_schedule] if attributes.key?(:pricing_schedule)

      self.company_entity_type = attributes[:company_entity_type] if attributes.key?(:company_entity_type)

      self.bill_to_company = attributes[:bill_to_company] if attributes.key?(:bill_to_company)

      self.billing_site = attributes[:billing_site] if attributes.key?(:billing_site)

      self.billing_contact = attributes[:billing_contact] if attributes.key?(:billing_contact)

      self.invoice_delivery_method = attributes[:invoice_delivery_method] if attributes.key?(:invoice_delivery_method)

      self.invoice_to_email_address = attributes[:invoice_to_email_address] if attributes.key?(:invoice_to_email_address)

      self.invoice_cc_email_address = attributes[:invoice_cc_email_address] if attributes.key?(:invoice_cc_email_address)

      self.deleted_flag = attributes[:deleted_flag] if attributes.key?(:deleted_flag)

      self.date_deleted = attributes[:date_deleted] if attributes.key?(:date_deleted)

      self.deleted_by = attributes[:deleted_by] if attributes.key?(:deleted_by)

      self.mobile_guid = attributes[:mobile_guid] if attributes.key?(:mobile_guid)

      self.facebook_url = attributes[:facebook_url] if attributes.key?(:facebook_url)

      self.twitter_url = attributes[:twitter_url] if attributes.key?(:twitter_url)

      self.linked_in_url = attributes[:linked_in_url] if attributes.key?(:linked_in_url)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      self.territory_manager = attributes[:territory_manager] if attributes.key?(:territory_manager)

      self.reseller_identifier = attributes[:reseller_identifier] if attributes.key?(:reseller_identifier)

      self.is_vendor_flag = attributes[:is_vendor_flag] if attributes.key?(:is_vendor_flag)

      if attributes.key?(:types) && (value = attributes[:types]).is_a?(Array)
        self.types = value
      end

      self.site = attributes[:site] if attributes.key?(:site)

      if attributes.key?(:integrator_tags) && (value = attributes[:integrator_tags]).is_a?(Array)
        self.integrator_tags = value
      end

      if attributes.key?(:_info) && (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end

      return unless attributes.key?(:custom_fields)

      if (value = attributes[:custom_fields]).is_a?(Array)
        self.custom_fields = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "identifier", identifier cannot be nil.') if @identifier.nil?

      invalid_properties.push('invalid value for "name", name cannot be nil.') if @name.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @identifier.nil?
      return false if @name.nil?

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] identifier Value to be assigned
    def identifier=(identifier)
      raise ArgumentError, 'identifier cannot be nil' if identifier.nil?

      @identifier = identifier
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      raise ArgumentError, 'name cannot be nil' if name.nil?

      @name = name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        identifier == other.identifier &&
        name == other.name &&
        id == other.id &&
        status == other.status &&
        address_line1 == other.address_line1 &&
        address_line2 == other.address_line2 &&
        city == other.city &&
        state == other.state &&
        zip == other.zip &&
        country == other.country &&
        phone_number == other.phone_number &&
        fax_number == other.fax_number &&
        website == other.website &&
        territory == other.territory &&
        market == other.market &&
        account_number == other.account_number &&
        default_contact == other.default_contact &&
        date_acquired == other.date_acquired &&
        sic_code == other.sic_code &&
        parent_company == other.parent_company &&
        annual_revenue == other.annual_revenue &&
        number_of_employees == other.number_of_employees &&
        year_established == other.year_established &&
        revenue_year == other.revenue_year &&
        ownership_type == other.ownership_type &&
        time_zone_setup == other.time_zone_setup &&
        lead_source == other.lead_source &&
        lead_flag == other.lead_flag &&
        unsubscribe_flag == other.unsubscribe_flag &&
        calendar == other.calendar &&
        user_defined_field1 == other.user_defined_field1 &&
        user_defined_field2 == other.user_defined_field2 &&
        user_defined_field3 == other.user_defined_field3 &&
        user_defined_field4 == other.user_defined_field4 &&
        user_defined_field5 == other.user_defined_field5 &&
        user_defined_field6 == other.user_defined_field6 &&
        user_defined_field7 == other.user_defined_field7 &&
        user_defined_field8 == other.user_defined_field8 &&
        user_defined_field9 == other.user_defined_field9 &&
        user_defined_field10 == other.user_defined_field10 &&
        vendor_identifier == other.vendor_identifier &&
        tax_identifier == other.tax_identifier &&
        tax_code == other.tax_code &&
        billing_terms == other.billing_terms &&
        invoice_template == other.invoice_template &&
        pricing_schedule == other.pricing_schedule &&
        company_entity_type == other.company_entity_type &&
        bill_to_company == other.bill_to_company &&
        billing_site == other.billing_site &&
        billing_contact == other.billing_contact &&
        invoice_delivery_method == other.invoice_delivery_method &&
        invoice_to_email_address == other.invoice_to_email_address &&
        invoice_cc_email_address == other.invoice_cc_email_address &&
        deleted_flag == other.deleted_flag &&
        date_deleted == other.date_deleted &&
        deleted_by == other.deleted_by &&
        mobile_guid == other.mobile_guid &&
        facebook_url == other.facebook_url &&
        twitter_url == other.twitter_url &&
        linked_in_url == other.linked_in_url &&
        currency == other.currency &&
        territory_manager == other.territory_manager &&
        reseller_identifier == other.reseller_identifier &&
        is_vendor_flag == other.is_vendor_flag &&
        types == other.types &&
        site == other.site &&
        integrator_tags == other.integrator_tags &&
        _info == other._info &&
        custom_fields == other.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [identifier, name, id, status, address_line1, address_line2, city, state, zip, country, phone_number, fax_number, website, territory, market, account_number, default_contact, date_acquired, sic_code, parent_company, annual_revenue, number_of_employees, year_established, revenue_year, ownership_type, time_zone_setup, lead_source, lead_flag, unsubscribe_flag, calendar, user_defined_field1, user_defined_field2, user_defined_field3, user_defined_field4, user_defined_field5, user_defined_field6, user_defined_field7, user_defined_field8, user_defined_field9, user_defined_field10, vendor_identifier, tax_identifier, tax_code, billing_terms, invoice_template, pricing_schedule, company_entity_type, bill_to_company, billing_site, billing_contact, invoice_delivery_method, invoice_to_email_address, invoice_cc_email_address, deleted_flag, date_deleted, deleted_by, mobile_guid, facebook_url, twitter_url, linked_in_url, currency, territory_manager, reseller_identifier, is_vendor_flag, types, site, integrator_tags, _info, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
