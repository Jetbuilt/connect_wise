=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class Company
    #  Max length: 25;
    attr_accessor :identifier

    #  Max length: 50;
    attr_accessor :name

    attr_accessor :id

    attr_accessor :status

    # At least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country Max length: 50;
    attr_accessor :address_line1

    # At least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country Max length: 50;
    attr_accessor :address_line2

    # At least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country Max length: 50;
    attr_accessor :city

    # At least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country Max length: 50;
    attr_accessor :state

    # At least one address field is required -- addressLine1, addressLine2, city, state, zip and/or country Max length: 12;
    attr_accessor :zip

    attr_accessor :country

    #  Max length: 30;
    attr_accessor :phone_number

    #  Max length: 30;
    attr_accessor :fax_number

    #  Max length: 255;
    attr_accessor :website

    attr_accessor :territory

    attr_accessor :market

    attr_accessor :account_number

    attr_accessor :default_contact

    attr_accessor :date_acquired

    attr_accessor :sic_code

    attr_accessor :parent_company

    attr_accessor :annual_revenue

    attr_accessor :number_of_employees

    attr_accessor :year_established

    attr_accessor :revenue_year

    attr_accessor :ownership_type

    attr_accessor :time_zone_setup

    #  Max length: 50;
    attr_accessor :lead_source

    attr_accessor :lead_flag

    attr_accessor :unsubscribe_flag

    attr_accessor :calendar

    #  Max length: 50;
    attr_accessor :user_defined_field1

    #  Max length: 50;
    attr_accessor :user_defined_field2

    #  Max length: 50;
    attr_accessor :user_defined_field3

    #  Max length: 50;
    attr_accessor :user_defined_field4

    #  Max length: 50;
    attr_accessor :user_defined_field5

    #  Max length: 50;
    attr_accessor :user_defined_field6

    #  Max length: 50;
    attr_accessor :user_defined_field7

    #  Max length: 50;
    attr_accessor :user_defined_field8

    #  Max length: 50;
    attr_accessor :user_defined_field9

    #  Max length: 50;
    attr_accessor :user_defined_field10

    attr_accessor :vendor_identifier

    attr_accessor :tax_identifier

    attr_accessor :tax_code

    attr_accessor :billing_terms

    attr_accessor :invoice_template

    attr_accessor :pricing_schedule

    attr_accessor :company_entity_type

    attr_accessor :bill_to_company

    attr_accessor :billing_site

    attr_accessor :billing_contact

    attr_accessor :invoice_delivery_method

    attr_accessor :invoice_to_email_address

    attr_accessor :invoice_cc_email_address

    attr_accessor :deleted_flag

    attr_accessor :date_deleted

    attr_accessor :deleted_by

    attr_accessor :mobile_guid

    attr_accessor :facebook_url

    attr_accessor :twitter_url

    attr_accessor :linked_in_url

    attr_accessor :currency

    attr_accessor :territory_manager

    attr_accessor :reseller_identifier

    attr_accessor :is_vendor_flag

    # Integrer array of Company_Type_Recids to be assigned to company that can be passed in only during new company creation (post)             To update existing companies type, use the /company/companyTypeAssociations or /company/companies/{ID}/typeAssociations endpoints
    attr_accessor :types

    attr_accessor :site

    attr_accessor :integrator_tags

    attr_accessor :_info

    attr_accessor :custom_fields

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'identifier' => :'identifier',
        :'name' => :'name',
        :'id' => :'id',
        :'status' => :'status',
        :'address_line1' => :'addressLine1',
        :'address_line2' => :'addressLine2',
        :'city' => :'city',
        :'state' => :'state',
        :'zip' => :'zip',
        :'country' => :'country',
        :'phone_number' => :'phoneNumber',
        :'fax_number' => :'faxNumber',
        :'website' => :'website',
        :'territory' => :'territory',
        :'market' => :'market',
        :'account_number' => :'accountNumber',
        :'default_contact' => :'defaultContact',
        :'date_acquired' => :'dateAcquired',
        :'sic_code' => :'sicCode',
        :'parent_company' => :'parentCompany',
        :'annual_revenue' => :'annualRevenue',
        :'number_of_employees' => :'numberOfEmployees',
        :'year_established' => :'yearEstablished',
        :'revenue_year' => :'revenueYear',
        :'ownership_type' => :'ownershipType',
        :'time_zone_setup' => :'timeZoneSetup',
        :'lead_source' => :'leadSource',
        :'lead_flag' => :'leadFlag',
        :'unsubscribe_flag' => :'unsubscribeFlag',
        :'calendar' => :'calendar',
        :'user_defined_field1' => :'userDefinedField1',
        :'user_defined_field2' => :'userDefinedField2',
        :'user_defined_field3' => :'userDefinedField3',
        :'user_defined_field4' => :'userDefinedField4',
        :'user_defined_field5' => :'userDefinedField5',
        :'user_defined_field6' => :'userDefinedField6',
        :'user_defined_field7' => :'userDefinedField7',
        :'user_defined_field8' => :'userDefinedField8',
        :'user_defined_field9' => :'userDefinedField9',
        :'user_defined_field10' => :'userDefinedField10',
        :'vendor_identifier' => :'vendorIdentifier',
        :'tax_identifier' => :'taxIdentifier',
        :'tax_code' => :'taxCode',
        :'billing_terms' => :'billingTerms',
        :'invoice_template' => :'invoiceTemplate',
        :'pricing_schedule' => :'pricingSchedule',
        :'company_entity_type' => :'companyEntityType',
        :'bill_to_company' => :'billToCompany',
        :'billing_site' => :'billingSite',
        :'billing_contact' => :'billingContact',
        :'invoice_delivery_method' => :'invoiceDeliveryMethod',
        :'invoice_to_email_address' => :'invoiceToEmailAddress',
        :'invoice_cc_email_address' => :'invoiceCCEmailAddress',
        :'deleted_flag' => :'deletedFlag',
        :'date_deleted' => :'dateDeleted',
        :'deleted_by' => :'deletedBy',
        :'mobile_guid' => :'mobileGuid',
        :'facebook_url' => :'facebookUrl',
        :'twitter_url' => :'twitterUrl',
        :'linked_in_url' => :'linkedInUrl',
        :'currency' => :'currency',
        :'territory_manager' => :'territoryManager',
        :'reseller_identifier' => :'resellerIdentifier',
        :'is_vendor_flag' => :'isVendorFlag',
        :'types' => :'types',
        :'site' => :'site',
        :'integrator_tags' => :'integratorTags',
        :'_info' => :'_info',
        :'custom_fields' => :'customFields'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'identifier' => :'String',
        :'name' => :'String',
        :'id' => :'Integer',
        :'status' => :'CompanyStatusReference',
        :'address_line1' => :'String',
        :'address_line2' => :'String',
        :'city' => :'String',
        :'state' => :'String',
        :'zip' => :'String',
        :'country' => :'CountryReference',
        :'phone_number' => :'String',
        :'fax_number' => :'String',
        :'website' => :'String',
        :'territory' => :'SystemLocationReference',
        :'market' => :'MarketDescriptionReference',
        :'account_number' => :'String',
        :'default_contact' => :'ContactReference',
        :'date_acquired' => :'Time',
        :'sic_code' => :'SicCodeReference',
        :'parent_company' => :'CompanyReference',
        :'annual_revenue' => :'Float',
        :'number_of_employees' => :'Integer',
        :'year_established' => :'Integer',
        :'revenue_year' => :'Integer',
        :'ownership_type' => :'OwnershipTypeReference',
        :'time_zone_setup' => :'TimeZoneSetupReference',
        :'lead_source' => :'String',
        :'lead_flag' => :'Boolean',
        :'unsubscribe_flag' => :'Boolean',
        :'calendar' => :'CalendarReference',
        :'user_defined_field1' => :'String',
        :'user_defined_field2' => :'String',
        :'user_defined_field3' => :'String',
        :'user_defined_field4' => :'String',
        :'user_defined_field5' => :'String',
        :'user_defined_field6' => :'String',
        :'user_defined_field7' => :'String',
        :'user_defined_field8' => :'String',
        :'user_defined_field9' => :'String',
        :'user_defined_field10' => :'String',
        :'vendor_identifier' => :'String',
        :'tax_identifier' => :'String',
        :'tax_code' => :'TaxCodeReference',
        :'billing_terms' => :'BillingTermsReference',
        :'invoice_template' => :'InvoiceTemplateReference',
        :'pricing_schedule' => :'PricingScheduleReference',
        :'company_entity_type' => :'EntityTypeReference',
        :'bill_to_company' => :'CompanyReference',
        :'billing_site' => :'SiteReference',
        :'billing_contact' => :'ContactReference',
        :'invoice_delivery_method' => :'BillingDeliveryReference',
        :'invoice_to_email_address' => :'String',
        :'invoice_cc_email_address' => :'String',
        :'deleted_flag' => :'Boolean',
        :'date_deleted' => :'Time',
        :'deleted_by' => :'String',
        :'mobile_guid' => :'String',
        :'facebook_url' => :'String',
        :'twitter_url' => :'String',
        :'linked_in_url' => :'String',
        :'currency' => :'CurrencyReference',
        :'territory_manager' => :'MemberReference',
        :'reseller_identifier' => :'String',
        :'is_vendor_flag' => :'Boolean',
        :'types' => :'Array<CompanyTypeReference>',
        :'site' => :'SiteReference',
        :'integrator_tags' => :'Array<String>',
        :'_info' => :'Hash<String, String>',
        :'custom_fields' => :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'annual_revenue',
        :'number_of_employees',
        :'year_established',
        :'revenue_year',
        :'lead_flag',
        :'unsubscribe_flag',
        :'deleted_flag',
        :'mobile_guid',
        :'is_vendor_flag',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::Company` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::Company`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'identifier')
        self.identifier = attributes[:'identifier']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'address_line1')
        self.address_line1 = attributes[:'address_line1']
      end

      if attributes.key?(:'address_line2')
        self.address_line2 = attributes[:'address_line2']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'zip')
        self.zip = attributes[:'zip']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.key?(:'fax_number')
        self.fax_number = attributes[:'fax_number']
      end

      if attributes.key?(:'website')
        self.website = attributes[:'website']
      end

      if attributes.key?(:'territory')
        self.territory = attributes[:'territory']
      end

      if attributes.key?(:'market')
        self.market = attributes[:'market']
      end

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.key?(:'default_contact')
        self.default_contact = attributes[:'default_contact']
      end

      if attributes.key?(:'date_acquired')
        self.date_acquired = attributes[:'date_acquired']
      end

      if attributes.key?(:'sic_code')
        self.sic_code = attributes[:'sic_code']
      end

      if attributes.key?(:'parent_company')
        self.parent_company = attributes[:'parent_company']
      end

      if attributes.key?(:'annual_revenue')
        self.annual_revenue = attributes[:'annual_revenue']
      end

      if attributes.key?(:'number_of_employees')
        self.number_of_employees = attributes[:'number_of_employees']
      end

      if attributes.key?(:'year_established')
        self.year_established = attributes[:'year_established']
      end

      if attributes.key?(:'revenue_year')
        self.revenue_year = attributes[:'revenue_year']
      end

      if attributes.key?(:'ownership_type')
        self.ownership_type = attributes[:'ownership_type']
      end

      if attributes.key?(:'time_zone_setup')
        self.time_zone_setup = attributes[:'time_zone_setup']
      end

      if attributes.key?(:'lead_source')
        self.lead_source = attributes[:'lead_source']
      end

      if attributes.key?(:'lead_flag')
        self.lead_flag = attributes[:'lead_flag']
      end

      if attributes.key?(:'unsubscribe_flag')
        self.unsubscribe_flag = attributes[:'unsubscribe_flag']
      end

      if attributes.key?(:'calendar')
        self.calendar = attributes[:'calendar']
      end

      if attributes.key?(:'user_defined_field1')
        self.user_defined_field1 = attributes[:'user_defined_field1']
      end

      if attributes.key?(:'user_defined_field2')
        self.user_defined_field2 = attributes[:'user_defined_field2']
      end

      if attributes.key?(:'user_defined_field3')
        self.user_defined_field3 = attributes[:'user_defined_field3']
      end

      if attributes.key?(:'user_defined_field4')
        self.user_defined_field4 = attributes[:'user_defined_field4']
      end

      if attributes.key?(:'user_defined_field5')
        self.user_defined_field5 = attributes[:'user_defined_field5']
      end

      if attributes.key?(:'user_defined_field6')
        self.user_defined_field6 = attributes[:'user_defined_field6']
      end

      if attributes.key?(:'user_defined_field7')
        self.user_defined_field7 = attributes[:'user_defined_field7']
      end

      if attributes.key?(:'user_defined_field8')
        self.user_defined_field8 = attributes[:'user_defined_field8']
      end

      if attributes.key?(:'user_defined_field9')
        self.user_defined_field9 = attributes[:'user_defined_field9']
      end

      if attributes.key?(:'user_defined_field10')
        self.user_defined_field10 = attributes[:'user_defined_field10']
      end

      if attributes.key?(:'vendor_identifier')
        self.vendor_identifier = attributes[:'vendor_identifier']
      end

      if attributes.key?(:'tax_identifier')
        self.tax_identifier = attributes[:'tax_identifier']
      end

      if attributes.key?(:'tax_code')
        self.tax_code = attributes[:'tax_code']
      end

      if attributes.key?(:'billing_terms')
        self.billing_terms = attributes[:'billing_terms']
      end

      if attributes.key?(:'invoice_template')
        self.invoice_template = attributes[:'invoice_template']
      end

      if attributes.key?(:'pricing_schedule')
        self.pricing_schedule = attributes[:'pricing_schedule']
      end

      if attributes.key?(:'company_entity_type')
        self.company_entity_type = attributes[:'company_entity_type']
      end

      if attributes.key?(:'bill_to_company')
        self.bill_to_company = attributes[:'bill_to_company']
      end

      if attributes.key?(:'billing_site')
        self.billing_site = attributes[:'billing_site']
      end

      if attributes.key?(:'billing_contact')
        self.billing_contact = attributes[:'billing_contact']
      end

      if attributes.key?(:'invoice_delivery_method')
        self.invoice_delivery_method = attributes[:'invoice_delivery_method']
      end

      if attributes.key?(:'invoice_to_email_address')
        self.invoice_to_email_address = attributes[:'invoice_to_email_address']
      end

      if attributes.key?(:'invoice_cc_email_address')
        self.invoice_cc_email_address = attributes[:'invoice_cc_email_address']
      end

      if attributes.key?(:'deleted_flag')
        self.deleted_flag = attributes[:'deleted_flag']
      end

      if attributes.key?(:'date_deleted')
        self.date_deleted = attributes[:'date_deleted']
      end

      if attributes.key?(:'deleted_by')
        self.deleted_by = attributes[:'deleted_by']
      end

      if attributes.key?(:'mobile_guid')
        self.mobile_guid = attributes[:'mobile_guid']
      end

      if attributes.key?(:'facebook_url')
        self.facebook_url = attributes[:'facebook_url']
      end

      if attributes.key?(:'twitter_url')
        self.twitter_url = attributes[:'twitter_url']
      end

      if attributes.key?(:'linked_in_url')
        self.linked_in_url = attributes[:'linked_in_url']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'territory_manager')
        self.territory_manager = attributes[:'territory_manager']
      end

      if attributes.key?(:'reseller_identifier')
        self.reseller_identifier = attributes[:'reseller_identifier']
      end

      if attributes.key?(:'is_vendor_flag')
        self.is_vendor_flag = attributes[:'is_vendor_flag']
      end

      if attributes.key?(:'types')
        if (value = attributes[:'types']).is_a?(Array)
          self.types = value
        end
      end

      if attributes.key?(:'site')
        self.site = attributes[:'site']
      end

      if attributes.key?(:'integrator_tags')
        if (value = attributes[:'integrator_tags']).is_a?(Array)
          self.integrator_tags = value
        end
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @identifier.nil?
        invalid_properties.push('invalid value for "identifier", identifier cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @identifier.nil?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          identifier == o.identifier &&
          name == o.name &&
          id == o.id &&
          status == o.status &&
          address_line1 == o.address_line1 &&
          address_line2 == o.address_line2 &&
          city == o.city &&
          state == o.state &&
          zip == o.zip &&
          country == o.country &&
          phone_number == o.phone_number &&
          fax_number == o.fax_number &&
          website == o.website &&
          territory == o.territory &&
          market == o.market &&
          account_number == o.account_number &&
          default_contact == o.default_contact &&
          date_acquired == o.date_acquired &&
          sic_code == o.sic_code &&
          parent_company == o.parent_company &&
          annual_revenue == o.annual_revenue &&
          number_of_employees == o.number_of_employees &&
          year_established == o.year_established &&
          revenue_year == o.revenue_year &&
          ownership_type == o.ownership_type &&
          time_zone_setup == o.time_zone_setup &&
          lead_source == o.lead_source &&
          lead_flag == o.lead_flag &&
          unsubscribe_flag == o.unsubscribe_flag &&
          calendar == o.calendar &&
          user_defined_field1 == o.user_defined_field1 &&
          user_defined_field2 == o.user_defined_field2 &&
          user_defined_field3 == o.user_defined_field3 &&
          user_defined_field4 == o.user_defined_field4 &&
          user_defined_field5 == o.user_defined_field5 &&
          user_defined_field6 == o.user_defined_field6 &&
          user_defined_field7 == o.user_defined_field7 &&
          user_defined_field8 == o.user_defined_field8 &&
          user_defined_field9 == o.user_defined_field9 &&
          user_defined_field10 == o.user_defined_field10 &&
          vendor_identifier == o.vendor_identifier &&
          tax_identifier == o.tax_identifier &&
          tax_code == o.tax_code &&
          billing_terms == o.billing_terms &&
          invoice_template == o.invoice_template &&
          pricing_schedule == o.pricing_schedule &&
          company_entity_type == o.company_entity_type &&
          bill_to_company == o.bill_to_company &&
          billing_site == o.billing_site &&
          billing_contact == o.billing_contact &&
          invoice_delivery_method == o.invoice_delivery_method &&
          invoice_to_email_address == o.invoice_to_email_address &&
          invoice_cc_email_address == o.invoice_cc_email_address &&
          deleted_flag == o.deleted_flag &&
          date_deleted == o.date_deleted &&
          deleted_by == o.deleted_by &&
          mobile_guid == o.mobile_guid &&
          facebook_url == o.facebook_url &&
          twitter_url == o.twitter_url &&
          linked_in_url == o.linked_in_url &&
          currency == o.currency &&
          territory_manager == o.territory_manager &&
          reseller_identifier == o.reseller_identifier &&
          is_vendor_flag == o.is_vendor_flag &&
          types == o.types &&
          site == o.site &&
          integrator_tags == o.integrator_tags &&
          _info == o._info &&
          custom_fields == o.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [identifier, name, id, status, address_line1, address_line2, city, state, zip, country, phone_number, fax_number, website, territory, market, account_number, default_contact, date_acquired, sic_code, parent_company, annual_revenue, number_of_employees, year_established, revenue_year, ownership_type, time_zone_setup, lead_source, lead_flag, unsubscribe_flag, calendar, user_defined_field1, user_defined_field2, user_defined_field3, user_defined_field4, user_defined_field5, user_defined_field6, user_defined_field7, user_defined_field8, user_defined_field9, user_defined_field10, vendor_identifier, tax_identifier, tax_code, billing_terms, invoice_template, pricing_schedule, company_entity_type, bill_to_company, billing_site, billing_contact, invoice_delivery_method, invoice_to_email_address, invoice_cc_email_address, deleted_flag, date_deleted, deleted_by, mobile_guid, facebook_url, twitter_url, linked_in_url, currency, territory_manager, reseller_identifier, is_vendor_flag, types, site, integrator_tags, _info, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
