# #Connectwise Manage All Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2022.1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.1
#

require 'date'
require 'time'

module ConnectWise
  class OpportunityToProjectConversion
    attr_accessor :project_id, :name, :status, :location_id, :business_unit_id, :board, :manager, :estimated_start, :estimated_end, :include_all_notes_flag, :include_all_documents_flag, :include_all_products_flag, :include_note_ids, :include_document_ids, :include_product_ids

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        project_id: :projectId,
        name: :name,
        status: :status,
        location_id: :locationId,
        business_unit_id: :businessUnitId,
        board: :board,
        manager: :manager,
        estimated_start: :estimatedStart,
        estimated_end: :estimatedEnd,
        include_all_notes_flag: :includeAllNotesFlag,
        include_all_documents_flag: :includeAllDocumentsFlag,
        include_all_products_flag: :includeAllProductsFlag,
        include_note_ids: :includeNoteIds,
        include_document_ids: :includeDocumentIds,
        include_product_ids: :includeProductIds
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        project_id: :Integer,
        name: :String,
        status: :ProjectStatusReference,
        location_id: :Integer,
        business_unit_id: :Integer,
        board: :ProjectBoardReference,
        manager: :MemberReference,
        estimated_start: :String,
        estimated_end: :String,
        include_all_notes_flag: :Boolean,
        include_all_documents_flag: :Boolean,
        include_all_products_flag: :Boolean,
        include_note_ids: :'Array<Integer>',
        include_document_ids: :'Array<Integer>',
        include_product_ids: :'Array<Integer>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                location_id
                business_unit_id
                include_all_notes_flag
                include_all_documents_flag
                include_all_products_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::OpportunityToProjectConversion` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::OpportunityToProjectConversion`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.project_id = attributes[:project_id] if attributes.key?(:project_id)

      self.name = attributes[:name] if attributes.key?(:name)

      self.status = attributes[:status] if attributes.key?(:status)

      self.location_id = attributes[:location_id] if attributes.key?(:location_id)

      self.business_unit_id = attributes[:business_unit_id] if attributes.key?(:business_unit_id)

      self.board = attributes[:board] if attributes.key?(:board)

      self.manager = attributes[:manager] if attributes.key?(:manager)

      self.estimated_start = attributes[:estimated_start] if attributes.key?(:estimated_start)

      self.estimated_end = attributes[:estimated_end] if attributes.key?(:estimated_end)

      self.include_all_notes_flag = attributes[:include_all_notes_flag] if attributes.key?(:include_all_notes_flag)

      self.include_all_documents_flag = attributes[:include_all_documents_flag] if attributes.key?(:include_all_documents_flag)

      self.include_all_products_flag = attributes[:include_all_products_flag] if attributes.key?(:include_all_products_flag)

      if attributes.key?(:include_note_ids) && (value = attributes[:include_note_ids]).is_a?(Array)
        self.include_note_ids = value
      end

      if attributes.key?(:include_document_ids) && (value = attributes[:include_document_ids]).is_a?(Array)
        self.include_document_ids = value
      end

      return unless attributes.key?(:include_product_ids)
      return unless (value = attributes[:include_product_ids]).is_a?(Array)

      self.include_product_ids = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        project_id == other.project_id &&
        name == other.name &&
        status == other.status &&
        location_id == other.location_id &&
        business_unit_id == other.business_unit_id &&
        board == other.board &&
        manager == other.manager &&
        estimated_start == other.estimated_start &&
        estimated_end == other.estimated_end &&
        include_all_notes_flag == other.include_all_notes_flag &&
        include_all_documents_flag == other.include_all_documents_flag &&
        include_all_products_flag == other.include_all_products_flag &&
        include_note_ids == other.include_note_ids &&
        include_document_ids == other.include_document_ids &&
        include_product_ids == other.include_product_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [project_id, name, status, location_id, business_unit_id, board, manager, estimated_start, estimated_end, include_all_notes_flag, include_all_documents_flag, include_all_products_flag, include_note_ids, include_document_ids, include_product_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
