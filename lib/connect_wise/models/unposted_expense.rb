# #Connectwise Manage All Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2022.1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.1
#

require 'date'
require 'time'

module ConnectWise
  class UnpostedExpense
    attr_accessor :id, :location_id, :department_id, :company, :account_number, :credit_account, :expense_detail_id, :expense_type, :classification, :gl_type, :member, :date_expense, :charge_code, :charge_description, :in_policy, :payment_method, :currency, :total, :billable_amount, :non_billable_amount, :agreement, :agreement_amount_covered, :ticket, :project, :project_phase, :tax_code, :item_taxable_flag, :sales_tax_amount, :state_tax_xref, :state_tax_amount, :county_tax_xref, :county_tax_amount, :city_tax_xref, :city_tax_amount, :country_tax_xref, :country_tax_amount, :composite_tax_xref, :composite_tax_amount, :level_six_tax_xref, :level_six_tax_amount, :date_closed, :_info

    # Used to determine if Avalara tax is enabled.
    attr_accessor :avalara_tax_flag

    # Set to true if transaction is taxable at the state level.
    attr_accessor :state_tax_flag

    # Set to true if transaction is taxable at the county level.
    attr_accessor :county_tax_flag

    # Set to true if transaction is taxable at the city level.
    attr_accessor :city_tax_flag

    # Set to true if transaction is taxable at the country level.
    attr_accessor :country_tax_flag

    # Set to true if transaction is taxable at the composite level.
    attr_accessor :composite_tax_flag

    # Set to true if transaction is taxable at level six.
    attr_accessor :level_six_tax_flag

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        location_id: :locationId,
        department_id: :departmentId,
        company: :company,
        account_number: :accountNumber,
        credit_account: :creditAccount,
        expense_detail_id: :expenseDetailId,
        expense_type: :expenseType,
        classification: :classification,
        gl_type: :glType,
        member: :member,
        date_expense: :dateExpense,
        charge_code: :chargeCode,
        charge_description: :chargeDescription,
        in_policy: :inPolicy,
        payment_method: :paymentMethod,
        currency: :currency,
        total: :total,
        billable_amount: :billableAmount,
        non_billable_amount: :nonBillableAmount,
        agreement: :agreement,
        agreement_amount_covered: :agreementAmountCovered,
        ticket: :ticket,
        project: :project,
        project_phase: :projectPhase,
        tax_code: :taxCode,
        avalara_tax_flag: :avalaraTaxFlag,
        item_taxable_flag: :itemTaxableFlag,
        sales_tax_amount: :salesTaxAmount,
        state_tax_flag: :stateTaxFlag,
        state_tax_xref: :stateTaxXref,
        state_tax_amount: :stateTaxAmount,
        county_tax_flag: :countyTaxFlag,
        county_tax_xref: :countyTaxXref,
        county_tax_amount: :countyTaxAmount,
        city_tax_flag: :cityTaxFlag,
        city_tax_xref: :cityTaxXref,
        city_tax_amount: :cityTaxAmount,
        country_tax_flag: :countryTaxFlag,
        country_tax_xref: :countryTaxXref,
        country_tax_amount: :countryTaxAmount,
        composite_tax_flag: :compositeTaxFlag,
        composite_tax_xref: :compositeTaxXref,
        composite_tax_amount: :compositeTaxAmount,
        level_six_tax_flag: :levelSixTaxFlag,
        level_six_tax_xref: :levelSixTaxXref,
        level_six_tax_amount: :levelSixTaxAmount,
        date_closed: :dateClosed,
        _info: :_info
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        location_id: :Integer,
        department_id: :Integer,
        company: :CompanyReference,
        account_number: :String,
        credit_account: :String,
        expense_detail_id: :Integer,
        expense_type: :ExpenseTypeReference,
        classification: :String,
        gl_type: :String,
        member: :MemberReference,
        date_expense: :String,
        charge_code: :ChargeCodeReference,
        charge_description: :String,
        in_policy: :Boolean,
        payment_method: :PaymentMethodReference,
        currency: :CurrencyReference,
        total: :Float,
        billable_amount: :Float,
        non_billable_amount: :Float,
        agreement: :AgreementReference,
        agreement_amount_covered: :Float,
        ticket: :TicketReference,
        project: :ProjectReference,
        project_phase: :ProjectPhaseReference,
        tax_code: :TaxCodeReference,
        avalara_tax_flag: :Boolean,
        item_taxable_flag: :Boolean,
        sales_tax_amount: :Float,
        state_tax_flag: :Boolean,
        state_tax_xref: :String,
        state_tax_amount: :Float,
        county_tax_flag: :Boolean,
        county_tax_xref: :String,
        county_tax_amount: :Float,
        city_tax_flag: :Boolean,
        city_tax_xref: :String,
        city_tax_amount: :Float,
        country_tax_flag: :Boolean,
        country_tax_xref: :String,
        country_tax_amount: :Float,
        composite_tax_flag: :Boolean,
        composite_tax_xref: :String,
        composite_tax_amount: :Float,
        level_six_tax_flag: :Boolean,
        level_six_tax_xref: :String,
        level_six_tax_amount: :Float,
        date_closed: :String,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                location_id
                department_id
                expense_detail_id
                classification
                gl_type
                in_policy
                total
                billable_amount
                non_billable_amount
                agreement_amount_covered
                avalara_tax_flag
                item_taxable_flag
                sales_tax_amount
                state_tax_flag
                state_tax_amount
                county_tax_flag
                county_tax_amount
                city_tax_flag
                city_tax_amount
                country_tax_flag
                country_tax_amount
                composite_tax_flag
                composite_tax_amount
                level_six_tax_flag
                level_six_tax_amount
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::UnpostedExpense` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::UnpostedExpense`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.location_id = attributes[:location_id] if attributes.key?(:location_id)

      self.department_id = attributes[:department_id] if attributes.key?(:department_id)

      self.company = attributes[:company] if attributes.key?(:company)

      self.account_number = attributes[:account_number] if attributes.key?(:account_number)

      self.credit_account = attributes[:credit_account] if attributes.key?(:credit_account)

      self.expense_detail_id = attributes[:expense_detail_id] if attributes.key?(:expense_detail_id)

      self.expense_type = attributes[:expense_type] if attributes.key?(:expense_type)

      self.classification = attributes[:classification] if attributes.key?(:classification)

      self.gl_type = attributes[:gl_type] if attributes.key?(:gl_type)

      self.member = attributes[:member] if attributes.key?(:member)

      self.date_expense = attributes[:date_expense] if attributes.key?(:date_expense)

      self.charge_code = attributes[:charge_code] if attributes.key?(:charge_code)

      self.charge_description = attributes[:charge_description] if attributes.key?(:charge_description)

      self.in_policy = attributes[:in_policy] if attributes.key?(:in_policy)

      self.payment_method = attributes[:payment_method] if attributes.key?(:payment_method)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      self.total = attributes[:total] if attributes.key?(:total)

      self.billable_amount = attributes[:billable_amount] if attributes.key?(:billable_amount)

      self.non_billable_amount = attributes[:non_billable_amount] if attributes.key?(:non_billable_amount)

      self.agreement = attributes[:agreement] if attributes.key?(:agreement)

      self.agreement_amount_covered = attributes[:agreement_amount_covered] if attributes.key?(:agreement_amount_covered)

      self.ticket = attributes[:ticket] if attributes.key?(:ticket)

      self.project = attributes[:project] if attributes.key?(:project)

      self.project_phase = attributes[:project_phase] if attributes.key?(:project_phase)

      self.tax_code = attributes[:tax_code] if attributes.key?(:tax_code)

      self.avalara_tax_flag = attributes[:avalara_tax_flag] if attributes.key?(:avalara_tax_flag)

      self.item_taxable_flag = attributes[:item_taxable_flag] if attributes.key?(:item_taxable_flag)

      self.sales_tax_amount = attributes[:sales_tax_amount] if attributes.key?(:sales_tax_amount)

      self.state_tax_flag = attributes[:state_tax_flag] if attributes.key?(:state_tax_flag)

      self.state_tax_xref = attributes[:state_tax_xref] if attributes.key?(:state_tax_xref)

      self.state_tax_amount = attributes[:state_tax_amount] if attributes.key?(:state_tax_amount)

      self.county_tax_flag = attributes[:county_tax_flag] if attributes.key?(:county_tax_flag)

      self.county_tax_xref = attributes[:county_tax_xref] if attributes.key?(:county_tax_xref)

      self.county_tax_amount = attributes[:county_tax_amount] if attributes.key?(:county_tax_amount)

      self.city_tax_flag = attributes[:city_tax_flag] if attributes.key?(:city_tax_flag)

      self.city_tax_xref = attributes[:city_tax_xref] if attributes.key?(:city_tax_xref)

      self.city_tax_amount = attributes[:city_tax_amount] if attributes.key?(:city_tax_amount)

      self.country_tax_flag = attributes[:country_tax_flag] if attributes.key?(:country_tax_flag)

      self.country_tax_xref = attributes[:country_tax_xref] if attributes.key?(:country_tax_xref)

      self.country_tax_amount = attributes[:country_tax_amount] if attributes.key?(:country_tax_amount)

      self.composite_tax_flag = attributes[:composite_tax_flag] if attributes.key?(:composite_tax_flag)

      self.composite_tax_xref = attributes[:composite_tax_xref] if attributes.key?(:composite_tax_xref)

      self.composite_tax_amount = attributes[:composite_tax_amount] if attributes.key?(:composite_tax_amount)

      self.level_six_tax_flag = attributes[:level_six_tax_flag] if attributes.key?(:level_six_tax_flag)

      self.level_six_tax_xref = attributes[:level_six_tax_xref] if attributes.key?(:level_six_tax_xref)

      self.level_six_tax_amount = attributes[:level_six_tax_amount] if attributes.key?(:level_six_tax_amount)

      self.date_closed = attributes[:date_closed] if attributes.key?(:date_closed)

      return unless attributes.key?(:_info)
      return unless (value = attributes[:_info]).is_a?(Hash)

      self._info = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      classification_validator = EnumAttributeValidator.new('String', %w[NonReimbursable Reimbursable Personal])
      return false unless classification_validator.valid?(@classification)

      gl_type_validator = EnumAttributeValidator.new('String', %w[AP AR EE EI EO IA IT P PF R RA RD RE RP ST SD ET FT PT])
      return false unless gl_type_validator.valid?(@gl_type)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] classification Object to be assigned
    def classification=(classification)
      validator = EnumAttributeValidator.new('String', %w[NonReimbursable Reimbursable Personal])
      raise ArgumentError, "invalid value for \"classification\", must be one of #{validator.allowable_values}." unless validator.valid?(classification)

      @classification = classification
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gl_type Object to be assigned
    def gl_type=(gl_type)
      validator = EnumAttributeValidator.new('String', %w[AP AR EE EI EO IA IT P PF R RA RD RE RP ST SD ET FT PT])
      raise ArgumentError, "invalid value for \"gl_type\", must be one of #{validator.allowable_values}." unless validator.valid?(gl_type)

      @gl_type = gl_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        location_id == other.location_id &&
        department_id == other.department_id &&
        company == other.company &&
        account_number == other.account_number &&
        credit_account == other.credit_account &&
        expense_detail_id == other.expense_detail_id &&
        expense_type == other.expense_type &&
        classification == other.classification &&
        gl_type == other.gl_type &&
        member == other.member &&
        date_expense == other.date_expense &&
        charge_code == other.charge_code &&
        charge_description == other.charge_description &&
        in_policy == other.in_policy &&
        payment_method == other.payment_method &&
        currency == other.currency &&
        total == other.total &&
        billable_amount == other.billable_amount &&
        non_billable_amount == other.non_billable_amount &&
        agreement == other.agreement &&
        agreement_amount_covered == other.agreement_amount_covered &&
        ticket == other.ticket &&
        project == other.project &&
        project_phase == other.project_phase &&
        tax_code == other.tax_code &&
        avalara_tax_flag == other.avalara_tax_flag &&
        item_taxable_flag == other.item_taxable_flag &&
        sales_tax_amount == other.sales_tax_amount &&
        state_tax_flag == other.state_tax_flag &&
        state_tax_xref == other.state_tax_xref &&
        state_tax_amount == other.state_tax_amount &&
        county_tax_flag == other.county_tax_flag &&
        county_tax_xref == other.county_tax_xref &&
        county_tax_amount == other.county_tax_amount &&
        city_tax_flag == other.city_tax_flag &&
        city_tax_xref == other.city_tax_xref &&
        city_tax_amount == other.city_tax_amount &&
        country_tax_flag == other.country_tax_flag &&
        country_tax_xref == other.country_tax_xref &&
        country_tax_amount == other.country_tax_amount &&
        composite_tax_flag == other.composite_tax_flag &&
        composite_tax_xref == other.composite_tax_xref &&
        composite_tax_amount == other.composite_tax_amount &&
        level_six_tax_flag == other.level_six_tax_flag &&
        level_six_tax_xref == other.level_six_tax_xref &&
        level_six_tax_amount == other.level_six_tax_amount &&
        date_closed == other.date_closed &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, location_id, department_id, company, account_number, credit_account, expense_detail_id, expense_type, classification, gl_type, member, date_expense, charge_code, charge_description, in_policy, payment_method, currency, total, billable_amount, non_billable_amount, agreement, agreement_amount_covered, ticket, project, project_phase, tax_code, avalara_tax_flag, item_taxable_flag, sales_tax_amount, state_tax_flag, state_tax_xref, state_tax_amount, county_tax_flag, county_tax_xref, county_tax_amount, city_tax_flag, city_tax_xref, city_tax_amount, country_tax_flag, country_tax_xref, country_tax_amount, composite_tax_flag, composite_tax_xref, composite_tax_amount, level_six_tax_flag, level_six_tax_xref, level_six_tax_amount, date_closed, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
