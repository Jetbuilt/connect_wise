# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class ContactInfo
    attr_accessor :id, :first_name, :last_name, :communication_items, :default_phone_nbr, :default_phone_type,
                  :default_flag, :company, :company_location, :site, :inactive_flag, :title, :types, :address_line1, :address_line2, :city, :state, :country, :zip, :department, :default_billing_flag, :facebook_url, :twitter_url, :linked_in_url, :_info

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        first_name: :firstName,
        last_name: :lastName,
        communication_items: :communicationItems,
        default_phone_nbr: :defaultPhoneNbr,
        default_phone_type: :defaultPhoneType,
        default_flag: :defaultFlag,
        company: :company,
        company_location: :companyLocation,
        site: :site,
        inactive_flag: :inactiveFlag,
        title: :title,
        types: :types,
        address_line1: :addressLine1,
        address_line2: :addressLine2,
        city: :city,
        state: :state,
        country: :country,
        zip: :zip,
        department: :department,
        default_billing_flag: :defaultBillingFlag,
        facebook_url: :facebookUrl,
        twitter_url: :twitterUrl,
        linked_in_url: :linkedInUrl,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        first_name: :String,
        last_name: :String,
        communication_items: :'Array<ContactCommunicationItem>',
        default_phone_nbr: :String,
        default_phone_type: :String,
        default_flag: :Boolean,
        company: :CompanyReference,
        company_location: :SystemLocationReference,
        site: :SiteReference,
        inactive_flag: :Boolean,
        title: :String,
        types: :'Array<ContactTypeReference>',
        address_line1: :String,
        address_line2: :String,
        city: :String,
        state: :String,
        country: :CountryReference,
        zip: :String,
        department: :ContactDepartmentReference,
        default_billing_flag: :Boolean,
        facebook_url: :String,
        twitter_url: :String,
        linked_in_url: :String,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                default_flag
                inactive_flag
                default_billing_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `ConnectWise::ContactInfo` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless acceptable_attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `ConnectWise::ContactInfo`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.first_name = attributes[:first_name] if attributes.key?(:first_name)

      self.last_name = attributes[:last_name] if attributes.key?(:last_name)

      if attributes.key?(:communication_items) && (value = attributes[:communication_items]).is_a?(Array)
        self.communication_items = value
      end

      self.default_phone_nbr = attributes[:default_phone_nbr] if attributes.key?(:default_phone_nbr)

      self.default_phone_type = attributes[:default_phone_type] if attributes.key?(:default_phone_type)

      self.default_flag = attributes[:default_flag] if attributes.key?(:default_flag)

      self.company = attributes[:company] if attributes.key?(:company)

      self.company_location = attributes[:company_location] if attributes.key?(:company_location)

      self.site = attributes[:site] if attributes.key?(:site)

      self.inactive_flag = attributes[:inactive_flag] if attributes.key?(:inactive_flag)

      self.title = attributes[:title] if attributes.key?(:title)

      if attributes.key?(:types) && (value = attributes[:types]).is_a?(Array)
        self.types = value
      end

      self.address_line1 = attributes[:address_line1] if attributes.key?(:address_line1)

      self.address_line2 = attributes[:address_line2] if attributes.key?(:address_line2)

      self.city = attributes[:city] if attributes.key?(:city)

      self.state = attributes[:state] if attributes.key?(:state)

      self.country = attributes[:country] if attributes.key?(:country)

      self.zip = attributes[:zip] if attributes.key?(:zip)

      self.department = attributes[:department] if attributes.key?(:department)

      self.default_billing_flag = attributes[:default_billing_flag] if attributes.key?(:default_billing_flag)

      self.facebook_url = attributes[:facebook_url] if attributes.key?(:facebook_url)

      self.twitter_url = attributes[:twitter_url] if attributes.key?(:twitter_url)

      self.linked_in_url = attributes[:linked_in_url] if attributes.key?(:linked_in_url)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        first_name == other.first_name &&
        last_name == other.last_name &&
        communication_items == other.communication_items &&
        default_phone_nbr == other.default_phone_nbr &&
        default_phone_type == other.default_phone_type &&
        default_flag == other.default_flag &&
        company == other.company &&
        company_location == other.company_location &&
        site == other.site &&
        inactive_flag == other.inactive_flag &&
        title == other.title &&
        types == other.types &&
        address_line1 == other.address_line1 &&
        address_line2 == other.address_line2 &&
        city == other.city &&
        state == other.state &&
        country == other.country &&
        zip == other.zip &&
        department == other.department &&
        default_billing_flag == other.default_billing_flag &&
        facebook_url == other.facebook_url &&
        twitter_url == other.twitter_url &&
        linked_in_url == other.linked_in_url &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, first_name, last_name, communication_items, default_phone_nbr, default_phone_type, default_flag, company,
       company_location, site, inactive_flag, title, types, address_line1, address_line2, city, state, country, zip, department, default_billing_flag, facebook_url, twitter_url, linked_in_url, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
