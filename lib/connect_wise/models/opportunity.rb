# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class Opportunity
    #  Max length: 100;
    attr_accessor :name

    attr_accessor :primary_sales_rep, :company, :contact, :id, :type, :stage, :status, :priority, :notes, :probability,
                  :rating, :campaign, :secondary_sales_rep, :site, :pipeline_change_date, :date_became_lead, :closed_date, :closed_by, :total_sales_tax, :ship_to_company, :ship_to_contact, :ship_to_site, :bill_to_company, :bill_to_contact, :bill_to_site, :billing_terms, :tax_code, :currency, :company_location_id, :technical_contact, :_info, :custom_fields

    #  Required On Updates;
    attr_accessor :expected_close_date

    #  Max length: 50;
    attr_accessor :source

    #  Required On Updates;
    attr_accessor :location_id

    #  Required On Updates;
    attr_accessor :business_unit_id

    #  Max length: 25;
    attr_accessor :customer_po

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        name: :name,
        primary_sales_rep: :primarySalesRep,
        company: :company,
        contact: :contact,
        id: :id,
        expected_close_date: :expectedCloseDate,
        type: :type,
        stage: :stage,
        status: :status,
        priority: :priority,
        notes: :notes,
        probability: :probability,
        source: :source,
        rating: :rating,
        campaign: :campaign,
        secondary_sales_rep: :secondarySalesRep,
        location_id: :locationId,
        business_unit_id: :businessUnitId,
        site: :site,
        customer_po: :customerPO,
        pipeline_change_date: :pipelineChangeDate,
        date_became_lead: :dateBecameLead,
        closed_date: :closedDate,
        closed_by: :closedBy,
        total_sales_tax: :totalSalesTax,
        ship_to_company: :shipToCompany,
        ship_to_contact: :shipToContact,
        ship_to_site: :shipToSite,
        bill_to_company: :billToCompany,
        bill_to_contact: :billToContact,
        bill_to_site: :billToSite,
        billing_terms: :billingTerms,
        tax_code: :taxCode,
        currency: :currency,
        company_location_id: :companyLocationId,
        technical_contact: :technicalContact,
        _info: :_info,
        custom_fields: :customFields
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        name: :String,
        primary_sales_rep: :MemberReference,
        company: :CompanyReference,
        contact: :ContactReference,
        id: :Integer,
        expected_close_date: :Time,
        type: :OpportunityTypeReference,
        stage: :OpportunityStageReference,
        status: :OpportunityStatusReference,
        priority: :OpportunityPriorityReference,
        notes: :String,
        probability: :OpportunityProbabilityReference,
        source: :String,
        rating: :OpportunityRatingReference,
        campaign: :CampaignReference,
        secondary_sales_rep: :MemberReference,
        location_id: :Integer,
        business_unit_id: :Integer,
        site: :SiteReference,
        customer_po: :String,
        pipeline_change_date: :Time,
        date_became_lead: :Time,
        closed_date: :Time,
        closed_by: :MemberReference,
        total_sales_tax: :Float,
        ship_to_company: :CompanyReference,
        ship_to_contact: :ContactReference,
        ship_to_site: :SiteReference,
        bill_to_company: :CompanyReference,
        bill_to_contact: :ContactReference,
        bill_to_site: :SiteReference,
        billing_terms: :BillingTermsReference,
        tax_code: :TaxCodeReference,
        currency: :CurrencyReference,
        company_location_id: :Integer,
        technical_contact: :ContactReference,
        _info: :'Hash<String, String>',
        custom_fields: :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                location_id
                business_unit_id
                total_sales_tax
                company_location_id
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `ConnectWise::Opportunity` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless acceptable_attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `ConnectWise::Opportunity`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.name = (attributes[:name] if attributes.key?(:name))

      self.primary_sales_rep = (attributes[:primary_sales_rep] if attributes.key?(:primary_sales_rep))

      self.company = (attributes[:company] if attributes.key?(:company))

      self.contact = (attributes[:contact] if attributes.key?(:contact))

      self.id = attributes[:id] if attributes.key?(:id)

      self.expected_close_date = attributes[:expected_close_date] if attributes.key?(:expected_close_date)

      self.type = attributes[:type] if attributes.key?(:type)

      self.stage = attributes[:stage] if attributes.key?(:stage)

      self.status = attributes[:status] if attributes.key?(:status)

      self.priority = attributes[:priority] if attributes.key?(:priority)

      self.notes = attributes[:notes] if attributes.key?(:notes)

      self.probability = attributes[:probability] if attributes.key?(:probability)

      self.source = attributes[:source] if attributes.key?(:source)

      self.rating = attributes[:rating] if attributes.key?(:rating)

      self.campaign = attributes[:campaign] if attributes.key?(:campaign)

      self.secondary_sales_rep = attributes[:secondary_sales_rep] if attributes.key?(:secondary_sales_rep)

      self.location_id = attributes[:location_id] if attributes.key?(:location_id)

      self.business_unit_id = attributes[:business_unit_id] if attributes.key?(:business_unit_id)

      self.site = attributes[:site] if attributes.key?(:site)

      self.customer_po = attributes[:customer_po] if attributes.key?(:customer_po)

      self.pipeline_change_date = attributes[:pipeline_change_date] if attributes.key?(:pipeline_change_date)

      self.date_became_lead = attributes[:date_became_lead] if attributes.key?(:date_became_lead)

      self.closed_date = attributes[:closed_date] if attributes.key?(:closed_date)

      self.closed_by = attributes[:closed_by] if attributes.key?(:closed_by)

      self.total_sales_tax = attributes[:total_sales_tax] if attributes.key?(:total_sales_tax)

      self.ship_to_company = attributes[:ship_to_company] if attributes.key?(:ship_to_company)

      self.ship_to_contact = attributes[:ship_to_contact] if attributes.key?(:ship_to_contact)

      self.ship_to_site = attributes[:ship_to_site] if attributes.key?(:ship_to_site)

      self.bill_to_company = attributes[:bill_to_company] if attributes.key?(:bill_to_company)

      self.bill_to_contact = attributes[:bill_to_contact] if attributes.key?(:bill_to_contact)

      self.bill_to_site = attributes[:bill_to_site] if attributes.key?(:bill_to_site)

      self.billing_terms = attributes[:billing_terms] if attributes.key?(:billing_terms)

      self.tax_code = attributes[:tax_code] if attributes.key?(:tax_code)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      self.company_location_id = attributes[:company_location_id] if attributes.key?(:company_location_id)

      self.technical_contact = attributes[:technical_contact] if attributes.key?(:technical_contact)

      if attributes.key?(:_info) && (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end

      return unless attributes.key?(:custom_fields)

      if (value = attributes[:custom_fields]).is_a?(Array)
        self.custom_fields = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "name", name cannot be nil.') if @name.nil?

      if @primary_sales_rep.nil?
        invalid_properties.push('invalid value for "primary_sales_rep", primary_sales_rep cannot be nil.')
      end

      invalid_properties.push('invalid value for "company", company cannot be nil.') if @company.nil?

      invalid_properties.push('invalid value for "contact", contact cannot be nil.') if @contact.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @name.nil?
      return false if @primary_sales_rep.nil?
      return false if @company.nil?
      return false if @contact.nil?

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      raise ArgumentError, 'name cannot be nil' if name.nil?

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] primary_sales_rep Value to be assigned
    def primary_sales_rep=(primary_sales_rep)
      raise ArgumentError, 'primary_sales_rep cannot be nil' if primary_sales_rep.nil?

      @primary_sales_rep = primary_sales_rep
    end

    # Custom attribute writer method with validation
    # @param [Object] company Value to be assigned
    def company=(company)
      raise ArgumentError, 'company cannot be nil' if company.nil?

      @company = company
    end

    # Custom attribute writer method with validation
    # @param [Object] contact Value to be assigned
    def contact=(contact)
      raise ArgumentError, 'contact cannot be nil' if contact.nil?

      @contact = contact
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        primary_sales_rep == other.primary_sales_rep &&
        company == other.company &&
        contact == other.contact &&
        id == other.id &&
        expected_close_date == other.expected_close_date &&
        type == other.type &&
        stage == other.stage &&
        status == other.status &&
        priority == other.priority &&
        notes == other.notes &&
        probability == other.probability &&
        source == other.source &&
        rating == other.rating &&
        campaign == other.campaign &&
        secondary_sales_rep == other.secondary_sales_rep &&
        location_id == other.location_id &&
        business_unit_id == other.business_unit_id &&
        site == other.site &&
        customer_po == other.customer_po &&
        pipeline_change_date == other.pipeline_change_date &&
        date_became_lead == other.date_became_lead &&
        closed_date == other.closed_date &&
        closed_by == other.closed_by &&
        total_sales_tax == other.total_sales_tax &&
        ship_to_company == other.ship_to_company &&
        ship_to_contact == other.ship_to_contact &&
        ship_to_site == other.ship_to_site &&
        bill_to_company == other.bill_to_company &&
        bill_to_contact == other.bill_to_contact &&
        bill_to_site == other.bill_to_site &&
        billing_terms == other.billing_terms &&
        tax_code == other.tax_code &&
        currency == other.currency &&
        company_location_id == other.company_location_id &&
        technical_contact == other.technical_contact &&
        _info == other._info &&
        custom_fields == other.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, primary_sales_rep, company, contact, id, expected_close_date, type, stage, status, priority, notes,
       probability, source, rating, campaign, secondary_sales_rep, location_id, business_unit_id, site, customer_po, pipeline_change_date, date_became_lead, closed_date, closed_by, total_sales_tax, ship_to_company, ship_to_contact, ship_to_site, bill_to_company, bill_to_contact, bill_to_site, billing_terms, tax_code, currency, company_location_id, technical_contact, _info, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
