=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class Opportunity
    #  Max length: 100;
    attr_accessor :name

    attr_accessor :id

    #  Required On Updates;
    attr_accessor :expected_close_date

    attr_accessor :type

    attr_accessor :stage

    attr_accessor :status

    attr_accessor :priority

    attr_accessor :notes

    attr_accessor :probability

    #  Max length: 50;
    attr_accessor :source

    attr_accessor :rating

    attr_accessor :campaign

    attr_accessor :primary_sales_rep

    attr_accessor :secondary_sales_rep

    #  Required On Updates;
    attr_accessor :location_id

    #  Required On Updates;
    attr_accessor :business_unit_id

    attr_accessor :company

    attr_accessor :contact

    attr_accessor :site

    #  Max length: 25;
    attr_accessor :customer_po

    attr_accessor :pipeline_change_date

    attr_accessor :date_became_lead

    attr_accessor :closed_date

    attr_accessor :closed_by

    attr_accessor :total_sales_tax

    attr_accessor :ship_to_company

    attr_accessor :ship_to_contact

    attr_accessor :ship_to_site

    attr_accessor :bill_to_company

    attr_accessor :bill_to_contact

    attr_accessor :bill_to_site

    attr_accessor :billing_terms

    attr_accessor :tax_code

    attr_accessor :currency

    attr_accessor :company_location_id

    attr_accessor :technical_contact

    attr_accessor :_info

    attr_accessor :custom_fields

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'id' => :'id',
        :'expected_close_date' => :'expectedCloseDate',
        :'type' => :'type',
        :'stage' => :'stage',
        :'status' => :'status',
        :'priority' => :'priority',
        :'notes' => :'notes',
        :'probability' => :'probability',
        :'source' => :'source',
        :'rating' => :'rating',
        :'campaign' => :'campaign',
        :'primary_sales_rep' => :'primarySalesRep',
        :'secondary_sales_rep' => :'secondarySalesRep',
        :'location_id' => :'locationId',
        :'business_unit_id' => :'businessUnitId',
        :'company' => :'company',
        :'contact' => :'contact',
        :'site' => :'site',
        :'customer_po' => :'customerPO',
        :'pipeline_change_date' => :'pipelineChangeDate',
        :'date_became_lead' => :'dateBecameLead',
        :'closed_date' => :'closedDate',
        :'closed_by' => :'closedBy',
        :'total_sales_tax' => :'totalSalesTax',
        :'ship_to_company' => :'shipToCompany',
        :'ship_to_contact' => :'shipToContact',
        :'ship_to_site' => :'shipToSite',
        :'bill_to_company' => :'billToCompany',
        :'bill_to_contact' => :'billToContact',
        :'bill_to_site' => :'billToSite',
        :'billing_terms' => :'billingTerms',
        :'tax_code' => :'taxCode',
        :'currency' => :'currency',
        :'company_location_id' => :'companyLocationId',
        :'technical_contact' => :'technicalContact',
        :'_info' => :'_info',
        :'custom_fields' => :'customFields'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'id' => :'Integer',
        :'expected_close_date' => :'Time',
        :'type' => :'OpportunityTypeReference',
        :'stage' => :'OpportunityStageReference',
        :'status' => :'OpportunityStatusReference',
        :'priority' => :'OpportunityPriorityReference',
        :'notes' => :'String',
        :'probability' => :'OpportunityProbabilityReference',
        :'source' => :'String',
        :'rating' => :'OpportunityRatingReference',
        :'campaign' => :'CampaignReference',
        :'primary_sales_rep' => :'MemberReference',
        :'secondary_sales_rep' => :'MemberReference',
        :'location_id' => :'Integer',
        :'business_unit_id' => :'Integer',
        :'company' => :'CompanyReference',
        :'contact' => :'ContactReference',
        :'site' => :'SiteReference',
        :'customer_po' => :'String',
        :'pipeline_change_date' => :'Time',
        :'date_became_lead' => :'Time',
        :'closed_date' => :'Time',
        :'closed_by' => :'MemberReference',
        :'total_sales_tax' => :'Float',
        :'ship_to_company' => :'CompanyReference',
        :'ship_to_contact' => :'ContactReference',
        :'ship_to_site' => :'SiteReference',
        :'bill_to_company' => :'CompanyReference',
        :'bill_to_contact' => :'ContactReference',
        :'bill_to_site' => :'SiteReference',
        :'billing_terms' => :'BillingTermsReference',
        :'tax_code' => :'TaxCodeReference',
        :'currency' => :'CurrencyReference',
        :'company_location_id' => :'Integer',
        :'technical_contact' => :'ContactReference',
        :'_info' => :'Hash<String, String>',
        :'custom_fields' => :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'location_id',
        :'business_unit_id',
        :'total_sales_tax',
        :'company_location_id',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::Opportunity` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::Opportunity`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'expected_close_date')
        self.expected_close_date = attributes[:'expected_close_date']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'stage')
        self.stage = attributes[:'stage']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'probability')
        self.probability = attributes[:'probability']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'rating')
        self.rating = attributes[:'rating']
      end

      if attributes.key?(:'campaign')
        self.campaign = attributes[:'campaign']
      end

      if attributes.key?(:'primary_sales_rep')
        self.primary_sales_rep = attributes[:'primary_sales_rep']
      end

      if attributes.key?(:'secondary_sales_rep')
        self.secondary_sales_rep = attributes[:'secondary_sales_rep']
      end

      if attributes.key?(:'location_id')
        self.location_id = attributes[:'location_id']
      end

      if attributes.key?(:'business_unit_id')
        self.business_unit_id = attributes[:'business_unit_id']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'contact')
        self.contact = attributes[:'contact']
      end

      if attributes.key?(:'site')
        self.site = attributes[:'site']
      end

      if attributes.key?(:'customer_po')
        self.customer_po = attributes[:'customer_po']
      end

      if attributes.key?(:'pipeline_change_date')
        self.pipeline_change_date = attributes[:'pipeline_change_date']
      end

      if attributes.key?(:'date_became_lead')
        self.date_became_lead = attributes[:'date_became_lead']
      end

      if attributes.key?(:'closed_date')
        self.closed_date = attributes[:'closed_date']
      end

      if attributes.key?(:'closed_by')
        self.closed_by = attributes[:'closed_by']
      end

      if attributes.key?(:'total_sales_tax')
        self.total_sales_tax = attributes[:'total_sales_tax']
      end

      if attributes.key?(:'ship_to_company')
        self.ship_to_company = attributes[:'ship_to_company']
      end

      if attributes.key?(:'ship_to_contact')
        self.ship_to_contact = attributes[:'ship_to_contact']
      end

      if attributes.key?(:'ship_to_site')
        self.ship_to_site = attributes[:'ship_to_site']
      end

      if attributes.key?(:'bill_to_company')
        self.bill_to_company = attributes[:'bill_to_company']
      end

      if attributes.key?(:'bill_to_contact')
        self.bill_to_contact = attributes[:'bill_to_contact']
      end

      if attributes.key?(:'bill_to_site')
        self.bill_to_site = attributes[:'bill_to_site']
      end

      if attributes.key?(:'billing_terms')
        self.billing_terms = attributes[:'billing_terms']
      end

      if attributes.key?(:'tax_code')
        self.tax_code = attributes[:'tax_code']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'company_location_id')
        self.company_location_id = attributes[:'company_location_id']
      end

      if attributes.key?(:'technical_contact')
        self.technical_contact = attributes[:'technical_contact']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          id == o.id &&
          expected_close_date == o.expected_close_date &&
          type == o.type &&
          stage == o.stage &&
          status == o.status &&
          priority == o.priority &&
          notes == o.notes &&
          probability == o.probability &&
          source == o.source &&
          rating == o.rating &&
          campaign == o.campaign &&
          primary_sales_rep == o.primary_sales_rep &&
          secondary_sales_rep == o.secondary_sales_rep &&
          location_id == o.location_id &&
          business_unit_id == o.business_unit_id &&
          company == o.company &&
          contact == o.contact &&
          site == o.site &&
          customer_po == o.customer_po &&
          pipeline_change_date == o.pipeline_change_date &&
          date_became_lead == o.date_became_lead &&
          closed_date == o.closed_date &&
          closed_by == o.closed_by &&
          total_sales_tax == o.total_sales_tax &&
          ship_to_company == o.ship_to_company &&
          ship_to_contact == o.ship_to_contact &&
          ship_to_site == o.ship_to_site &&
          bill_to_company == o.bill_to_company &&
          bill_to_contact == o.bill_to_contact &&
          bill_to_site == o.bill_to_site &&
          billing_terms == o.billing_terms &&
          tax_code == o.tax_code &&
          currency == o.currency &&
          company_location_id == o.company_location_id &&
          technical_contact == o.technical_contact &&
          _info == o._info &&
          custom_fields == o.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, id, expected_close_date, type, stage, status, priority, notes, probability, source, rating, campaign, primary_sales_rep, secondary_sales_rep, location_id, business_unit_id, company, contact, site, customer_po, pipeline_change_date, date_became_lead, closed_date, closed_by, total_sales_tax, ship_to_company, ship_to_contact, ship_to_site, bill_to_company, bill_to_contact, bill_to_site, billing_terms, tax_code, currency, company_location_id, technical_contact, _info, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
