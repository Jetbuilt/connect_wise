=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class ConnectWiseHostedSetup
    # Can be obtained via ConnectWiseHostedApiScreen report
    attr_accessor :screen_id

    #  Max length: 50;
    attr_accessor :description

    #  Max length: 1024;
    attr_accessor :url

    attr_accessor :type

    attr_accessor :id

    # Only required if not already set Max length: 36;
    attr_accessor :client_id

    #  Max length: 100;
    attr_accessor :origin

    attr_accessor :pod_height

    attr_accessor :toolbar_button_dialog_height

    attr_accessor :toolbar_button_dialog_width

    # Only required for ToolbarButtons Max length: 50;
    attr_accessor :toolbar_button_text

    #  Max length: 50;
    attr_accessor :toolbar_button_tool_tip

    attr_accessor :toolbar_button_icon_document_id

    attr_accessor :disabled_flag

    attr_accessor :location_ids

    attr_accessor :locations_enabled_flag

    attr_accessor :created_by

    attr_accessor :date_created

    attr_accessor :_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'screen_id' => :'screenId',
        :'description' => :'description',
        :'url' => :'url',
        :'type' => :'type',
        :'id' => :'id',
        :'client_id' => :'clientId',
        :'origin' => :'origin',
        :'pod_height' => :'podHeight',
        :'toolbar_button_dialog_height' => :'toolbarButtonDialogHeight',
        :'toolbar_button_dialog_width' => :'toolbarButtonDialogWidth',
        :'toolbar_button_text' => :'toolbarButtonText',
        :'toolbar_button_tool_tip' => :'toolbarButtonToolTip',
        :'toolbar_button_icon_document_id' => :'toolbarButtonIconDocumentId',
        :'disabled_flag' => :'disabledFlag',
        :'location_ids' => :'locationIds',
        :'locations_enabled_flag' => :'locationsEnabledFlag',
        :'created_by' => :'createdBy',
        :'date_created' => :'dateCreated',
        :'_info' => :'_info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'screen_id' => :'Integer',
        :'description' => :'String',
        :'url' => :'String',
        :'type' => :'String',
        :'id' => :'Integer',
        :'client_id' => :'String',
        :'origin' => :'String',
        :'pod_height' => :'Integer',
        :'toolbar_button_dialog_height' => :'Integer',
        :'toolbar_button_dialog_width' => :'Integer',
        :'toolbar_button_text' => :'String',
        :'toolbar_button_tool_tip' => :'String',
        :'toolbar_button_icon_document_id' => :'Integer',
        :'disabled_flag' => :'Boolean',
        :'location_ids' => :'Array<Integer>',
        :'locations_enabled_flag' => :'Boolean',
        :'created_by' => :'String',
        :'date_created' => :'String',
        :'_info' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'screen_id',
        :'type',
        :'pod_height',
        :'toolbar_button_dialog_height',
        :'toolbar_button_dialog_width',
        :'toolbar_button_icon_document_id',
        :'disabled_flag',
        :'locations_enabled_flag',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::ConnectWiseHostedSetup` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::ConnectWiseHostedSetup`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'screen_id')
        self.screen_id = attributes[:'screen_id']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'client_id')
        self.client_id = attributes[:'client_id']
      end

      if attributes.key?(:'origin')
        self.origin = attributes[:'origin']
      end

      if attributes.key?(:'pod_height')
        self.pod_height = attributes[:'pod_height']
      end

      if attributes.key?(:'toolbar_button_dialog_height')
        self.toolbar_button_dialog_height = attributes[:'toolbar_button_dialog_height']
      end

      if attributes.key?(:'toolbar_button_dialog_width')
        self.toolbar_button_dialog_width = attributes[:'toolbar_button_dialog_width']
      end

      if attributes.key?(:'toolbar_button_text')
        self.toolbar_button_text = attributes[:'toolbar_button_text']
      end

      if attributes.key?(:'toolbar_button_tool_tip')
        self.toolbar_button_tool_tip = attributes[:'toolbar_button_tool_tip']
      end

      if attributes.key?(:'toolbar_button_icon_document_id')
        self.toolbar_button_icon_document_id = attributes[:'toolbar_button_icon_document_id']
      end

      if attributes.key?(:'disabled_flag')
        self.disabled_flag = attributes[:'disabled_flag']
      end

      if attributes.key?(:'location_ids')
        if (value = attributes[:'location_ids']).is_a?(Array)
          self.location_ids = value
        end
      end

      if attributes.key?(:'locations_enabled_flag')
        self.locations_enabled_flag = attributes[:'locations_enabled_flag']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'date_created')
        self.date_created = attributes[:'date_created']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @url.nil?
        invalid_properties.push('invalid value for "url", url cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @description.nil?
      return false if @url.nil?
      type_validator = EnumAttributeValidator.new('String', ["Tab", "Pod", "ToolbarButton"])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["Tab", "Pod", "ToolbarButton"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          screen_id == o.screen_id &&
          description == o.description &&
          url == o.url &&
          type == o.type &&
          id == o.id &&
          client_id == o.client_id &&
          origin == o.origin &&
          pod_height == o.pod_height &&
          toolbar_button_dialog_height == o.toolbar_button_dialog_height &&
          toolbar_button_dialog_width == o.toolbar_button_dialog_width &&
          toolbar_button_text == o.toolbar_button_text &&
          toolbar_button_tool_tip == o.toolbar_button_tool_tip &&
          toolbar_button_icon_document_id == o.toolbar_button_icon_document_id &&
          disabled_flag == o.disabled_flag &&
          location_ids == o.location_ids &&
          locations_enabled_flag == o.locations_enabled_flag &&
          created_by == o.created_by &&
          date_created == o.date_created &&
          _info == o._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [screen_id, description, url, type, id, client_id, origin, pod_height, toolbar_button_dialog_height, toolbar_button_dialog_width, toolbar_button_text, toolbar_button_tool_tip, toolbar_button_icon_document_id, disabled_flag, location_ids, locations_enabled_flag, created_by, date_created, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
