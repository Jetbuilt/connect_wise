=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class Contact
    attr_accessor :id

    attr_accessor :first_name

    attr_accessor :last_name

    attr_accessor :company

    attr_accessor :site

    attr_accessor :address_line1

    attr_accessor :address_line2

    attr_accessor :city

    attr_accessor :state

    attr_accessor :zip

    attr_accessor :country

    attr_accessor :relationship

    attr_accessor :relationship_override

    attr_accessor :department

    attr_accessor :inactive_flag

    attr_accessor :default_merge_contact_id

    attr_accessor :security_identifier

    attr_accessor :manager_contact

    attr_accessor :assistant_contact

    attr_accessor :title

    attr_accessor :school

    attr_accessor :nick_name

    attr_accessor :married_flag

    attr_accessor :children_flag

    attr_accessor :children

    attr_accessor :significant_other

    attr_accessor :portal_password

    attr_accessor :portal_security_level

    attr_accessor :disable_portal_login_flag

    attr_accessor :unsubscribe_flag

    attr_accessor :gender

    attr_accessor :birth_day

    attr_accessor :anniversary

    attr_accessor :presence

    attr_accessor :mobile_guid

    attr_accessor :facebook_url

    attr_accessor :twitter_url

    attr_accessor :linked_in_url

    attr_accessor :default_phone_type

    attr_accessor :default_phone_nbr

    attr_accessor :default_phone_extension

    attr_accessor :default_billing_flag

    attr_accessor :default_flag

    #  Max length: 50;
    attr_accessor :user_defined_field1

    #  Max length: 50;
    attr_accessor :user_defined_field2

    #  Max length: 50;
    attr_accessor :user_defined_field3

    #  Max length: 50;
    attr_accessor :user_defined_field4

    #  Max length: 50;
    attr_accessor :user_defined_field5

    #  Max length: 50;
    attr_accessor :user_defined_field6

    #  Max length: 50;
    attr_accessor :user_defined_field7

    #  Max length: 50;
    attr_accessor :user_defined_field8

    #  Max length: 50;
    attr_accessor :user_defined_field9

    #  Max length: 50;
    attr_accessor :user_defined_field10

    attr_accessor :company_location

    attr_accessor :communication_items

    attr_accessor :types

    attr_accessor :integrator_tags

    attr_accessor :custom_fields

    attr_accessor :photo

    attr_accessor :ignore_duplicates

    attr_accessor :_info

    # Integrer array of Contact_Type_Recids to be assigned to contact that can be passed in only during new contact creation (post)             To update existing contacts type, use the /company/contactTypeAssociations or /company/contacts/{ID}/typeAssociations endpoints
    attr_accessor :type_ids

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'company' => :'company',
        :'site' => :'site',
        :'address_line1' => :'addressLine1',
        :'address_line2' => :'addressLine2',
        :'city' => :'city',
        :'state' => :'state',
        :'zip' => :'zip',
        :'country' => :'country',
        :'relationship' => :'relationship',
        :'relationship_override' => :'relationshipOverride',
        :'department' => :'department',
        :'inactive_flag' => :'inactiveFlag',
        :'default_merge_contact_id' => :'defaultMergeContactId',
        :'security_identifier' => :'securityIdentifier',
        :'manager_contact' => :'managerContact',
        :'assistant_contact' => :'assistantContact',
        :'title' => :'title',
        :'school' => :'school',
        :'nick_name' => :'nickName',
        :'married_flag' => :'marriedFlag',
        :'children_flag' => :'childrenFlag',
        :'children' => :'children',
        :'significant_other' => :'significantOther',
        :'portal_password' => :'portalPassword',
        :'portal_security_level' => :'portalSecurityLevel',
        :'disable_portal_login_flag' => :'disablePortalLoginFlag',
        :'unsubscribe_flag' => :'unsubscribeFlag',
        :'gender' => :'gender',
        :'birth_day' => :'birthDay',
        :'anniversary' => :'anniversary',
        :'presence' => :'presence',
        :'mobile_guid' => :'mobileGuid',
        :'facebook_url' => :'facebookUrl',
        :'twitter_url' => :'twitterUrl',
        :'linked_in_url' => :'linkedInUrl',
        :'default_phone_type' => :'defaultPhoneType',
        :'default_phone_nbr' => :'defaultPhoneNbr',
        :'default_phone_extension' => :'defaultPhoneExtension',
        :'default_billing_flag' => :'defaultBillingFlag',
        :'default_flag' => :'defaultFlag',
        :'user_defined_field1' => :'userDefinedField1',
        :'user_defined_field2' => :'userDefinedField2',
        :'user_defined_field3' => :'userDefinedField3',
        :'user_defined_field4' => :'userDefinedField4',
        :'user_defined_field5' => :'userDefinedField5',
        :'user_defined_field6' => :'userDefinedField6',
        :'user_defined_field7' => :'userDefinedField7',
        :'user_defined_field8' => :'userDefinedField8',
        :'user_defined_field9' => :'userDefinedField9',
        :'user_defined_field10' => :'userDefinedField10',
        :'company_location' => :'companyLocation',
        :'communication_items' => :'communicationItems',
        :'types' => :'types',
        :'integrator_tags' => :'integratorTags',
        :'custom_fields' => :'customFields',
        :'photo' => :'photo',
        :'ignore_duplicates' => :'ignoreDuplicates',
        :'_info' => :'_info',
        :'type_ids' => :'typeIds'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'company' => :'CompanyReference',
        :'site' => :'SiteReference',
        :'address_line1' => :'String',
        :'address_line2' => :'String',
        :'city' => :'String',
        :'state' => :'String',
        :'zip' => :'String',
        :'country' => :'CountryReference',
        :'relationship' => :'RelationshipReference',
        :'relationship_override' => :'String',
        :'department' => :'ContactDepartmentReference',
        :'inactive_flag' => :'Boolean',
        :'default_merge_contact_id' => :'Integer',
        :'security_identifier' => :'String',
        :'manager_contact' => :'ContactReference',
        :'assistant_contact' => :'ContactReference',
        :'title' => :'String',
        :'school' => :'String',
        :'nick_name' => :'String',
        :'married_flag' => :'Boolean',
        :'children_flag' => :'Boolean',
        :'children' => :'String',
        :'significant_other' => :'String',
        :'portal_password' => :'String',
        :'portal_security_level' => :'Integer',
        :'disable_portal_login_flag' => :'Boolean',
        :'unsubscribe_flag' => :'Boolean',
        :'gender' => :'String',
        :'birth_day' => :'String',
        :'anniversary' => :'String',
        :'presence' => :'String',
        :'mobile_guid' => :'String',
        :'facebook_url' => :'String',
        :'twitter_url' => :'String',
        :'linked_in_url' => :'String',
        :'default_phone_type' => :'String',
        :'default_phone_nbr' => :'String',
        :'default_phone_extension' => :'String',
        :'default_billing_flag' => :'Boolean',
        :'default_flag' => :'Boolean',
        :'user_defined_field1' => :'String',
        :'user_defined_field2' => :'String',
        :'user_defined_field3' => :'String',
        :'user_defined_field4' => :'String',
        :'user_defined_field5' => :'String',
        :'user_defined_field6' => :'String',
        :'user_defined_field7' => :'String',
        :'user_defined_field8' => :'String',
        :'user_defined_field9' => :'String',
        :'user_defined_field10' => :'String',
        :'company_location' => :'SystemLocationReference',
        :'communication_items' => :'Array<ContactCommunicationItem>',
        :'types' => :'Array<ContactTypeReference>',
        :'integrator_tags' => :'Array<String>',
        :'custom_fields' => :'Array<CustomFieldValue>',
        :'photo' => :'DocumentReference',
        :'ignore_duplicates' => :'Boolean',
        :'_info' => :'Hash<String, String>',
        :'type_ids' => :'Array<Integer>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'inactive_flag',
        :'default_merge_contact_id',
        :'married_flag',
        :'children_flag',
        :'portal_security_level',
        :'disable_portal_login_flag',
        :'unsubscribe_flag',
        :'gender',
        :'presence',
        :'mobile_guid',
        :'default_billing_flag',
        :'default_flag',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::Contact` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::Contact`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'site')
        self.site = attributes[:'site']
      end

      if attributes.key?(:'address_line1')
        self.address_line1 = attributes[:'address_line1']
      end

      if attributes.key?(:'address_line2')
        self.address_line2 = attributes[:'address_line2']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'zip')
        self.zip = attributes[:'zip']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'relationship')
        self.relationship = attributes[:'relationship']
      end

      if attributes.key?(:'relationship_override')
        self.relationship_override = attributes[:'relationship_override']
      end

      if attributes.key?(:'department')
        self.department = attributes[:'department']
      end

      if attributes.key?(:'inactive_flag')
        self.inactive_flag = attributes[:'inactive_flag']
      end

      if attributes.key?(:'default_merge_contact_id')
        self.default_merge_contact_id = attributes[:'default_merge_contact_id']
      end

      if attributes.key?(:'security_identifier')
        self.security_identifier = attributes[:'security_identifier']
      end

      if attributes.key?(:'manager_contact')
        self.manager_contact = attributes[:'manager_contact']
      end

      if attributes.key?(:'assistant_contact')
        self.assistant_contact = attributes[:'assistant_contact']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'school')
        self.school = attributes[:'school']
      end

      if attributes.key?(:'nick_name')
        self.nick_name = attributes[:'nick_name']
      end

      if attributes.key?(:'married_flag')
        self.married_flag = attributes[:'married_flag']
      end

      if attributes.key?(:'children_flag')
        self.children_flag = attributes[:'children_flag']
      end

      if attributes.key?(:'children')
        self.children = attributes[:'children']
      end

      if attributes.key?(:'significant_other')
        self.significant_other = attributes[:'significant_other']
      end

      if attributes.key?(:'portal_password')
        self.portal_password = attributes[:'portal_password']
      end

      if attributes.key?(:'portal_security_level')
        self.portal_security_level = attributes[:'portal_security_level']
      end

      if attributes.key?(:'disable_portal_login_flag')
        self.disable_portal_login_flag = attributes[:'disable_portal_login_flag']
      end

      if attributes.key?(:'unsubscribe_flag')
        self.unsubscribe_flag = attributes[:'unsubscribe_flag']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'birth_day')
        self.birth_day = attributes[:'birth_day']
      end

      if attributes.key?(:'anniversary')
        self.anniversary = attributes[:'anniversary']
      end

      if attributes.key?(:'presence')
        self.presence = attributes[:'presence']
      end

      if attributes.key?(:'mobile_guid')
        self.mobile_guid = attributes[:'mobile_guid']
      end

      if attributes.key?(:'facebook_url')
        self.facebook_url = attributes[:'facebook_url']
      end

      if attributes.key?(:'twitter_url')
        self.twitter_url = attributes[:'twitter_url']
      end

      if attributes.key?(:'linked_in_url')
        self.linked_in_url = attributes[:'linked_in_url']
      end

      if attributes.key?(:'default_phone_type')
        self.default_phone_type = attributes[:'default_phone_type']
      end

      if attributes.key?(:'default_phone_nbr')
        self.default_phone_nbr = attributes[:'default_phone_nbr']
      end

      if attributes.key?(:'default_phone_extension')
        self.default_phone_extension = attributes[:'default_phone_extension']
      end

      if attributes.key?(:'default_billing_flag')
        self.default_billing_flag = attributes[:'default_billing_flag']
      end

      if attributes.key?(:'default_flag')
        self.default_flag = attributes[:'default_flag']
      end

      if attributes.key?(:'user_defined_field1')
        self.user_defined_field1 = attributes[:'user_defined_field1']
      end

      if attributes.key?(:'user_defined_field2')
        self.user_defined_field2 = attributes[:'user_defined_field2']
      end

      if attributes.key?(:'user_defined_field3')
        self.user_defined_field3 = attributes[:'user_defined_field3']
      end

      if attributes.key?(:'user_defined_field4')
        self.user_defined_field4 = attributes[:'user_defined_field4']
      end

      if attributes.key?(:'user_defined_field5')
        self.user_defined_field5 = attributes[:'user_defined_field5']
      end

      if attributes.key?(:'user_defined_field6')
        self.user_defined_field6 = attributes[:'user_defined_field6']
      end

      if attributes.key?(:'user_defined_field7')
        self.user_defined_field7 = attributes[:'user_defined_field7']
      end

      if attributes.key?(:'user_defined_field8')
        self.user_defined_field8 = attributes[:'user_defined_field8']
      end

      if attributes.key?(:'user_defined_field9')
        self.user_defined_field9 = attributes[:'user_defined_field9']
      end

      if attributes.key?(:'user_defined_field10')
        self.user_defined_field10 = attributes[:'user_defined_field10']
      end

      if attributes.key?(:'company_location')
        self.company_location = attributes[:'company_location']
      end

      if attributes.key?(:'communication_items')
        if (value = attributes[:'communication_items']).is_a?(Array)
          self.communication_items = value
        end
      end

      if attributes.key?(:'types')
        if (value = attributes[:'types']).is_a?(Array)
          self.types = value
        end
      end

      if attributes.key?(:'integrator_tags')
        if (value = attributes[:'integrator_tags']).is_a?(Array)
          self.integrator_tags = value
        end
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end

      if attributes.key?(:'photo')
        self.photo = attributes[:'photo']
      end

      if attributes.key?(:'ignore_duplicates')
        self.ignore_duplicates = attributes[:'ignore_duplicates']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end

      if attributes.key?(:'type_ids')
        if (value = attributes[:'type_ids']).is_a?(Array)
          self.type_ids = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      gender_validator = EnumAttributeValidator.new('String', ["Female", "Male"])
      return false unless gender_validator.valid?(@gender)
      presence_validator = EnumAttributeValidator.new('String', ["NoAgent", "Online", "DoNotDisturb", "Away", "Offline"])
      return false unless presence_validator.valid?(@presence)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gender Object to be assigned
    def gender=(gender)
      validator = EnumAttributeValidator.new('String', ["Female", "Male"])
      unless validator.valid?(gender)
        fail ArgumentError, "invalid value for \"gender\", must be one of #{validator.allowable_values}."
      end
      @gender = gender
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] presence Object to be assigned
    def presence=(presence)
      validator = EnumAttributeValidator.new('String', ["NoAgent", "Online", "DoNotDisturb", "Away", "Offline"])
      unless validator.valid?(presence)
        fail ArgumentError, "invalid value for \"presence\", must be one of #{validator.allowable_values}."
      end
      @presence = presence
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          company == o.company &&
          site == o.site &&
          address_line1 == o.address_line1 &&
          address_line2 == o.address_line2 &&
          city == o.city &&
          state == o.state &&
          zip == o.zip &&
          country == o.country &&
          relationship == o.relationship &&
          relationship_override == o.relationship_override &&
          department == o.department &&
          inactive_flag == o.inactive_flag &&
          default_merge_contact_id == o.default_merge_contact_id &&
          security_identifier == o.security_identifier &&
          manager_contact == o.manager_contact &&
          assistant_contact == o.assistant_contact &&
          title == o.title &&
          school == o.school &&
          nick_name == o.nick_name &&
          married_flag == o.married_flag &&
          children_flag == o.children_flag &&
          children == o.children &&
          significant_other == o.significant_other &&
          portal_password == o.portal_password &&
          portal_security_level == o.portal_security_level &&
          disable_portal_login_flag == o.disable_portal_login_flag &&
          unsubscribe_flag == o.unsubscribe_flag &&
          gender == o.gender &&
          birth_day == o.birth_day &&
          anniversary == o.anniversary &&
          presence == o.presence &&
          mobile_guid == o.mobile_guid &&
          facebook_url == o.facebook_url &&
          twitter_url == o.twitter_url &&
          linked_in_url == o.linked_in_url &&
          default_phone_type == o.default_phone_type &&
          default_phone_nbr == o.default_phone_nbr &&
          default_phone_extension == o.default_phone_extension &&
          default_billing_flag == o.default_billing_flag &&
          default_flag == o.default_flag &&
          user_defined_field1 == o.user_defined_field1 &&
          user_defined_field2 == o.user_defined_field2 &&
          user_defined_field3 == o.user_defined_field3 &&
          user_defined_field4 == o.user_defined_field4 &&
          user_defined_field5 == o.user_defined_field5 &&
          user_defined_field6 == o.user_defined_field6 &&
          user_defined_field7 == o.user_defined_field7 &&
          user_defined_field8 == o.user_defined_field8 &&
          user_defined_field9 == o.user_defined_field9 &&
          user_defined_field10 == o.user_defined_field10 &&
          company_location == o.company_location &&
          communication_items == o.communication_items &&
          types == o.types &&
          integrator_tags == o.integrator_tags &&
          custom_fields == o.custom_fields &&
          photo == o.photo &&
          ignore_duplicates == o.ignore_duplicates &&
          _info == o._info &&
          type_ids == o.type_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, first_name, last_name, company, site, address_line1, address_line2, city, state, zip, country, relationship, relationship_override, department, inactive_flag, default_merge_contact_id, security_identifier, manager_contact, assistant_contact, title, school, nick_name, married_flag, children_flag, children, significant_other, portal_password, portal_security_level, disable_portal_login_flag, unsubscribe_flag, gender, birth_day, anniversary, presence, mobile_guid, facebook_url, twitter_url, linked_in_url, default_phone_type, default_phone_nbr, default_phone_extension, default_billing_flag, default_flag, user_defined_field1, user_defined_field2, user_defined_field3, user_defined_field4, user_defined_field5, user_defined_field6, user_defined_field7, user_defined_field8, user_defined_field9, user_defined_field10, company_location, communication_items, types, integrator_tags, custom_fields, photo, ignore_duplicates, _info, type_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
