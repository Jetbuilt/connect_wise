# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class PortalConfigurationServiceSetup
    attr_accessor :display_closed_tickets_option, :time_materials_ticket_template, :fixed_fee_ticket_template, :id,
                  :service_type_flag, :service_sub_type_flag, :service_sub_type_item_flag, :status_flag, :site_name_flag, :entered_date_flag, :last_update_flag, :required_date_flag, :contact_flag, :assigned_resources_flag, :sla_info_flag, :service_board_flag, :budget_hours_flag, :actual_hours_flag, :approval_status_flag, :open_tasks_flag, :closed_tasks_flag, :enable_chat_assist_flag, :_info

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        display_closed_tickets_option: :displayClosedTicketsOption,
        time_materials_ticket_template: :timeMaterialsTicketTemplate,
        fixed_fee_ticket_template: :fixedFeeTicketTemplate,
        id: :id,
        service_type_flag: :serviceTypeFlag,
        service_sub_type_flag: :serviceSubTypeFlag,
        service_sub_type_item_flag: :serviceSubTypeItemFlag,
        status_flag: :statusFlag,
        site_name_flag: :siteNameFlag,
        entered_date_flag: :enteredDateFlag,
        last_update_flag: :lastUpdateFlag,
        required_date_flag: :requiredDateFlag,
        contact_flag: :contactFlag,
        assigned_resources_flag: :assignedResourcesFlag,
        sla_info_flag: :slaInfoFlag,
        service_board_flag: :serviceBoardFlag,
        budget_hours_flag: :budgetHoursFlag,
        actual_hours_flag: :actualHoursFlag,
        approval_status_flag: :approvalStatusFlag,
        open_tasks_flag: :openTasksFlag,
        closed_tasks_flag: :closedTasksFlag,
        enable_chat_assist_flag: :enableChatAssistFlag,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        display_closed_tickets_option: :String,
        time_materials_ticket_template: :ServiceSignoffReference,
        fixed_fee_ticket_template: :ServiceSignoffReference,
        id: :Integer,
        service_type_flag: :Boolean,
        service_sub_type_flag: :Boolean,
        service_sub_type_item_flag: :Boolean,
        status_flag: :Boolean,
        site_name_flag: :Boolean,
        entered_date_flag: :Boolean,
        last_update_flag: :Boolean,
        required_date_flag: :Boolean,
        contact_flag: :Boolean,
        assigned_resources_flag: :Boolean,
        sla_info_flag: :Boolean,
        service_board_flag: :Boolean,
        budget_hours_flag: :Boolean,
        actual_hours_flag: :Boolean,
        approval_status_flag: :Boolean,
        open_tasks_flag: :Boolean,
        closed_tasks_flag: :Boolean,
        enable_chat_assist_flag: :Boolean,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                display_closed_tickets_option
                service_type_flag
                service_sub_type_flag
                service_sub_type_item_flag
                status_flag
                site_name_flag
                entered_date_flag
                last_update_flag
                required_date_flag
                contact_flag
                assigned_resources_flag
                sla_info_flag
                service_board_flag
                budget_hours_flag
                actual_hours_flag
                approval_status_flag
                open_tasks_flag
                closed_tasks_flag
                enable_chat_assist_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `ConnectWise::PortalConfigurationServiceSetup` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless acceptable_attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `ConnectWise::PortalConfigurationServiceSetup`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.display_closed_tickets_option = if attributes.key?(:display_closed_tickets_option)
                                             attributes[:display_closed_tickets_option]
                                           end

      self.time_materials_ticket_template = if attributes.key?(:time_materials_ticket_template)
                                              attributes[:time_materials_ticket_template]
                                            end

      self.fixed_fee_ticket_template = if attributes.key?(:fixed_fee_ticket_template)
                                         attributes[:fixed_fee_ticket_template]
                                       end

      self.id = attributes[:id] if attributes.key?(:id)

      self.service_type_flag = attributes[:service_type_flag] if attributes.key?(:service_type_flag)

      self.service_sub_type_flag = attributes[:service_sub_type_flag] if attributes.key?(:service_sub_type_flag)

      if attributes.key?(:service_sub_type_item_flag)
        self.service_sub_type_item_flag = attributes[:service_sub_type_item_flag]
      end

      self.status_flag = attributes[:status_flag] if attributes.key?(:status_flag)

      self.site_name_flag = attributes[:site_name_flag] if attributes.key?(:site_name_flag)

      self.entered_date_flag = attributes[:entered_date_flag] if attributes.key?(:entered_date_flag)

      self.last_update_flag = attributes[:last_update_flag] if attributes.key?(:last_update_flag)

      self.required_date_flag = attributes[:required_date_flag] if attributes.key?(:required_date_flag)

      self.contact_flag = attributes[:contact_flag] if attributes.key?(:contact_flag)

      self.assigned_resources_flag = attributes[:assigned_resources_flag] if attributes.key?(:assigned_resources_flag)

      self.sla_info_flag = attributes[:sla_info_flag] if attributes.key?(:sla_info_flag)

      self.service_board_flag = attributes[:service_board_flag] if attributes.key?(:service_board_flag)

      self.budget_hours_flag = attributes[:budget_hours_flag] if attributes.key?(:budget_hours_flag)

      self.actual_hours_flag = attributes[:actual_hours_flag] if attributes.key?(:actual_hours_flag)

      self.approval_status_flag = attributes[:approval_status_flag] if attributes.key?(:approval_status_flag)

      self.open_tasks_flag = attributes[:open_tasks_flag] if attributes.key?(:open_tasks_flag)

      self.closed_tasks_flag = attributes[:closed_tasks_flag] if attributes.key?(:closed_tasks_flag)

      self.enable_chat_assist_flag = attributes[:enable_chat_assist_flag] if attributes.key?(:enable_chat_assist_flag)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      if @time_materials_ticket_template.nil?
        invalid_properties.push('invalid value for "time_materials_ticket_template", time_materials_ticket_template cannot be nil.')
      end

      if @fixed_fee_ticket_template.nil?
        invalid_properties.push('invalid value for "fixed_fee_ticket_template", fixed_fee_ticket_template cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      display_closed_tickets_option_validator = EnumAttributeValidator.new('String',
                                                                           %w[DoNotDisplay Closed30Days Closed60Days
                                                                              Closed90Days Closed120Days AllClosed])
      return false unless display_closed_tickets_option_validator.valid?(@display_closed_tickets_option)
      return false if @time_materials_ticket_template.nil?
      return false if @fixed_fee_ticket_template.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] display_closed_tickets_option Object to be assigned
    def display_closed_tickets_option=(display_closed_tickets_option)
      validator = EnumAttributeValidator.new('String',
                                             %w[DoNotDisplay Closed30Days Closed60Days Closed90Days Closed120Days
                                                AllClosed])
      unless validator.valid?(display_closed_tickets_option)
        raise ArgumentError,
              "invalid value for \"display_closed_tickets_option\", must be one of #{validator.allowable_values}."
      end

      @display_closed_tickets_option = display_closed_tickets_option
    end

    # Custom attribute writer method with validation
    # @param [Object] time_materials_ticket_template Value to be assigned
    def time_materials_ticket_template=(time_materials_ticket_template)
      raise ArgumentError, 'time_materials_ticket_template cannot be nil' if time_materials_ticket_template.nil?

      @time_materials_ticket_template = time_materials_ticket_template
    end

    # Custom attribute writer method with validation
    # @param [Object] fixed_fee_ticket_template Value to be assigned
    def fixed_fee_ticket_template=(fixed_fee_ticket_template)
      raise ArgumentError, 'fixed_fee_ticket_template cannot be nil' if fixed_fee_ticket_template.nil?

      @fixed_fee_ticket_template = fixed_fee_ticket_template
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        display_closed_tickets_option == other.display_closed_tickets_option &&
        time_materials_ticket_template == other.time_materials_ticket_template &&
        fixed_fee_ticket_template == other.fixed_fee_ticket_template &&
        id == other.id &&
        service_type_flag == other.service_type_flag &&
        service_sub_type_flag == other.service_sub_type_flag &&
        service_sub_type_item_flag == other.service_sub_type_item_flag &&
        status_flag == other.status_flag &&
        site_name_flag == other.site_name_flag &&
        entered_date_flag == other.entered_date_flag &&
        last_update_flag == other.last_update_flag &&
        required_date_flag == other.required_date_flag &&
        contact_flag == other.contact_flag &&
        assigned_resources_flag == other.assigned_resources_flag &&
        sla_info_flag == other.sla_info_flag &&
        service_board_flag == other.service_board_flag &&
        budget_hours_flag == other.budget_hours_flag &&
        actual_hours_flag == other.actual_hours_flag &&
        approval_status_flag == other.approval_status_flag &&
        open_tasks_flag == other.open_tasks_flag &&
        closed_tasks_flag == other.closed_tasks_flag &&
        enable_chat_assist_flag == other.enable_chat_assist_flag &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [display_closed_tickets_option, time_materials_ticket_template, fixed_fee_ticket_template, id, service_type_flag,
       service_sub_type_flag, service_sub_type_item_flag, status_flag, site_name_flag, entered_date_flag, last_update_flag, required_date_flag, contact_flag, assigned_resources_flag, sla_info_flag, service_board_flag, budget_hours_flag, actual_hours_flag, approval_status_flag, open_tasks_flag, closed_tasks_flag, enable_chat_assist_flag, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
