# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class AgreementTypeWorkType
    attr_accessor :rate_type, :bill_time, :overage_rate_type, :id, :type, :work_type, :effective_date, :ending_date,
                  :rate, :hours_min, :hours_max, :round_bill_hours, :overage_rate, :limit_to, :_info

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        rate_type: :rateType,
        bill_time: :billTime,
        overage_rate_type: :overageRateType,
        id: :id,
        type: :type,
        work_type: :workType,
        effective_date: :effectiveDate,
        ending_date: :endingDate,
        rate: :rate,
        hours_min: :hoursMin,
        hours_max: :hoursMax,
        round_bill_hours: :roundBillHours,
        overage_rate: :overageRate,
        limit_to: :limitTo,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        rate_type: :String,
        bill_time: :String,
        overage_rate_type: :String,
        id: :Integer,
        type: :AgreementTypeReference,
        work_type: :WorkTypeReference,
        effective_date: :Time,
        ending_date: :Time,
        rate: :Float,
        hours_min: :Float,
        hours_max: :Float,
        round_bill_hours: :Float,
        overage_rate: :Float,
        limit_to: :Float,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                rate_type
                bill_time
                overage_rate_type
                rate
                hours_min
                hours_max
                round_bill_hours
                overage_rate
                limit_to
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `ConnectWise::AgreementTypeWorkType` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless acceptable_attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `ConnectWise::AgreementTypeWorkType`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.rate_type = (attributes[:rate_type] if attributes.key?(:rate_type))

      self.bill_time = (attributes[:bill_time] if attributes.key?(:bill_time))

      self.overage_rate_type = (attributes[:overage_rate_type] if attributes.key?(:overage_rate_type))

      self.id = attributes[:id] if attributes.key?(:id)

      self.type = attributes[:type] if attributes.key?(:type)

      self.work_type = attributes[:work_type] if attributes.key?(:work_type)

      self.effective_date = attributes[:effective_date] if attributes.key?(:effective_date)

      self.ending_date = attributes[:ending_date] if attributes.key?(:ending_date)

      self.rate = attributes[:rate] if attributes.key?(:rate)

      self.hours_min = attributes[:hours_min] if attributes.key?(:hours_min)

      self.hours_max = attributes[:hours_max] if attributes.key?(:hours_max)

      self.round_bill_hours = attributes[:round_bill_hours] if attributes.key?(:round_bill_hours)

      self.overage_rate = attributes[:overage_rate] if attributes.key?(:overage_rate)

      self.limit_to = attributes[:limit_to] if attributes.key?(:limit_to)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      rate_type_validator = EnumAttributeValidator.new('String', %w[AdjAmount Custom Multiplier])
      return false unless rate_type_validator.valid?(@rate_type)

      bill_time_validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      return false unless bill_time_validator.valid?(@bill_time)

      overage_rate_type_validator = EnumAttributeValidator.new('String', %w[AdjAmount Custom Multiplier])
      return false unless overage_rate_type_validator.valid?(@overage_rate_type)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rate_type Object to be assigned
    def rate_type=(rate_type)
      validator = EnumAttributeValidator.new('String', %w[AdjAmount Custom Multiplier])
      unless validator.valid?(rate_type)
        raise ArgumentError, "invalid value for \"rate_type\", must be one of #{validator.allowable_values}."
      end

      @rate_type = rate_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bill_time Object to be assigned
    def bill_time=(bill_time)
      validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      unless validator.valid?(bill_time)
        raise ArgumentError, "invalid value for \"bill_time\", must be one of #{validator.allowable_values}."
      end

      @bill_time = bill_time
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] overage_rate_type Object to be assigned
    def overage_rate_type=(overage_rate_type)
      validator = EnumAttributeValidator.new('String', %w[AdjAmount Custom Multiplier])
      unless validator.valid?(overage_rate_type)
        raise ArgumentError, "invalid value for \"overage_rate_type\", must be one of #{validator.allowable_values}."
      end

      @overage_rate_type = overage_rate_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        rate_type == other.rate_type &&
        bill_time == other.bill_time &&
        overage_rate_type == other.overage_rate_type &&
        id == other.id &&
        type == other.type &&
        work_type == other.work_type &&
        effective_date == other.effective_date &&
        ending_date == other.ending_date &&
        rate == other.rate &&
        hours_min == other.hours_min &&
        hours_max == other.hours_max &&
        round_bill_hours == other.round_bill_hours &&
        overage_rate == other.overage_rate &&
        limit_to == other.limit_to &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [rate_type, bill_time, overage_rate_type, id, type, work_type, effective_date, ending_date, rate, hours_min,
       hours_max, round_bill_hours, overage_rate, limit_to, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
