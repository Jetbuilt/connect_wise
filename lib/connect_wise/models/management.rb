# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class Management
    attr_accessor :added_configuration_status, :deleted_configuration_status, :integrator_login,
                  :schedule_executive_summary_report_flag, :id, :run_time, :_info

    # Gets or sets             this is only required when scheduleExecutiveSummaryReportFlag = true.
    attr_accessor :executive_summary_report_schedule_day

    # Gets or sets             this is only required when scheduleExecutiveSummaryReportFlag = true. Input should be in 24 hour format, ie 2pm is 14.
    attr_accessor :executive_summary_report_schedule_hour

    # Gets or sets             this is only required when scheduleExecutiveSummaryReportFlag = true.
    attr_accessor :executive_summary_report_schedule_minute

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        added_configuration_status: :addedConfigurationStatus,
        deleted_configuration_status: :deletedConfigurationStatus,
        integrator_login: :integratorLogin,
        schedule_executive_summary_report_flag: :scheduleExecutiveSummaryReportFlag,
        id: :id,
        run_time: :runTime,
        executive_summary_report_schedule_day: :executiveSummaryReportScheduleDay,
        executive_summary_report_schedule_hour: :executiveSummaryReportScheduleHour,
        executive_summary_report_schedule_minute: :executiveSummaryReportScheduleMinute,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        added_configuration_status: :ConfigurationStatusReference,
        deleted_configuration_status: :ConfigurationStatusReference,
        integrator_login: :IntegratorLoginReference,
        schedule_executive_summary_report_flag: :Boolean,
        id: :Integer,
        run_time: :Time,
        executive_summary_report_schedule_day: :Integer,
        executive_summary_report_schedule_hour: :Integer,
        executive_summary_report_schedule_minute: :Integer,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                schedule_executive_summary_report_flag
                executive_summary_report_schedule_day
                executive_summary_report_schedule_hour
                executive_summary_report_schedule_minute
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `ConnectWise::Management` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless acceptable_attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `ConnectWise::Management`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.added_configuration_status = if attributes.key?(:added_configuration_status)
                                          attributes[:added_configuration_status]
                                        end

      self.deleted_configuration_status = if attributes.key?(:deleted_configuration_status)
                                            attributes[:deleted_configuration_status]
                                          end

      self.integrator_login = (attributes[:integrator_login] if attributes.key?(:integrator_login))

      self.schedule_executive_summary_report_flag = if attributes.key?(:schedule_executive_summary_report_flag)
                                                      attributes[:schedule_executive_summary_report_flag]
                                                    end

      self.id = attributes[:id] if attributes.key?(:id)

      self.run_time = attributes[:run_time] if attributes.key?(:run_time)

      if attributes.key?(:executive_summary_report_schedule_day)
        self.executive_summary_report_schedule_day = attributes[:executive_summary_report_schedule_day]
      end

      if attributes.key?(:executive_summary_report_schedule_hour)
        self.executive_summary_report_schedule_hour = attributes[:executive_summary_report_schedule_hour]
      end

      if attributes.key?(:executive_summary_report_schedule_minute)
        self.executive_summary_report_schedule_minute = attributes[:executive_summary_report_schedule_minute]
      end

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      if @added_configuration_status.nil?
        invalid_properties.push('invalid value for "added_configuration_status", added_configuration_status cannot be nil.')
      end

      if @deleted_configuration_status.nil?
        invalid_properties.push('invalid value for "deleted_configuration_status", deleted_configuration_status cannot be nil.')
      end

      if @integrator_login.nil?
        invalid_properties.push('invalid value for "integrator_login", integrator_login cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @added_configuration_status.nil?
      return false if @deleted_configuration_status.nil?
      return false if @integrator_login.nil?

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] added_configuration_status Value to be assigned
    def added_configuration_status=(added_configuration_status)
      raise ArgumentError, 'added_configuration_status cannot be nil' if added_configuration_status.nil?

      @added_configuration_status = added_configuration_status
    end

    # Custom attribute writer method with validation
    # @param [Object] deleted_configuration_status Value to be assigned
    def deleted_configuration_status=(deleted_configuration_status)
      raise ArgumentError, 'deleted_configuration_status cannot be nil' if deleted_configuration_status.nil?

      @deleted_configuration_status = deleted_configuration_status
    end

    # Custom attribute writer method with validation
    # @param [Object] integrator_login Value to be assigned
    def integrator_login=(integrator_login)
      raise ArgumentError, 'integrator_login cannot be nil' if integrator_login.nil?

      @integrator_login = integrator_login
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        added_configuration_status == other.added_configuration_status &&
        deleted_configuration_status == other.deleted_configuration_status &&
        integrator_login == other.integrator_login &&
        schedule_executive_summary_report_flag == other.schedule_executive_summary_report_flag &&
        id == other.id &&
        run_time == other.run_time &&
        executive_summary_report_schedule_day == other.executive_summary_report_schedule_day &&
        executive_summary_report_schedule_hour == other.executive_summary_report_schedule_hour &&
        executive_summary_report_schedule_minute == other.executive_summary_report_schedule_minute &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [added_configuration_status, deleted_configuration_status, integrator_login,
       schedule_executive_summary_report_flag, id, run_time, executive_summary_report_schedule_day, executive_summary_report_schedule_hour, executive_summary_report_schedule_minute, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
