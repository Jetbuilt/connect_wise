# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class AgreementApplicationParameters
    attr_accessor :application_unit, :application_limit, :application_limit_amount, :available_per, :covers_time_flag,
                  :covers_expenses_flag, :covers_products_flag, :covers_tax_flag, :carryover_unused_flag, :carry_over_days, :allow_overruns_flag, :overrun_limit, :agreement_expires_flag, :charge_adjustments_flag, :prepay_flag, :agr_billing_cycle, :user_defined_field_values

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        application_unit: :applicationUnit,
        application_limit: :applicationLimit,
        application_limit_amount: :applicationLimitAmount,
        available_per: :availablePer,
        covers_time_flag: :coversTimeFlag,
        covers_expenses_flag: :coversExpensesFlag,
        covers_products_flag: :coversProductsFlag,
        covers_tax_flag: :coversTaxFlag,
        carryover_unused_flag: :carryoverUnusedFlag,
        carry_over_days: :carryOverDays,
        allow_overruns_flag: :allowOverrunsFlag,
        overrun_limit: :overrunLimit,
        agreement_expires_flag: :agreementExpiresFlag,
        charge_adjustments_flag: :chargeAdjustmentsFlag,
        prepay_flag: :prepayFlag,
        agr_billing_cycle: :agrBillingCycle,
        user_defined_field_values: :userDefinedFieldValues
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        application_unit: :AgreementApplicationUnit,
        application_limit: :AgreementApplicationLimit,
        application_limit_amount: :Float,
        available_per: :AgreementApplicationAviablePer,
        covers_time_flag: :Boolean,
        covers_expenses_flag: :Boolean,
        covers_products_flag: :Boolean,
        covers_tax_flag: :Boolean,
        carryover_unused_flag: :Boolean,
        carry_over_days: :Integer,
        allow_overruns_flag: :Boolean,
        overrun_limit: :Integer,
        agreement_expires_flag: :Boolean,
        charge_adjustments_flag: :Boolean,
        prepay_flag: :Boolean,
        agr_billing_cycle: :AgreementApplicationBillingCycle,
        user_defined_field_values: :'Array<UserDefinedFieldValueModel>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                carry_over_days
                overrun_limit
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `ConnectWise::AgreementApplicationParameters` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless acceptable_attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `ConnectWise::AgreementApplicationParameters`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.application_unit = attributes[:application_unit] if attributes.key?(:application_unit)

      self.application_limit = attributes[:application_limit] if attributes.key?(:application_limit)

      if attributes.key?(:application_limit_amount)
        self.application_limit_amount = attributes[:application_limit_amount]
      end

      self.available_per = attributes[:available_per] if attributes.key?(:available_per)

      self.covers_time_flag = attributes[:covers_time_flag] if attributes.key?(:covers_time_flag)

      self.covers_expenses_flag = attributes[:covers_expenses_flag] if attributes.key?(:covers_expenses_flag)

      self.covers_products_flag = attributes[:covers_products_flag] if attributes.key?(:covers_products_flag)

      self.covers_tax_flag = attributes[:covers_tax_flag] if attributes.key?(:covers_tax_flag)

      self.carryover_unused_flag = attributes[:carryover_unused_flag] if attributes.key?(:carryover_unused_flag)

      self.carry_over_days = attributes[:carry_over_days] if attributes.key?(:carry_over_days)

      self.allow_overruns_flag = attributes[:allow_overruns_flag] if attributes.key?(:allow_overruns_flag)

      self.overrun_limit = attributes[:overrun_limit] if attributes.key?(:overrun_limit)

      self.agreement_expires_flag = attributes[:agreement_expires_flag] if attributes.key?(:agreement_expires_flag)

      self.charge_adjustments_flag = attributes[:charge_adjustments_flag] if attributes.key?(:charge_adjustments_flag)

      self.prepay_flag = attributes[:prepay_flag] if attributes.key?(:prepay_flag)

      self.agr_billing_cycle = attributes[:agr_billing_cycle] if attributes.key?(:agr_billing_cycle)

      return unless attributes.key?(:user_defined_field_values)

      if (value = attributes[:user_defined_field_values]).is_a?(Array)
        self.user_defined_field_values = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        application_unit == other.application_unit &&
        application_limit == other.application_limit &&
        application_limit_amount == other.application_limit_amount &&
        available_per == other.available_per &&
        covers_time_flag == other.covers_time_flag &&
        covers_expenses_flag == other.covers_expenses_flag &&
        covers_products_flag == other.covers_products_flag &&
        covers_tax_flag == other.covers_tax_flag &&
        carryover_unused_flag == other.carryover_unused_flag &&
        carry_over_days == other.carry_over_days &&
        allow_overruns_flag == other.allow_overruns_flag &&
        overrun_limit == other.overrun_limit &&
        agreement_expires_flag == other.agreement_expires_flag &&
        charge_adjustments_flag == other.charge_adjustments_flag &&
        prepay_flag == other.prepay_flag &&
        agr_billing_cycle == other.agr_billing_cycle &&
        user_defined_field_values == other.user_defined_field_values
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [application_unit, application_limit, application_limit_amount, available_per, covers_time_flag,
       covers_expenses_flag, covers_products_flag, covers_tax_flag, carryover_unused_flag, carry_over_days, allow_overruns_flag, overrun_limit, agreement_expires_flag, charge_adjustments_flag, prepay_flag, agr_billing_cycle, user_defined_field_values].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
