# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class ServiceTemplate
    attr_accessor :id, :name, :board, :type, :item, :subtype, :service_location, :status, :source, :priority, :team, :company, :contact, :site, :assigned_notify_flag, :location, :department, :summary, :problem, :hours_budget, :internal_analysis, :time_billable_flag, :expense_billable_flag, :purchase_order_number, :reference, :bill_complete_flag, :bill_service_separately_flag, :billing_amount, :bill_unapproved_time_and_expenses_flag, :override_flag, :time_invoice_flag, :expense_invoice_flag, :product_invoice_flag, :agreement, :billing_method, :severity, :impact, :assigned_by, :schedule_days_before, :service_days_before, :attach_schedule_to_new_service_flag, :template_flag, :email_contact_flag, :email_resource_flag, :email_cc_flag, :email_cc, :restrict_downpayment_flag, :_info

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        name: :name,
        board: :board,
        type: :type,
        item: :item,
        subtype: :subtype,
        service_location: :serviceLocation,
        status: :status,
        source: :source,
        priority: :priority,
        team: :team,
        company: :company,
        contact: :contact,
        site: :site,
        assigned_notify_flag: :assignedNotifyFlag,
        location: :location,
        department: :department,
        summary: :summary,
        problem: :problem,
        hours_budget: :hoursBudget,
        internal_analysis: :internalAnalysis,
        time_billable_flag: :timeBillableFlag,
        expense_billable_flag: :expenseBillableFlag,
        purchase_order_number: :purchaseOrderNumber,
        reference: :reference,
        bill_complete_flag: :billComplete_Flag,
        bill_service_separately_flag: :billServiceSeparatelyFlag,
        billing_amount: :billingAmount,
        bill_unapproved_time_and_expenses_flag: :billUnapprovedTimeAndExpensesFlag,
        override_flag: :overrideFlag,
        time_invoice_flag: :timeInvoiceFlag,
        expense_invoice_flag: :expenseInvoiceFlag,
        product_invoice_flag: :productInvoiceFlag,
        agreement: :agreement,
        billing_method: :billingMethod,
        severity: :severity,
        impact: :impact,
        assigned_by: :assignedBy,
        schedule_days_before: :scheduleDaysBefore,
        service_days_before: :serviceDaysBefore,
        attach_schedule_to_new_service_flag: :attachScheduleToNewServiceFlag,
        template_flag: :templateFlag,
        email_contact_flag: :emailContactFlag,
        email_resource_flag: :emailResourceFlag,
        email_cc_flag: :emailCCFlag,
        email_cc: :emailCC,
        restrict_downpayment_flag: :restrictDownpaymentFlag,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        name: :String,
        board: :BoardReference,
        type: :ServiceTypeReference,
        item: :ServiceItemReference,
        subtype: :ServiceSubTypeReference,
        service_location: :ServiceLocationReference,
        status: :ServiceStatusReference,
        source: :ServiceSourceReference,
        priority: :PriorityReference,
        team: :ServiceTeamReference,
        company: :CompanyReference,
        contact: :ContactReference,
        site: :SiteReference,
        assigned_notify_flag: :Boolean,
        location: :SystemLocationReference,
        department: :SystemDepartmentReference,
        summary: :String,
        problem: :String,
        hours_budget: :Float,
        internal_analysis: :String,
        time_billable_flag: :Boolean,
        expense_billable_flag: :Boolean,
        purchase_order_number: :String,
        reference: :String,
        bill_complete_flag: :Boolean,
        bill_service_separately_flag: :Boolean,
        billing_amount: :Float,
        bill_unapproved_time_and_expenses_flag: :Boolean,
        override_flag: :Boolean,
        time_invoice_flag: :Boolean,
        expense_invoice_flag: :Boolean,
        product_invoice_flag: :Boolean,
        agreement: :AgreementReference,
        billing_method: :String,
        severity: :String,
        impact: :String,
        assigned_by: :MemberReference,
        schedule_days_before: :Integer,
        service_days_before: :Integer,
        attach_schedule_to_new_service_flag: :Boolean,
        template_flag: :Boolean,
        email_contact_flag: :Boolean,
        email_resource_flag: :Boolean,
        email_cc_flag: :Boolean,
        email_cc: :String,
        restrict_downpayment_flag: :Boolean,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                assigned_notify_flag
                hours_budget
                time_billable_flag
                expense_billable_flag
                bill_complete_flag
                bill_service_separately_flag
                billing_amount
                bill_unapproved_time_and_expenses_flag
                override_flag
                time_invoice_flag
                expense_invoice_flag
                product_invoice_flag
                schedule_days_before
                service_days_before
                attach_schedule_to_new_service_flag
                template_flag
                email_contact_flag
                email_resource_flag
                email_cc_flag
                restrict_downpayment_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::ServiceTemplate` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::ServiceTemplate`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.name = attributes[:name] if attributes.key?(:name)

      self.board = attributes[:board] if attributes.key?(:board)

      self.type = attributes[:type] if attributes.key?(:type)

      self.item = attributes[:item] if attributes.key?(:item)

      self.subtype = attributes[:subtype] if attributes.key?(:subtype)

      self.service_location = attributes[:service_location] if attributes.key?(:service_location)

      self.status = attributes[:status] if attributes.key?(:status)

      self.source = attributes[:source] if attributes.key?(:source)

      self.priority = attributes[:priority] if attributes.key?(:priority)

      self.team = attributes[:team] if attributes.key?(:team)

      self.company = attributes[:company] if attributes.key?(:company)

      self.contact = attributes[:contact] if attributes.key?(:contact)

      self.site = attributes[:site] if attributes.key?(:site)

      self.assigned_notify_flag = attributes[:assigned_notify_flag] if attributes.key?(:assigned_notify_flag)

      self.location = attributes[:location] if attributes.key?(:location)

      self.department = attributes[:department] if attributes.key?(:department)

      self.summary = attributes[:summary] if attributes.key?(:summary)

      self.problem = attributes[:problem] if attributes.key?(:problem)

      self.hours_budget = attributes[:hours_budget] if attributes.key?(:hours_budget)

      self.internal_analysis = attributes[:internal_analysis] if attributes.key?(:internal_analysis)

      self.time_billable_flag = attributes[:time_billable_flag] if attributes.key?(:time_billable_flag)

      self.expense_billable_flag = attributes[:expense_billable_flag] if attributes.key?(:expense_billable_flag)

      self.purchase_order_number = attributes[:purchase_order_number] if attributes.key?(:purchase_order_number)

      self.reference = attributes[:reference] if attributes.key?(:reference)

      self.bill_complete_flag = attributes[:bill_complete_flag] if attributes.key?(:bill_complete_flag)

      self.bill_service_separately_flag = attributes[:bill_service_separately_flag] if attributes.key?(:bill_service_separately_flag)

      self.billing_amount = attributes[:billing_amount] if attributes.key?(:billing_amount)

      self.bill_unapproved_time_and_expenses_flag = attributes[:bill_unapproved_time_and_expenses_flag] if attributes.key?(:bill_unapproved_time_and_expenses_flag)

      self.override_flag = attributes[:override_flag] if attributes.key?(:override_flag)

      self.time_invoice_flag = attributes[:time_invoice_flag] if attributes.key?(:time_invoice_flag)

      self.expense_invoice_flag = attributes[:expense_invoice_flag] if attributes.key?(:expense_invoice_flag)

      self.product_invoice_flag = attributes[:product_invoice_flag] if attributes.key?(:product_invoice_flag)

      self.agreement = attributes[:agreement] if attributes.key?(:agreement)

      self.billing_method = attributes[:billing_method] if attributes.key?(:billing_method)

      self.severity = attributes[:severity] if attributes.key?(:severity)

      self.impact = attributes[:impact] if attributes.key?(:impact)

      self.assigned_by = attributes[:assigned_by] if attributes.key?(:assigned_by)

      self.schedule_days_before = attributes[:schedule_days_before] if attributes.key?(:schedule_days_before)

      self.service_days_before = attributes[:service_days_before] if attributes.key?(:service_days_before)

      self.attach_schedule_to_new_service_flag = attributes[:attach_schedule_to_new_service_flag] if attributes.key?(:attach_schedule_to_new_service_flag)

      self.template_flag = attributes[:template_flag] if attributes.key?(:template_flag)

      self.email_contact_flag = attributes[:email_contact_flag] if attributes.key?(:email_contact_flag)

      self.email_resource_flag = attributes[:email_resource_flag] if attributes.key?(:email_resource_flag)

      self.email_cc_flag = attributes[:email_cc_flag] if attributes.key?(:email_cc_flag)

      self.email_cc = attributes[:email_cc] if attributes.key?(:email_cc)

      self.restrict_downpayment_flag = attributes[:restrict_downpayment_flag] if attributes.key?(:restrict_downpayment_flag)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      billing_method_validator = EnumAttributeValidator.new('String', %w[ActualRates FixedFee NotToExceed OverrideRate])
      return false unless billing_method_validator.valid?(@billing_method)

      severity_validator = EnumAttributeValidator.new('String', %w[Low Medium High])
      return false unless severity_validator.valid?(@severity)

      impact_validator = EnumAttributeValidator.new('String', %w[Low Medium High])
      return false unless impact_validator.valid?(@impact)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_method Object to be assigned
    def billing_method=(billing_method)
      validator = EnumAttributeValidator.new('String', %w[ActualRates FixedFee NotToExceed OverrideRate])
      raise ArgumentError, "invalid value for \"billing_method\", must be one of #{validator.allowable_values}." unless validator.valid?(billing_method)

      @billing_method = billing_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] severity Object to be assigned
    def severity=(severity)
      validator = EnumAttributeValidator.new('String', %w[Low Medium High])
      raise ArgumentError, "invalid value for \"severity\", must be one of #{validator.allowable_values}." unless validator.valid?(severity)

      @severity = severity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] impact Object to be assigned
    def impact=(impact)
      validator = EnumAttributeValidator.new('String', %w[Low Medium High])
      raise ArgumentError, "invalid value for \"impact\", must be one of #{validator.allowable_values}." unless validator.valid?(impact)

      @impact = impact
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        name == other.name &&
        board == other.board &&
        type == other.type &&
        item == other.item &&
        subtype == other.subtype &&
        service_location == other.service_location &&
        status == other.status &&
        source == other.source &&
        priority == other.priority &&
        team == other.team &&
        company == other.company &&
        contact == other.contact &&
        site == other.site &&
        assigned_notify_flag == other.assigned_notify_flag &&
        location == other.location &&
        department == other.department &&
        summary == other.summary &&
        problem == other.problem &&
        hours_budget == other.hours_budget &&
        internal_analysis == other.internal_analysis &&
        time_billable_flag == other.time_billable_flag &&
        expense_billable_flag == other.expense_billable_flag &&
        purchase_order_number == other.purchase_order_number &&
        reference == other.reference &&
        bill_complete_flag == other.bill_complete_flag &&
        bill_service_separately_flag == other.bill_service_separately_flag &&
        billing_amount == other.billing_amount &&
        bill_unapproved_time_and_expenses_flag == other.bill_unapproved_time_and_expenses_flag &&
        override_flag == other.override_flag &&
        time_invoice_flag == other.time_invoice_flag &&
        expense_invoice_flag == other.expense_invoice_flag &&
        product_invoice_flag == other.product_invoice_flag &&
        agreement == other.agreement &&
        billing_method == other.billing_method &&
        severity == other.severity &&
        impact == other.impact &&
        assigned_by == other.assigned_by &&
        schedule_days_before == other.schedule_days_before &&
        service_days_before == other.service_days_before &&
        attach_schedule_to_new_service_flag == other.attach_schedule_to_new_service_flag &&
        template_flag == other.template_flag &&
        email_contact_flag == other.email_contact_flag &&
        email_resource_flag == other.email_resource_flag &&
        email_cc_flag == other.email_cc_flag &&
        email_cc == other.email_cc &&
        restrict_downpayment_flag == other.restrict_downpayment_flag &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, board, type, item, subtype, service_location, status, source, priority, team, company, contact, site, assigned_notify_flag, location, department, summary, problem, hours_budget, internal_analysis, time_billable_flag, expense_billable_flag, purchase_order_number, reference, bill_complete_flag, bill_service_separately_flag, billing_amount, bill_unapproved_time_and_expenses_flag, override_flag, time_invoice_flag, expense_invoice_flag, product_invoice_flag, agreement, billing_method, severity, impact, assigned_by, schedule_days_before, service_days_before, attach_schedule_to_new_service_flag, template_flag, email_contact_flag, email_resource_flag, email_cc_flag, email_cc, restrict_downpayment_flag, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
