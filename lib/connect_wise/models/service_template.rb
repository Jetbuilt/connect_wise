=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class ServiceTemplate
    attr_accessor :id

    attr_accessor :name

    attr_accessor :board

    attr_accessor :type

    attr_accessor :item

    attr_accessor :subtype

    attr_accessor :service_location

    attr_accessor :status

    attr_accessor :source

    attr_accessor :priority

    attr_accessor :team

    attr_accessor :company

    attr_accessor :contact

    attr_accessor :site

    attr_accessor :assigned_notify_flag

    attr_accessor :location

    attr_accessor :department

    attr_accessor :summary

    attr_accessor :problem

    attr_accessor :hours_budget

    attr_accessor :internal_analysis

    attr_accessor :time_billable_flag

    attr_accessor :expense_billable_flag

    attr_accessor :purchase_order_number

    attr_accessor :reference

    attr_accessor :bill_complete_flag

    attr_accessor :bill_service_separately_flag

    attr_accessor :billing_amount

    attr_accessor :bill_unapproved_time_and_expenses_flag

    attr_accessor :override_flag

    attr_accessor :time_invoice_flag

    attr_accessor :expense_invoice_flag

    attr_accessor :product_invoice_flag

    attr_accessor :agreement

    attr_accessor :billing_method

    attr_accessor :severity

    attr_accessor :impact

    attr_accessor :assigned_by

    attr_accessor :schedule_days_before

    attr_accessor :service_days_before

    attr_accessor :attach_schedule_to_new_service_flag

    attr_accessor :template_flag

    attr_accessor :email_contact_flag

    attr_accessor :email_resource_flag

    attr_accessor :email_cc_flag

    attr_accessor :email_cc

    attr_accessor :restrict_downpayment_flag

    attr_accessor :_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'board' => :'board',
        :'type' => :'type',
        :'item' => :'item',
        :'subtype' => :'subtype',
        :'service_location' => :'serviceLocation',
        :'status' => :'status',
        :'source' => :'source',
        :'priority' => :'priority',
        :'team' => :'team',
        :'company' => :'company',
        :'contact' => :'contact',
        :'site' => :'site',
        :'assigned_notify_flag' => :'assignedNotifyFlag',
        :'location' => :'location',
        :'department' => :'department',
        :'summary' => :'summary',
        :'problem' => :'problem',
        :'hours_budget' => :'hoursBudget',
        :'internal_analysis' => :'internalAnalysis',
        :'time_billable_flag' => :'timeBillableFlag',
        :'expense_billable_flag' => :'expenseBillableFlag',
        :'purchase_order_number' => :'purchaseOrderNumber',
        :'reference' => :'reference',
        :'bill_complete_flag' => :'billComplete_Flag',
        :'bill_service_separately_flag' => :'billServiceSeparatelyFlag',
        :'billing_amount' => :'billingAmount',
        :'bill_unapproved_time_and_expenses_flag' => :'billUnapprovedTimeAndExpensesFlag',
        :'override_flag' => :'overrideFlag',
        :'time_invoice_flag' => :'timeInvoiceFlag',
        :'expense_invoice_flag' => :'expenseInvoiceFlag',
        :'product_invoice_flag' => :'productInvoiceFlag',
        :'agreement' => :'agreement',
        :'billing_method' => :'billingMethod',
        :'severity' => :'severity',
        :'impact' => :'impact',
        :'assigned_by' => :'assignedBy',
        :'schedule_days_before' => :'scheduleDaysBefore',
        :'service_days_before' => :'serviceDaysBefore',
        :'attach_schedule_to_new_service_flag' => :'attachScheduleToNewServiceFlag',
        :'template_flag' => :'templateFlag',
        :'email_contact_flag' => :'emailContactFlag',
        :'email_resource_flag' => :'emailResourceFlag',
        :'email_cc_flag' => :'emailCCFlag',
        :'email_cc' => :'emailCC',
        :'restrict_downpayment_flag' => :'restrictDownpaymentFlag',
        :'_info' => :'_info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'name' => :'String',
        :'board' => :'BoardReference',
        :'type' => :'ServiceTypeReference',
        :'item' => :'ServiceItemReference',
        :'subtype' => :'ServiceSubTypeReference',
        :'service_location' => :'ServiceLocationReference',
        :'status' => :'ServiceStatusReference',
        :'source' => :'ServiceSourceReference',
        :'priority' => :'PriorityReference',
        :'team' => :'ServiceTeamReference',
        :'company' => :'CompanyReference',
        :'contact' => :'ContactReference',
        :'site' => :'SiteReference',
        :'assigned_notify_flag' => :'Boolean',
        :'location' => :'SystemLocationReference',
        :'department' => :'SystemDepartmentReference',
        :'summary' => :'String',
        :'problem' => :'String',
        :'hours_budget' => :'Float',
        :'internal_analysis' => :'String',
        :'time_billable_flag' => :'Boolean',
        :'expense_billable_flag' => :'Boolean',
        :'purchase_order_number' => :'String',
        :'reference' => :'String',
        :'bill_complete_flag' => :'Boolean',
        :'bill_service_separately_flag' => :'Boolean',
        :'billing_amount' => :'Float',
        :'bill_unapproved_time_and_expenses_flag' => :'Boolean',
        :'override_flag' => :'Boolean',
        :'time_invoice_flag' => :'Boolean',
        :'expense_invoice_flag' => :'Boolean',
        :'product_invoice_flag' => :'Boolean',
        :'agreement' => :'AgreementReference',
        :'billing_method' => :'String',
        :'severity' => :'String',
        :'impact' => :'String',
        :'assigned_by' => :'MemberReference',
        :'schedule_days_before' => :'Integer',
        :'service_days_before' => :'Integer',
        :'attach_schedule_to_new_service_flag' => :'Boolean',
        :'template_flag' => :'Boolean',
        :'email_contact_flag' => :'Boolean',
        :'email_resource_flag' => :'Boolean',
        :'email_cc_flag' => :'Boolean',
        :'email_cc' => :'String',
        :'restrict_downpayment_flag' => :'Boolean',
        :'_info' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'assigned_notify_flag',
        :'hours_budget',
        :'time_billable_flag',
        :'expense_billable_flag',
        :'bill_complete_flag',
        :'bill_service_separately_flag',
        :'billing_amount',
        :'bill_unapproved_time_and_expenses_flag',
        :'override_flag',
        :'time_invoice_flag',
        :'expense_invoice_flag',
        :'product_invoice_flag',
        :'schedule_days_before',
        :'service_days_before',
        :'attach_schedule_to_new_service_flag',
        :'template_flag',
        :'email_contact_flag',
        :'email_resource_flag',
        :'email_cc_flag',
        :'restrict_downpayment_flag',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::ServiceTemplate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::ServiceTemplate`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'board')
        self.board = attributes[:'board']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'item')
        self.item = attributes[:'item']
      end

      if attributes.key?(:'subtype')
        self.subtype = attributes[:'subtype']
      end

      if attributes.key?(:'service_location')
        self.service_location = attributes[:'service_location']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'team')
        self.team = attributes[:'team']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'contact')
        self.contact = attributes[:'contact']
      end

      if attributes.key?(:'site')
        self.site = attributes[:'site']
      end

      if attributes.key?(:'assigned_notify_flag')
        self.assigned_notify_flag = attributes[:'assigned_notify_flag']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'department')
        self.department = attributes[:'department']
      end

      if attributes.key?(:'summary')
        self.summary = attributes[:'summary']
      end

      if attributes.key?(:'problem')
        self.problem = attributes[:'problem']
      end

      if attributes.key?(:'hours_budget')
        self.hours_budget = attributes[:'hours_budget']
      end

      if attributes.key?(:'internal_analysis')
        self.internal_analysis = attributes[:'internal_analysis']
      end

      if attributes.key?(:'time_billable_flag')
        self.time_billable_flag = attributes[:'time_billable_flag']
      end

      if attributes.key?(:'expense_billable_flag')
        self.expense_billable_flag = attributes[:'expense_billable_flag']
      end

      if attributes.key?(:'purchase_order_number')
        self.purchase_order_number = attributes[:'purchase_order_number']
      end

      if attributes.key?(:'reference')
        self.reference = attributes[:'reference']
      end

      if attributes.key?(:'bill_complete_flag')
        self.bill_complete_flag = attributes[:'bill_complete_flag']
      end

      if attributes.key?(:'bill_service_separately_flag')
        self.bill_service_separately_flag = attributes[:'bill_service_separately_flag']
      end

      if attributes.key?(:'billing_amount')
        self.billing_amount = attributes[:'billing_amount']
      end

      if attributes.key?(:'bill_unapproved_time_and_expenses_flag')
        self.bill_unapproved_time_and_expenses_flag = attributes[:'bill_unapproved_time_and_expenses_flag']
      end

      if attributes.key?(:'override_flag')
        self.override_flag = attributes[:'override_flag']
      end

      if attributes.key?(:'time_invoice_flag')
        self.time_invoice_flag = attributes[:'time_invoice_flag']
      end

      if attributes.key?(:'expense_invoice_flag')
        self.expense_invoice_flag = attributes[:'expense_invoice_flag']
      end

      if attributes.key?(:'product_invoice_flag')
        self.product_invoice_flag = attributes[:'product_invoice_flag']
      end

      if attributes.key?(:'agreement')
        self.agreement = attributes[:'agreement']
      end

      if attributes.key?(:'billing_method')
        self.billing_method = attributes[:'billing_method']
      end

      if attributes.key?(:'severity')
        self.severity = attributes[:'severity']
      end

      if attributes.key?(:'impact')
        self.impact = attributes[:'impact']
      end

      if attributes.key?(:'assigned_by')
        self.assigned_by = attributes[:'assigned_by']
      end

      if attributes.key?(:'schedule_days_before')
        self.schedule_days_before = attributes[:'schedule_days_before']
      end

      if attributes.key?(:'service_days_before')
        self.service_days_before = attributes[:'service_days_before']
      end

      if attributes.key?(:'attach_schedule_to_new_service_flag')
        self.attach_schedule_to_new_service_flag = attributes[:'attach_schedule_to_new_service_flag']
      end

      if attributes.key?(:'template_flag')
        self.template_flag = attributes[:'template_flag']
      end

      if attributes.key?(:'email_contact_flag')
        self.email_contact_flag = attributes[:'email_contact_flag']
      end

      if attributes.key?(:'email_resource_flag')
        self.email_resource_flag = attributes[:'email_resource_flag']
      end

      if attributes.key?(:'email_cc_flag')
        self.email_cc_flag = attributes[:'email_cc_flag']
      end

      if attributes.key?(:'email_cc')
        self.email_cc = attributes[:'email_cc']
      end

      if attributes.key?(:'restrict_downpayment_flag')
        self.restrict_downpayment_flag = attributes[:'restrict_downpayment_flag']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      billing_method_validator = EnumAttributeValidator.new('String', ["ActualRates", "FixedFee", "NotToExceed", "OverrideRate"])
      return false unless billing_method_validator.valid?(@billing_method)
      severity_validator = EnumAttributeValidator.new('String', ["Low", "Medium", "High"])
      return false unless severity_validator.valid?(@severity)
      impact_validator = EnumAttributeValidator.new('String', ["Low", "Medium", "High"])
      return false unless impact_validator.valid?(@impact)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_method Object to be assigned
    def billing_method=(billing_method)
      validator = EnumAttributeValidator.new('String', ["ActualRates", "FixedFee", "NotToExceed", "OverrideRate"])
      unless validator.valid?(billing_method)
        fail ArgumentError, "invalid value for \"billing_method\", must be one of #{validator.allowable_values}."
      end
      @billing_method = billing_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] severity Object to be assigned
    def severity=(severity)
      validator = EnumAttributeValidator.new('String', ["Low", "Medium", "High"])
      unless validator.valid?(severity)
        fail ArgumentError, "invalid value for \"severity\", must be one of #{validator.allowable_values}."
      end
      @severity = severity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] impact Object to be assigned
    def impact=(impact)
      validator = EnumAttributeValidator.new('String', ["Low", "Medium", "High"])
      unless validator.valid?(impact)
        fail ArgumentError, "invalid value for \"impact\", must be one of #{validator.allowable_values}."
      end
      @impact = impact
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          board == o.board &&
          type == o.type &&
          item == o.item &&
          subtype == o.subtype &&
          service_location == o.service_location &&
          status == o.status &&
          source == o.source &&
          priority == o.priority &&
          team == o.team &&
          company == o.company &&
          contact == o.contact &&
          site == o.site &&
          assigned_notify_flag == o.assigned_notify_flag &&
          location == o.location &&
          department == o.department &&
          summary == o.summary &&
          problem == o.problem &&
          hours_budget == o.hours_budget &&
          internal_analysis == o.internal_analysis &&
          time_billable_flag == o.time_billable_flag &&
          expense_billable_flag == o.expense_billable_flag &&
          purchase_order_number == o.purchase_order_number &&
          reference == o.reference &&
          bill_complete_flag == o.bill_complete_flag &&
          bill_service_separately_flag == o.bill_service_separately_flag &&
          billing_amount == o.billing_amount &&
          bill_unapproved_time_and_expenses_flag == o.bill_unapproved_time_and_expenses_flag &&
          override_flag == o.override_flag &&
          time_invoice_flag == o.time_invoice_flag &&
          expense_invoice_flag == o.expense_invoice_flag &&
          product_invoice_flag == o.product_invoice_flag &&
          agreement == o.agreement &&
          billing_method == o.billing_method &&
          severity == o.severity &&
          impact == o.impact &&
          assigned_by == o.assigned_by &&
          schedule_days_before == o.schedule_days_before &&
          service_days_before == o.service_days_before &&
          attach_schedule_to_new_service_flag == o.attach_schedule_to_new_service_flag &&
          template_flag == o.template_flag &&
          email_contact_flag == o.email_contact_flag &&
          email_resource_flag == o.email_resource_flag &&
          email_cc_flag == o.email_cc_flag &&
          email_cc == o.email_cc &&
          restrict_downpayment_flag == o.restrict_downpayment_flag &&
          _info == o._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, board, type, item, subtype, service_location, status, source, priority, team, company, contact, site, assigned_notify_flag, location, department, summary, problem, hours_budget, internal_analysis, time_billable_flag, expense_billable_flag, purchase_order_number, reference, bill_complete_flag, bill_service_separately_flag, billing_amount, bill_unapproved_time_and_expenses_flag, override_flag, time_invoice_flag, expense_invoice_flag, product_invoice_flag, agreement, billing_method, severity, impact, assigned_by, schedule_days_before, service_days_before, attach_schedule_to_new_service_flag, template_flag, email_contact_flag, email_resource_flag, email_cc_flag, email_cc, restrict_downpayment_flag, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
