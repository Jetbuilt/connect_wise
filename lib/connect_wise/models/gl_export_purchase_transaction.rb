# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class GLExportPurchaseTransaction
    attr_accessor :id, :document_date, :document_number, :description, :memo, :ap_account_number, :purchase_date,
                  :company, :company_type, :contact, :site, :purchase_class, :freight_amount, :freight_packing_slip, :packing_slip, :dropship_flag, :currency, :total, :billing_terms, :billing_terms_xref, :due_days, :vendor_number, :vendor_account_number, :vendor_invoice_date, :vendor_invoice_number, :tax_agency_xref, :state_tax_xref, :county_tax_xref, :city_tax_xref, :ship_to_company, :ship_to_company_account_number, :ship_to_company_type, :ship_to_contact, :ship_to_site, :ship_to_tax_group, :tax_code, :tax_group_rate, :use_avalara_tax_flag, :purchase_header_tax_group, :purchase_header_taxable_flag, :purchase_header_freight_taxable_flag, :tax_levels, :purchase_detail, :purchase_detail_tax

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        document_date: :documentDate,
        document_number: :documentNumber,
        description: :description,
        memo: :memo,
        ap_account_number: :apAccountNumber,
        purchase_date: :purchaseDate,
        company: :company,
        company_type: :companyType,
        contact: :contact,
        site: :site,
        purchase_class: :purchaseClass,
        freight_amount: :freightAmount,
        freight_packing_slip: :freightPackingSlip,
        packing_slip: :packingSlip,
        dropship_flag: :dropshipFlag,
        currency: :currency,
        total: :total,
        billing_terms: :billingTerms,
        billing_terms_xref: :billingTermsXref,
        due_days: :dueDays,
        vendor_number: :vendorNumber,
        vendor_account_number: :vendorAccountNumber,
        vendor_invoice_date: :vendorInvoiceDate,
        vendor_invoice_number: :vendorInvoiceNumber,
        tax_agency_xref: :taxAgencyXref,
        state_tax_xref: :stateTaxXref,
        county_tax_xref: :countyTaxXref,
        city_tax_xref: :cityTaxXref,
        ship_to_company: :shipToCompany,
        ship_to_company_account_number: :shipToCompanyAccountNumber,
        ship_to_company_type: :shipToCompanyType,
        ship_to_contact: :shipToContact,
        ship_to_site: :shipToSite,
        ship_to_tax_group: :shipToTaxGroup,
        tax_code: :taxCode,
        tax_group_rate: :taxGroupRate,
        use_avalara_tax_flag: :useAvalaraTaxFlag,
        purchase_header_tax_group: :purchaseHeaderTaxGroup,
        purchase_header_taxable_flag: :purchaseHeaderTaxableFlag,
        purchase_header_freight_taxable_flag: :purchaseHeaderFreightTaxableFlag,
        tax_levels: :taxLevels,
        purchase_detail: :purchaseDetail,
        purchase_detail_tax: :purchaseDetailTax
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :String,
        document_date: :String,
        document_number: :String,
        description: :String,
        memo: :String,
        ap_account_number: :String,
        purchase_date: :String,
        company: :CompanyReference,
        company_type: :CompanyTypeReference,
        contact: :ContactReference,
        site: :SiteReference,
        purchase_class: :String,
        freight_amount: :Float,
        freight_packing_slip: :String,
        packing_slip: :String,
        dropship_flag: :Boolean,
        currency: :CurrencyReference,
        total: :Float,
        billing_terms: :BillingTermsReference,
        billing_terms_xref: :String,
        due_days: :Integer,
        vendor_number: :String,
        vendor_account_number: :String,
        vendor_invoice_date: :String,
        vendor_invoice_number: :String,
        tax_agency_xref: :String,
        state_tax_xref: :String,
        county_tax_xref: :String,
        city_tax_xref: :String,
        ship_to_company: :CompanyReference,
        ship_to_company_account_number: :String,
        ship_to_company_type: :CompanyTypeReference,
        ship_to_contact: :ContactReference,
        ship_to_site: :SiteReference,
        ship_to_tax_group: :String,
        tax_code: :TaxCodeReference,
        tax_group_rate: :Float,
        use_avalara_tax_flag: :Boolean,
        purchase_header_tax_group: :String,
        purchase_header_taxable_flag: :Boolean,
        purchase_header_freight_taxable_flag: :Boolean,
        tax_levels: :'Array<GLExportPurchaseTransactionTaxLevel>',
        purchase_detail: :'Array<GLExportPurchaseTransactionDetail>',
        purchase_detail_tax: :'Array<GLExportPurchaseTransactionDetailTax>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                freight_amount
                dropship_flag
                total
                due_days
                tax_group_rate
                use_avalara_tax_flag
                purchase_header_taxable_flag
                purchase_header_freight_taxable_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `ConnectWise::GLExportPurchaseTransaction` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless acceptable_attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `ConnectWise::GLExportPurchaseTransaction`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.document_date = attributes[:document_date] if attributes.key?(:document_date)

      self.document_number = attributes[:document_number] if attributes.key?(:document_number)

      self.description = attributes[:description] if attributes.key?(:description)

      self.memo = attributes[:memo] if attributes.key?(:memo)

      self.ap_account_number = attributes[:ap_account_number] if attributes.key?(:ap_account_number)

      self.purchase_date = attributes[:purchase_date] if attributes.key?(:purchase_date)

      self.company = attributes[:company] if attributes.key?(:company)

      self.company_type = attributes[:company_type] if attributes.key?(:company_type)

      self.contact = attributes[:contact] if attributes.key?(:contact)

      self.site = attributes[:site] if attributes.key?(:site)

      self.purchase_class = attributes[:purchase_class] if attributes.key?(:purchase_class)

      self.freight_amount = attributes[:freight_amount] if attributes.key?(:freight_amount)

      self.freight_packing_slip = attributes[:freight_packing_slip] if attributes.key?(:freight_packing_slip)

      self.packing_slip = attributes[:packing_slip] if attributes.key?(:packing_slip)

      self.dropship_flag = attributes[:dropship_flag] if attributes.key?(:dropship_flag)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      self.total = attributes[:total] if attributes.key?(:total)

      self.billing_terms = attributes[:billing_terms] if attributes.key?(:billing_terms)

      self.billing_terms_xref = attributes[:billing_terms_xref] if attributes.key?(:billing_terms_xref)

      self.due_days = attributes[:due_days] if attributes.key?(:due_days)

      self.vendor_number = attributes[:vendor_number] if attributes.key?(:vendor_number)

      self.vendor_account_number = attributes[:vendor_account_number] if attributes.key?(:vendor_account_number)

      self.vendor_invoice_date = attributes[:vendor_invoice_date] if attributes.key?(:vendor_invoice_date)

      self.vendor_invoice_number = attributes[:vendor_invoice_number] if attributes.key?(:vendor_invoice_number)

      self.tax_agency_xref = attributes[:tax_agency_xref] if attributes.key?(:tax_agency_xref)

      self.state_tax_xref = attributes[:state_tax_xref] if attributes.key?(:state_tax_xref)

      self.county_tax_xref = attributes[:county_tax_xref] if attributes.key?(:county_tax_xref)

      self.city_tax_xref = attributes[:city_tax_xref] if attributes.key?(:city_tax_xref)

      self.ship_to_company = attributes[:ship_to_company] if attributes.key?(:ship_to_company)

      if attributes.key?(:ship_to_company_account_number)
        self.ship_to_company_account_number = attributes[:ship_to_company_account_number]
      end

      self.ship_to_company_type = attributes[:ship_to_company_type] if attributes.key?(:ship_to_company_type)

      self.ship_to_contact = attributes[:ship_to_contact] if attributes.key?(:ship_to_contact)

      self.ship_to_site = attributes[:ship_to_site] if attributes.key?(:ship_to_site)

      self.ship_to_tax_group = attributes[:ship_to_tax_group] if attributes.key?(:ship_to_tax_group)

      self.tax_code = attributes[:tax_code] if attributes.key?(:tax_code)

      self.tax_group_rate = attributes[:tax_group_rate] if attributes.key?(:tax_group_rate)

      self.use_avalara_tax_flag = attributes[:use_avalara_tax_flag] if attributes.key?(:use_avalara_tax_flag)

      if attributes.key?(:purchase_header_tax_group)
        self.purchase_header_tax_group = attributes[:purchase_header_tax_group]
      end

      if attributes.key?(:purchase_header_taxable_flag)
        self.purchase_header_taxable_flag = attributes[:purchase_header_taxable_flag]
      end

      if attributes.key?(:purchase_header_freight_taxable_flag)
        self.purchase_header_freight_taxable_flag = attributes[:purchase_header_freight_taxable_flag]
      end

      if attributes.key?(:tax_levels) && (value = attributes[:tax_levels]).is_a?(Array)
        self.tax_levels = value
      end

      if attributes.key?(:purchase_detail) && (value = attributes[:purchase_detail]).is_a?(Array)
        self.purchase_detail = value
      end

      return unless attributes.key?(:purchase_detail_tax)

      if (value = attributes[:purchase_detail_tax]).is_a?(Array)
        self.purchase_detail_tax = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        document_date == other.document_date &&
        document_number == other.document_number &&
        description == other.description &&
        memo == other.memo &&
        ap_account_number == other.ap_account_number &&
        purchase_date == other.purchase_date &&
        company == other.company &&
        company_type == other.company_type &&
        contact == other.contact &&
        site == other.site &&
        purchase_class == other.purchase_class &&
        freight_amount == other.freight_amount &&
        freight_packing_slip == other.freight_packing_slip &&
        packing_slip == other.packing_slip &&
        dropship_flag == other.dropship_flag &&
        currency == other.currency &&
        total == other.total &&
        billing_terms == other.billing_terms &&
        billing_terms_xref == other.billing_terms_xref &&
        due_days == other.due_days &&
        vendor_number == other.vendor_number &&
        vendor_account_number == other.vendor_account_number &&
        vendor_invoice_date == other.vendor_invoice_date &&
        vendor_invoice_number == other.vendor_invoice_number &&
        tax_agency_xref == other.tax_agency_xref &&
        state_tax_xref == other.state_tax_xref &&
        county_tax_xref == other.county_tax_xref &&
        city_tax_xref == other.city_tax_xref &&
        ship_to_company == other.ship_to_company &&
        ship_to_company_account_number == other.ship_to_company_account_number &&
        ship_to_company_type == other.ship_to_company_type &&
        ship_to_contact == other.ship_to_contact &&
        ship_to_site == other.ship_to_site &&
        ship_to_tax_group == other.ship_to_tax_group &&
        tax_code == other.tax_code &&
        tax_group_rate == other.tax_group_rate &&
        use_avalara_tax_flag == other.use_avalara_tax_flag &&
        purchase_header_tax_group == other.purchase_header_tax_group &&
        purchase_header_taxable_flag == other.purchase_header_taxable_flag &&
        purchase_header_freight_taxable_flag == other.purchase_header_freight_taxable_flag &&
        tax_levels == other.tax_levels &&
        purchase_detail == other.purchase_detail &&
        purchase_detail_tax == other.purchase_detail_tax
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, document_date, document_number, description, memo, ap_account_number, purchase_date, company, company_type,
       contact, site, purchase_class, freight_amount, freight_packing_slip, packing_slip, dropship_flag, currency, total, billing_terms, billing_terms_xref, due_days, vendor_number, vendor_account_number, vendor_invoice_date, vendor_invoice_number, tax_agency_xref, state_tax_xref, county_tax_xref, city_tax_xref, ship_to_company, ship_to_company_account_number, ship_to_company_type, ship_to_contact, ship_to_site, ship_to_tax_group, tax_code, tax_group_rate, use_avalara_tax_flag, purchase_header_tax_group, purchase_header_taxable_flag, purchase_header_freight_taxable_flag, tax_levels, purchase_detail, purchase_detail_tax].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
