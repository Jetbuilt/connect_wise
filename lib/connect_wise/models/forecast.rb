=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class Forecast
    attr_accessor :id

    attr_accessor :forecast_items

    attr_accessor :product_revenue

    attr_accessor :service_revenue

    attr_accessor :agreement_revenue

    attr_accessor :time_revenue

    attr_accessor :expense_revenue

    attr_accessor :forecast_revenue_totals

    attr_accessor :inclusive_revenue_totals

    attr_accessor :recurring_total

    attr_accessor :won_revenue

    attr_accessor :lost_revenue

    attr_accessor :open_revenue

    attr_accessor :other_revenue1

    attr_accessor :other_revenue2

    attr_accessor :sales_tax_revenue

    attr_accessor :forecast_total_with_taxes

    attr_accessor :expected_probability

    attr_accessor :tax_code

    attr_accessor :billing_terms

    attr_accessor :currency

    attr_accessor :_info

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'forecast_items' => :'forecastItems',
        :'product_revenue' => :'productRevenue',
        :'service_revenue' => :'serviceRevenue',
        :'agreement_revenue' => :'agreementRevenue',
        :'time_revenue' => :'timeRevenue',
        :'expense_revenue' => :'expenseRevenue',
        :'forecast_revenue_totals' => :'forecastRevenueTotals',
        :'inclusive_revenue_totals' => :'inclusiveRevenueTotals',
        :'recurring_total' => :'recurringTotal',
        :'won_revenue' => :'wonRevenue',
        :'lost_revenue' => :'lostRevenue',
        :'open_revenue' => :'openRevenue',
        :'other_revenue1' => :'otherRevenue1',
        :'other_revenue2' => :'otherRevenue2',
        :'sales_tax_revenue' => :'salesTaxRevenue',
        :'forecast_total_with_taxes' => :'forecastTotalWithTaxes',
        :'expected_probability' => :'expectedProbability',
        :'tax_code' => :'taxCode',
        :'billing_terms' => :'billingTerms',
        :'currency' => :'currency',
        :'_info' => :'_info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'forecast_items' => :'Array<ForecastItem>',
        :'product_revenue' => :'ProductRevenueReference',
        :'service_revenue' => :'ServiceRevenueReference',
        :'agreement_revenue' => :'AgreementRevenueReference',
        :'time_revenue' => :'TimeRevenueReference',
        :'expense_revenue' => :'ExpenseRevenueReference',
        :'forecast_revenue_totals' => :'ForecastRevenueReference',
        :'inclusive_revenue_totals' => :'InclusiveRevenueReference',
        :'recurring_total' => :'Float',
        :'won_revenue' => :'WonRevenueReference',
        :'lost_revenue' => :'LostRevenueReference',
        :'open_revenue' => :'OpenRevenueReference',
        :'other_revenue1' => :'Other1RevenueReference',
        :'other_revenue2' => :'Other2RevenueReference',
        :'sales_tax_revenue' => :'Float',
        :'forecast_total_with_taxes' => :'Float',
        :'expected_probability' => :'Integer',
        :'tax_code' => :'TaxCodeReference',
        :'billing_terms' => :'BillingTermsReference',
        :'currency' => :'CurrencyReference',
        :'_info' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'recurring_total',
        :'sales_tax_revenue',
        :'forecast_total_with_taxes',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::Forecast` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::Forecast`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'forecast_items')
        if (value = attributes[:'forecast_items']).is_a?(Array)
          self.forecast_items = value
        end
      end

      if attributes.key?(:'product_revenue')
        self.product_revenue = attributes[:'product_revenue']
      end

      if attributes.key?(:'service_revenue')
        self.service_revenue = attributes[:'service_revenue']
      end

      if attributes.key?(:'agreement_revenue')
        self.agreement_revenue = attributes[:'agreement_revenue']
      end

      if attributes.key?(:'time_revenue')
        self.time_revenue = attributes[:'time_revenue']
      end

      if attributes.key?(:'expense_revenue')
        self.expense_revenue = attributes[:'expense_revenue']
      end

      if attributes.key?(:'forecast_revenue_totals')
        self.forecast_revenue_totals = attributes[:'forecast_revenue_totals']
      end

      if attributes.key?(:'inclusive_revenue_totals')
        self.inclusive_revenue_totals = attributes[:'inclusive_revenue_totals']
      end

      if attributes.key?(:'recurring_total')
        self.recurring_total = attributes[:'recurring_total']
      end

      if attributes.key?(:'won_revenue')
        self.won_revenue = attributes[:'won_revenue']
      end

      if attributes.key?(:'lost_revenue')
        self.lost_revenue = attributes[:'lost_revenue']
      end

      if attributes.key?(:'open_revenue')
        self.open_revenue = attributes[:'open_revenue']
      end

      if attributes.key?(:'other_revenue1')
        self.other_revenue1 = attributes[:'other_revenue1']
      end

      if attributes.key?(:'other_revenue2')
        self.other_revenue2 = attributes[:'other_revenue2']
      end

      if attributes.key?(:'sales_tax_revenue')
        self.sales_tax_revenue = attributes[:'sales_tax_revenue']
      end

      if attributes.key?(:'forecast_total_with_taxes')
        self.forecast_total_with_taxes = attributes[:'forecast_total_with_taxes']
      end

      if attributes.key?(:'expected_probability')
        self.expected_probability = attributes[:'expected_probability']
      end

      if attributes.key?(:'tax_code')
        self.tax_code = attributes[:'tax_code']
      end

      if attributes.key?(:'billing_terms')
        self.billing_terms = attributes[:'billing_terms']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          forecast_items == o.forecast_items &&
          product_revenue == o.product_revenue &&
          service_revenue == o.service_revenue &&
          agreement_revenue == o.agreement_revenue &&
          time_revenue == o.time_revenue &&
          expense_revenue == o.expense_revenue &&
          forecast_revenue_totals == o.forecast_revenue_totals &&
          inclusive_revenue_totals == o.inclusive_revenue_totals &&
          recurring_total == o.recurring_total &&
          won_revenue == o.won_revenue &&
          lost_revenue == o.lost_revenue &&
          open_revenue == o.open_revenue &&
          other_revenue1 == o.other_revenue1 &&
          other_revenue2 == o.other_revenue2 &&
          sales_tax_revenue == o.sales_tax_revenue &&
          forecast_total_with_taxes == o.forecast_total_with_taxes &&
          expected_probability == o.expected_probability &&
          tax_code == o.tax_code &&
          billing_terms == o.billing_terms &&
          currency == o.currency &&
          _info == o._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, forecast_items, product_revenue, service_revenue, agreement_revenue, time_revenue, expense_revenue, forecast_revenue_totals, inclusive_revenue_totals, recurring_total, won_revenue, lost_revenue, open_revenue, other_revenue1, other_revenue2, sales_tax_revenue, forecast_total_with_taxes, expected_probability, tax_code, billing_terms, currency, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
