# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class Forecast
    attr_accessor :id, :forecast_items, :product_revenue, :service_revenue, :agreement_revenue, :time_revenue, :expense_revenue, :forecast_revenue_totals, :inclusive_revenue_totals, :recurring_total, :won_revenue, :lost_revenue, :open_revenue, :other_revenue1, :other_revenue2, :sales_tax_revenue, :forecast_total_with_taxes, :expected_probability, :tax_code, :billing_terms, :currency, :_info

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        forecast_items: :forecastItems,
        product_revenue: :productRevenue,
        service_revenue: :serviceRevenue,
        agreement_revenue: :agreementRevenue,
        time_revenue: :timeRevenue,
        expense_revenue: :expenseRevenue,
        forecast_revenue_totals: :forecastRevenueTotals,
        inclusive_revenue_totals: :inclusiveRevenueTotals,
        recurring_total: :recurringTotal,
        won_revenue: :wonRevenue,
        lost_revenue: :lostRevenue,
        open_revenue: :openRevenue,
        other_revenue1: :otherRevenue1,
        other_revenue2: :otherRevenue2,
        sales_tax_revenue: :salesTaxRevenue,
        forecast_total_with_taxes: :forecastTotalWithTaxes,
        expected_probability: :expectedProbability,
        tax_code: :taxCode,
        billing_terms: :billingTerms,
        currency: :currency,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        forecast_items: :'Array<ForecastItem>',
        product_revenue: :ProductRevenueReference,
        service_revenue: :ServiceRevenueReference,
        agreement_revenue: :AgreementRevenueReference,
        time_revenue: :TimeRevenueReference,
        expense_revenue: :ExpenseRevenueReference,
        forecast_revenue_totals: :ForecastRevenueReference,
        inclusive_revenue_totals: :InclusiveRevenueReference,
        recurring_total: :Float,
        won_revenue: :WonRevenueReference,
        lost_revenue: :LostRevenueReference,
        open_revenue: :OpenRevenueReference,
        other_revenue1: :Other1RevenueReference,
        other_revenue2: :Other2RevenueReference,
        sales_tax_revenue: :Float,
        forecast_total_with_taxes: :Float,
        expected_probability: :Integer,
        tax_code: :TaxCodeReference,
        billing_terms: :BillingTermsReference,
        currency: :CurrencyReference,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                recurring_total
                sales_tax_revenue
                forecast_total_with_taxes
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::Forecast` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::Forecast`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      if attributes.key?(:forecast_items) && (value = attributes[:forecast_items]).is_a?(Array)
        self.forecast_items = value
      end

      self.product_revenue = attributes[:product_revenue] if attributes.key?(:product_revenue)

      self.service_revenue = attributes[:service_revenue] if attributes.key?(:service_revenue)

      self.agreement_revenue = attributes[:agreement_revenue] if attributes.key?(:agreement_revenue)

      self.time_revenue = attributes[:time_revenue] if attributes.key?(:time_revenue)

      self.expense_revenue = attributes[:expense_revenue] if attributes.key?(:expense_revenue)

      self.forecast_revenue_totals = attributes[:forecast_revenue_totals] if attributes.key?(:forecast_revenue_totals)

      self.inclusive_revenue_totals = attributes[:inclusive_revenue_totals] if attributes.key?(:inclusive_revenue_totals)

      self.recurring_total = attributes[:recurring_total] if attributes.key?(:recurring_total)

      self.won_revenue = attributes[:won_revenue] if attributes.key?(:won_revenue)

      self.lost_revenue = attributes[:lost_revenue] if attributes.key?(:lost_revenue)

      self.open_revenue = attributes[:open_revenue] if attributes.key?(:open_revenue)

      self.other_revenue1 = attributes[:other_revenue1] if attributes.key?(:other_revenue1)

      self.other_revenue2 = attributes[:other_revenue2] if attributes.key?(:other_revenue2)

      self.sales_tax_revenue = attributes[:sales_tax_revenue] if attributes.key?(:sales_tax_revenue)

      self.forecast_total_with_taxes = attributes[:forecast_total_with_taxes] if attributes.key?(:forecast_total_with_taxes)

      self.expected_probability = attributes[:expected_probability] if attributes.key?(:expected_probability)

      self.tax_code = attributes[:tax_code] if attributes.key?(:tax_code)

      self.billing_terms = attributes[:billing_terms] if attributes.key?(:billing_terms)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        forecast_items == other.forecast_items &&
        product_revenue == other.product_revenue &&
        service_revenue == other.service_revenue &&
        agreement_revenue == other.agreement_revenue &&
        time_revenue == other.time_revenue &&
        expense_revenue == other.expense_revenue &&
        forecast_revenue_totals == other.forecast_revenue_totals &&
        inclusive_revenue_totals == other.inclusive_revenue_totals &&
        recurring_total == other.recurring_total &&
        won_revenue == other.won_revenue &&
        lost_revenue == other.lost_revenue &&
        open_revenue == other.open_revenue &&
        other_revenue1 == other.other_revenue1 &&
        other_revenue2 == other.other_revenue2 &&
        sales_tax_revenue == other.sales_tax_revenue &&
        forecast_total_with_taxes == other.forecast_total_with_taxes &&
        expected_probability == other.expected_probability &&
        tax_code == other.tax_code &&
        billing_terms == other.billing_terms &&
        currency == other.currency &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, forecast_items, product_revenue, service_revenue, agreement_revenue, time_revenue, expense_revenue, forecast_revenue_totals, inclusive_revenue_totals, recurring_total, won_revenue, lost_revenue, open_revenue, other_revenue1, other_revenue2, sales_tax_revenue, forecast_total_with_taxes, expected_probability, tax_code, billing_terms, currency, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
