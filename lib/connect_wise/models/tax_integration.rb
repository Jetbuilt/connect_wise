=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class TaxIntegration
    attr_accessor :tax_integration_type

    attr_accessor :id

    #  Max length: 50;
    attr_accessor :account_number

    #  Max length: 50;
    attr_accessor :license_key

    #  Max length: 250;
    attr_accessor :service_url

    #  Max length: 50;
    attr_accessor :company_code

    #  Max length: 50;
    attr_accessor :time_tax_code

    #  Max length: 50;
    attr_accessor :expense_tax_code

    #  Max length: 50;
    attr_accessor :product_tax_code

    #  Max length: 50;
    attr_accessor :invoice_amount_tax_code

    attr_accessor :enabled_flag

    attr_accessor :commit_transactions_flag

    attr_accessor :sales_invoice_flag

    #  Max length: 50;
    attr_accessor :freight_tax_code

    attr_accessor :accounting_integration_flag

    attr_accessor :tax_line_flag

    attr_accessor :_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'tax_integration_type' => :'taxIntegrationType',
        :'id' => :'id',
        :'account_number' => :'accountNumber',
        :'license_key' => :'licenseKey',
        :'service_url' => :'serviceUrl',
        :'company_code' => :'companyCode',
        :'time_tax_code' => :'timeTaxCode',
        :'expense_tax_code' => :'expenseTaxCode',
        :'product_tax_code' => :'productTaxCode',
        :'invoice_amount_tax_code' => :'invoiceAmountTaxCode',
        :'enabled_flag' => :'enabledFlag',
        :'commit_transactions_flag' => :'commitTransactionsFlag',
        :'sales_invoice_flag' => :'salesInvoiceFlag',
        :'freight_tax_code' => :'freightTaxCode',
        :'accounting_integration_flag' => :'accountingIntegrationFlag',
        :'tax_line_flag' => :'taxLineFlag',
        :'_info' => :'_info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'tax_integration_type' => :'String',
        :'id' => :'Integer',
        :'account_number' => :'String',
        :'license_key' => :'String',
        :'service_url' => :'String',
        :'company_code' => :'String',
        :'time_tax_code' => :'String',
        :'expense_tax_code' => :'String',
        :'product_tax_code' => :'String',
        :'invoice_amount_tax_code' => :'String',
        :'enabled_flag' => :'Boolean',
        :'commit_transactions_flag' => :'Boolean',
        :'sales_invoice_flag' => :'Boolean',
        :'freight_tax_code' => :'String',
        :'accounting_integration_flag' => :'Boolean',
        :'tax_line_flag' => :'Boolean',
        :'_info' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'enabled_flag',
        :'commit_transactions_flag',
        :'sales_invoice_flag',
        :'accounting_integration_flag',
        :'tax_line_flag',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::TaxIntegration` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::TaxIntegration`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'tax_integration_type')
        self.tax_integration_type = attributes[:'tax_integration_type']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.key?(:'license_key')
        self.license_key = attributes[:'license_key']
      end

      if attributes.key?(:'service_url')
        self.service_url = attributes[:'service_url']
      end

      if attributes.key?(:'company_code')
        self.company_code = attributes[:'company_code']
      end

      if attributes.key?(:'time_tax_code')
        self.time_tax_code = attributes[:'time_tax_code']
      end

      if attributes.key?(:'expense_tax_code')
        self.expense_tax_code = attributes[:'expense_tax_code']
      end

      if attributes.key?(:'product_tax_code')
        self.product_tax_code = attributes[:'product_tax_code']
      end

      if attributes.key?(:'invoice_amount_tax_code')
        self.invoice_amount_tax_code = attributes[:'invoice_amount_tax_code']
      end

      if attributes.key?(:'enabled_flag')
        self.enabled_flag = attributes[:'enabled_flag']
      end

      if attributes.key?(:'commit_transactions_flag')
        self.commit_transactions_flag = attributes[:'commit_transactions_flag']
      end

      if attributes.key?(:'sales_invoice_flag')
        self.sales_invoice_flag = attributes[:'sales_invoice_flag']
      end

      if attributes.key?(:'freight_tax_code')
        self.freight_tax_code = attributes[:'freight_tax_code']
      end

      if attributes.key?(:'accounting_integration_flag')
        self.accounting_integration_flag = attributes[:'accounting_integration_flag']
      end

      if attributes.key?(:'tax_line_flag')
        self.tax_line_flag = attributes[:'tax_line_flag']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      tax_integration_type_validator = EnumAttributeValidator.new('String', ["Avalara"])
      return false unless tax_integration_type_validator.valid?(@tax_integration_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_integration_type Object to be assigned
    def tax_integration_type=(tax_integration_type)
      validator = EnumAttributeValidator.new('String', ["Avalara"])
      unless validator.valid?(tax_integration_type)
        fail ArgumentError, "invalid value for \"tax_integration_type\", must be one of #{validator.allowable_values}."
      end
      @tax_integration_type = tax_integration_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          tax_integration_type == o.tax_integration_type &&
          id == o.id &&
          account_number == o.account_number &&
          license_key == o.license_key &&
          service_url == o.service_url &&
          company_code == o.company_code &&
          time_tax_code == o.time_tax_code &&
          expense_tax_code == o.expense_tax_code &&
          product_tax_code == o.product_tax_code &&
          invoice_amount_tax_code == o.invoice_amount_tax_code &&
          enabled_flag == o.enabled_flag &&
          commit_transactions_flag == o.commit_transactions_flag &&
          sales_invoice_flag == o.sales_invoice_flag &&
          freight_tax_code == o.freight_tax_code &&
          accounting_integration_flag == o.accounting_integration_flag &&
          tax_line_flag == o.tax_line_flag &&
          _info == o._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [tax_integration_type, id, account_number, license_key, service_url, company_code, time_tax_code, expense_tax_code, product_tax_code, invoice_amount_tax_code, enabled_flag, commit_transactions_flag, sales_invoice_flag, freight_tax_code, accounting_integration_flag, tax_line_flag, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
