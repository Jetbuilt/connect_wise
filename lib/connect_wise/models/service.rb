# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class Service
    attr_accessor :sr_notify, :schedule_span, :id, :hide_delimiter_flag, :allow_cc_flag, :allow_to_flag, :calendar_setup, :header_color_disable_flag, :member_color_disable_flag, :contact_color_disable_flag, :unknown_color_disable_flag, :_info

    #  Max length: 50;
    attr_accessor :header_color

    #  Max length: 50;
    attr_accessor :member_color

    #  Max length: 50;
    attr_accessor :contact_color

    #  Max length: 50;
    attr_accessor :unknown_color

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        sr_notify: :srNotify,
        schedule_span: :scheduleSpan,
        id: :id,
        hide_delimiter_flag: :hideDelimiterFlag,
        allow_cc_flag: :allowCCFlag,
        allow_to_flag: :allowTOFlag,
        header_color: :headerColor,
        member_color: :memberColor,
        contact_color: :contactColor,
        unknown_color: :unknownColor,
        calendar_setup: :calendarSetup,
        header_color_disable_flag: :headerColorDisableFlag,
        member_color_disable_flag: :memberColorDisableFlag,
        contact_color_disable_flag: :contactColorDisableFlag,
        unknown_color_disable_flag: :unknownColorDisableFlag,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        sr_notify: :String,
        schedule_span: :String,
        id: :Integer,
        hide_delimiter_flag: :Boolean,
        allow_cc_flag: :Boolean,
        allow_to_flag: :Boolean,
        header_color: :String,
        member_color: :String,
        contact_color: :String,
        unknown_color: :String,
        calendar_setup: :CalendarSetupReference,
        header_color_disable_flag: :Boolean,
        member_color_disable_flag: :Boolean,
        contact_color_disable_flag: :Boolean,
        unknown_color_disable_flag: :Boolean,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                sr_notify
                hide_delimiter_flag
                allow_cc_flag
                allow_to_flag
                header_color_disable_flag
                member_color_disable_flag
                contact_color_disable_flag
                unknown_color_disable_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::Service` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::Service`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.sr_notify = (attributes[:sr_notify] if attributes.key?(:sr_notify))

      self.schedule_span = (attributes[:schedule_span] if attributes.key?(:schedule_span))

      self.id = attributes[:id] if attributes.key?(:id)

      self.hide_delimiter_flag = attributes[:hide_delimiter_flag] if attributes.key?(:hide_delimiter_flag)

      self.allow_cc_flag = attributes[:allow_cc_flag] if attributes.key?(:allow_cc_flag)

      self.allow_to_flag = attributes[:allow_to_flag] if attributes.key?(:allow_to_flag)

      self.header_color = attributes[:header_color] if attributes.key?(:header_color)

      self.member_color = attributes[:member_color] if attributes.key?(:member_color)

      self.contact_color = attributes[:contact_color] if attributes.key?(:contact_color)

      self.unknown_color = attributes[:unknown_color] if attributes.key?(:unknown_color)

      self.calendar_setup = attributes[:calendar_setup] if attributes.key?(:calendar_setup)

      self.header_color_disable_flag = attributes[:header_color_disable_flag] if attributes.key?(:header_color_disable_flag)

      self.member_color_disable_flag = attributes[:member_color_disable_flag] if attributes.key?(:member_color_disable_flag)

      self.contact_color_disable_flag = attributes[:contact_color_disable_flag] if attributes.key?(:contact_color_disable_flag)

      self.unknown_color_disable_flag = attributes[:unknown_color_disable_flag] if attributes.key?(:unknown_color_disable_flag)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "schedule_span", schedule_span cannot be nil.') if @schedule_span.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      sr_notify_validator = EnumAttributeValidator.new('String', %w[All NewAndClosedRequests ClosedRequestsOnly NewRequestsOnly None])
      return false unless sr_notify_validator.valid?(@sr_notify)
      return false if @schedule_span.nil?

      schedule_span_validator = EnumAttributeValidator.new('String', %w[Standard OfficeHours Overnight])
      return false unless schedule_span_validator.valid?(@schedule_span)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sr_notify Object to be assigned
    def sr_notify=(sr_notify)
      validator = EnumAttributeValidator.new('String', %w[All NewAndClosedRequests ClosedRequestsOnly NewRequestsOnly None])
      raise ArgumentError, "invalid value for \"sr_notify\", must be one of #{validator.allowable_values}." unless validator.valid?(sr_notify)

      @sr_notify = sr_notify
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] schedule_span Object to be assigned
    def schedule_span=(schedule_span)
      validator = EnumAttributeValidator.new('String', %w[Standard OfficeHours Overnight])
      raise ArgumentError, "invalid value for \"schedule_span\", must be one of #{validator.allowable_values}." unless validator.valid?(schedule_span)

      @schedule_span = schedule_span
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        sr_notify == other.sr_notify &&
        schedule_span == other.schedule_span &&
        id == other.id &&
        hide_delimiter_flag == other.hide_delimiter_flag &&
        allow_cc_flag == other.allow_cc_flag &&
        allow_to_flag == other.allow_to_flag &&
        header_color == other.header_color &&
        member_color == other.member_color &&
        contact_color == other.contact_color &&
        unknown_color == other.unknown_color &&
        calendar_setup == other.calendar_setup &&
        header_color_disable_flag == other.header_color_disable_flag &&
        member_color_disable_flag == other.member_color_disable_flag &&
        contact_color_disable_flag == other.contact_color_disable_flag &&
        unknown_color_disable_flag == other.unknown_color_disable_flag &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sr_notify, schedule_span, id, hide_delimiter_flag, allow_cc_flag, allow_to_flag, header_color, member_color, contact_color, unknown_color, calendar_setup, header_color_disable_flag, member_color_disable_flag, contact_color_disable_flag, unknown_color_disable_flag, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
