# #Connectwise Manage All Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2022.1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.1
#

require 'date'
require 'time'

module ConnectWise
  class Commission
    attr_accessor :id, :member, :commission_percent, :date_start, :date_end, :location, :department, :company, :site, :agreement, :project, :service_board, :ticket, :territory, :billing_method, :service_type, :project_board, :project_type, :agreement_type, :number_of_months, :product_category, :product_sub_category, :item, :commission_basis, :invoice_option, :services_flag, :agreements_flag, :products_flag, :my_opportunities_flag, :_info

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        member: :member,
        commission_percent: :commissionPercent,
        date_start: :dateStart,
        date_end: :dateEnd,
        location: :location,
        department: :department,
        company: :company,
        site: :site,
        agreement: :agreement,
        project: :project,
        service_board: :serviceBoard,
        ticket: :ticket,
        territory: :territory,
        billing_method: :billingMethod,
        service_type: :serviceType,
        project_board: :projectBoard,
        project_type: :projectType,
        agreement_type: :agreementType,
        number_of_months: :numberOfMonths,
        product_category: :productCategory,
        product_sub_category: :productSubCategory,
        item: :item,
        commission_basis: :commissionBasis,
        invoice_option: :invoiceOption,
        services_flag: :servicesFlag,
        agreements_flag: :agreementsFlag,
        products_flag: :productsFlag,
        my_opportunities_flag: :myOpportunitiesFlag,
        _info: :_info
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        member: :MemberReference,
        commission_percent: :Float,
        date_start: :Time,
        date_end: :Time,
        location: :SystemLocationReference,
        department: :SystemDepartmentReference,
        company: :CompanyReference,
        site: :SiteReference,
        agreement: :AgreementReference,
        project: :ProjectReference,
        service_board: :BoardReference,
        ticket: :TicketReference,
        territory: :SystemLocationReference,
        billing_method: :String,
        service_type: :ServiceTypeReference,
        project_board: :ProjectBoardReference,
        project_type: :ProjectTypeReference,
        agreement_type: :AgreementTypeReference,
        number_of_months: :Integer,
        product_category: :ProductCategoryReference,
        product_sub_category: :ProductSubCategoryReference,
        item: :IvItemReference,
        commission_basis: :String,
        invoice_option: :String,
        services_flag: :Boolean,
        agreements_flag: :Boolean,
        products_flag: :Boolean,
        my_opportunities_flag: :Boolean,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                commission_percent
                billing_method
                number_of_months
                commission_basis
                invoice_option
                services_flag
                agreements_flag
                products_flag
                my_opportunities_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::Commission` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::Commission`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.member = attributes[:member] if attributes.key?(:member)

      self.commission_percent = attributes[:commission_percent] if attributes.key?(:commission_percent)

      self.date_start = attributes[:date_start] if attributes.key?(:date_start)

      self.date_end = attributes[:date_end] if attributes.key?(:date_end)

      self.location = attributes[:location] if attributes.key?(:location)

      self.department = attributes[:department] if attributes.key?(:department)

      self.company = attributes[:company] if attributes.key?(:company)

      self.site = attributes[:site] if attributes.key?(:site)

      self.agreement = attributes[:agreement] if attributes.key?(:agreement)

      self.project = attributes[:project] if attributes.key?(:project)

      self.service_board = attributes[:service_board] if attributes.key?(:service_board)

      self.ticket = attributes[:ticket] if attributes.key?(:ticket)

      self.territory = attributes[:territory] if attributes.key?(:territory)

      self.billing_method = attributes[:billing_method] if attributes.key?(:billing_method)

      self.service_type = attributes[:service_type] if attributes.key?(:service_type)

      self.project_board = attributes[:project_board] if attributes.key?(:project_board)

      self.project_type = attributes[:project_type] if attributes.key?(:project_type)

      self.agreement_type = attributes[:agreement_type] if attributes.key?(:agreement_type)

      self.number_of_months = attributes[:number_of_months] if attributes.key?(:number_of_months)

      self.product_category = attributes[:product_category] if attributes.key?(:product_category)

      self.product_sub_category = attributes[:product_sub_category] if attributes.key?(:product_sub_category)

      self.item = attributes[:item] if attributes.key?(:item)

      self.commission_basis = attributes[:commission_basis] if attributes.key?(:commission_basis)

      self.invoice_option = attributes[:invoice_option] if attributes.key?(:invoice_option)

      self.services_flag = attributes[:services_flag] if attributes.key?(:services_flag)

      self.agreements_flag = attributes[:agreements_flag] if attributes.key?(:agreements_flag)

      self.products_flag = attributes[:products_flag] if attributes.key?(:products_flag)

      self.my_opportunities_flag = attributes[:my_opportunities_flag] if attributes.key?(:my_opportunities_flag)

      return unless attributes.key?(:_info)
      return unless (value = attributes[:_info]).is_a?(Hash)

      self._info = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      billing_method_validator = EnumAttributeValidator.new('String', %w[Agreement CreditMemo DownPayment Miscellaneous Progress Standard])
      return false unless billing_method_validator.valid?(@billing_method)

      commission_basis_validator = EnumAttributeValidator.new('String', %w[GrossProfit SalesAmount])
      return false unless commission_basis_validator.valid?(@commission_basis)

      invoice_option_validator = EnumAttributeValidator.new('String', %w[AllInvoices PaidInvoices])
      return false unless invoice_option_validator.valid?(@invoice_option)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_method Object to be assigned
    def billing_method=(billing_method)
      validator = EnumAttributeValidator.new('String', %w[Agreement CreditMemo DownPayment Miscellaneous Progress Standard])
      raise ArgumentError, "invalid value for \"billing_method\", must be one of #{validator.allowable_values}." unless validator.valid?(billing_method)

      @billing_method = billing_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] commission_basis Object to be assigned
    def commission_basis=(commission_basis)
      validator = EnumAttributeValidator.new('String', %w[GrossProfit SalesAmount])
      raise ArgumentError, "invalid value for \"commission_basis\", must be one of #{validator.allowable_values}." unless validator.valid?(commission_basis)

      @commission_basis = commission_basis
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_option Object to be assigned
    def invoice_option=(invoice_option)
      validator = EnumAttributeValidator.new('String', %w[AllInvoices PaidInvoices])
      raise ArgumentError, "invalid value for \"invoice_option\", must be one of #{validator.allowable_values}." unless validator.valid?(invoice_option)

      @invoice_option = invoice_option
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        member == other.member &&
        commission_percent == other.commission_percent &&
        date_start == other.date_start &&
        date_end == other.date_end &&
        location == other.location &&
        department == other.department &&
        company == other.company &&
        site == other.site &&
        agreement == other.agreement &&
        project == other.project &&
        service_board == other.service_board &&
        ticket == other.ticket &&
        territory == other.territory &&
        billing_method == other.billing_method &&
        service_type == other.service_type &&
        project_board == other.project_board &&
        project_type == other.project_type &&
        agreement_type == other.agreement_type &&
        number_of_months == other.number_of_months &&
        product_category == other.product_category &&
        product_sub_category == other.product_sub_category &&
        item == other.item &&
        commission_basis == other.commission_basis &&
        invoice_option == other.invoice_option &&
        services_flag == other.services_flag &&
        agreements_flag == other.agreements_flag &&
        products_flag == other.products_flag &&
        my_opportunities_flag == other.my_opportunities_flag &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, member, commission_percent, date_start, date_end, location, department, company, site, agreement, project, service_board, ticket, territory, billing_method, service_type, project_board, project_type, agreement_type, number_of_months, product_category, product_sub_category, item, commission_basis, invoice_option, services_flag, agreements_flag, products_flag, my_opportunities_flag, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
