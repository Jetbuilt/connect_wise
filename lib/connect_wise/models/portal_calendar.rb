# #Connectwise Manage All Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2022.1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.1
#

require 'date'
require 'time'

module ConnectWise
  class PortalCalendar
    attr_accessor :week_start, :id, :adjust1_start, :adjust1_end, :adjust1_hours, :adjust2_start, :adjust2_end, :adjust2_hours, :adjust3_start, :adjust3_end, :adjust3_hours, :_info

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        week_start: :weekStart,
        id: :id,
        adjust1_start: :adjust1Start,
        adjust1_end: :adjust1End,
        adjust1_hours: :adjust1Hours,
        adjust2_start: :adjust2Start,
        adjust2_end: :adjust2End,
        adjust2_hours: :adjust2Hours,
        adjust3_start: :adjust3Start,
        adjust3_end: :adjust3End,
        adjust3_hours: :adjust3Hours,
        _info: :_info
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        week_start: :String,
        id: :Integer,
        adjust1_start: :String,
        adjust1_end: :String,
        adjust1_hours: :Float,
        adjust2_start: :String,
        adjust2_end: :String,
        adjust2_hours: :Float,
        adjust3_start: :String,
        adjust3_end: :String,
        adjust3_hours: :Float,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                week_start
                adjust1_hours
                adjust2_hours
                adjust3_hours
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::PortalCalendar` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::PortalCalendar`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.week_start = attributes[:week_start] if attributes.key?(:week_start)

      self.id = attributes[:id] if attributes.key?(:id)

      self.adjust1_start = attributes[:adjust1_start] if attributes.key?(:adjust1_start)

      self.adjust1_end = attributes[:adjust1_end] if attributes.key?(:adjust1_end)

      self.adjust1_hours = attributes[:adjust1_hours] if attributes.key?(:adjust1_hours)

      self.adjust2_start = attributes[:adjust2_start] if attributes.key?(:adjust2_start)

      self.adjust2_end = attributes[:adjust2_end] if attributes.key?(:adjust2_end)

      self.adjust2_hours = attributes[:adjust2_hours] if attributes.key?(:adjust2_hours)

      self.adjust3_start = attributes[:adjust3_start] if attributes.key?(:adjust3_start)

      self.adjust3_end = attributes[:adjust3_end] if attributes.key?(:adjust3_end)

      self.adjust3_hours = attributes[:adjust3_hours] if attributes.key?(:adjust3_hours)

      return unless attributes.key?(:_info)
      return unless (value = attributes[:_info]).is_a?(Hash)

      self._info = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      week_start_validator = EnumAttributeValidator.new('String', %w[Sunday Monday Tuesday Wednesday Thursday Friday Saturday])
      return false unless week_start_validator.valid?(@week_start)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] week_start Object to be assigned
    def week_start=(week_start)
      validator = EnumAttributeValidator.new('String', %w[Sunday Monday Tuesday Wednesday Thursday Friday Saturday])
      raise ArgumentError, "invalid value for \"week_start\", must be one of #{validator.allowable_values}." unless validator.valid?(week_start)

      @week_start = week_start
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        week_start == other.week_start &&
        id == other.id &&
        adjust1_start == other.adjust1_start &&
        adjust1_end == other.adjust1_end &&
        adjust1_hours == other.adjust1_hours &&
        adjust2_start == other.adjust2_start &&
        adjust2_end == other.adjust2_end &&
        adjust2_hours == other.adjust2_hours &&
        adjust3_start == other.adjust3_start &&
        adjust3_end == other.adjust3_end &&
        adjust3_hours == other.adjust3_hours &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [week_start, id, adjust1_start, adjust1_end, adjust1_hours, adjust2_start, adjust2_end, adjust2_hours, adjust3_start, adjust3_end, adjust3_hours, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
