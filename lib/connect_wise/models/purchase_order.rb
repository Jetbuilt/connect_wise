=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class PurchaseOrder
    attr_accessor :id

    attr_accessor :business_unit_id

    attr_accessor :cancel_reason

    # The closed flag can only be updated via updating the purchase order status to a closed/open status.
    attr_accessor :closed_flag

    attr_accessor :customer_city

    attr_accessor :customer_company

    attr_accessor :customer_contact

    attr_accessor :customer_country

    attr_accessor :customer_extension

    attr_accessor :customer_name

    attr_accessor :customer_phone

    attr_accessor :customer_site

    attr_accessor :customer_site_name

    attr_accessor :customer_state

    attr_accessor :customer_street_line1

    attr_accessor :customer_street_line2

    attr_accessor :customer_zip

    attr_accessor :date_closed

    attr_accessor :drop_ship_customer_flag

    attr_accessor :entered_by

    attr_accessor :freight_cost

    attr_accessor :freight_packing_slip

    attr_accessor :freight_tax_total

    attr_accessor :internal_notes

    attr_accessor :location_id

    #  Required On Updates;
    attr_accessor :po_date

    #  Required On Updates; Max length: 50;
    attr_accessor :po_number

    attr_accessor :sales_tax

    attr_accessor :shipment_date

    attr_accessor :shipment_method

    attr_accessor :shipping_instructions

    attr_accessor :status

    attr_accessor :sub_total

    attr_accessor :tax_code

    attr_accessor :tax_freight_flag

    attr_accessor :tax_po_flag

    attr_accessor :terms

    attr_accessor :total

    #  Max length: 50;
    attr_accessor :tracking_number

    # Determines whether or not to update all of the shipment info for each associated line item when new shipment info is passed in
    attr_accessor :update_shipment_info

    # Determines whether or not to update vendor order number for each associated line item when new vendor order number is passed in
    attr_accessor :update_vendor_order_number

    attr_accessor :vendor_company

    attr_accessor :vendor_contact

    attr_accessor :vendor_invoice_date

    #  Max length: 50;
    attr_accessor :vendor_invoice_number

    #  Max length: 50;
    attr_accessor :vendor_order_number

    attr_accessor :vendor_site

    attr_accessor :warehouse

    attr_accessor :currency

    attr_accessor :_info

    attr_accessor :custom_fields

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'business_unit_id' => :'businessUnitId',
        :'cancel_reason' => :'cancelReason',
        :'closed_flag' => :'closedFlag',
        :'customer_city' => :'customerCity',
        :'customer_company' => :'customerCompany',
        :'customer_contact' => :'customerContact',
        :'customer_country' => :'customerCountry',
        :'customer_extension' => :'customerExtension',
        :'customer_name' => :'customerName',
        :'customer_phone' => :'customerPhone',
        :'customer_site' => :'customerSite',
        :'customer_site_name' => :'customerSiteName',
        :'customer_state' => :'customerState',
        :'customer_street_line1' => :'customerStreetLine1',
        :'customer_street_line2' => :'customerStreetLine2',
        :'customer_zip' => :'customerZip',
        :'date_closed' => :'dateClosed',
        :'drop_ship_customer_flag' => :'dropShipCustomerFlag',
        :'entered_by' => :'enteredBy',
        :'freight_cost' => :'freightCost',
        :'freight_packing_slip' => :'freightPackingSlip',
        :'freight_tax_total' => :'freightTaxTotal',
        :'internal_notes' => :'internalNotes',
        :'location_id' => :'locationId',
        :'po_date' => :'poDate',
        :'po_number' => :'poNumber',
        :'sales_tax' => :'salesTax',
        :'shipment_date' => :'shipmentDate',
        :'shipment_method' => :'shipmentMethod',
        :'shipping_instructions' => :'shippingInstructions',
        :'status' => :'status',
        :'sub_total' => :'subTotal',
        :'tax_code' => :'taxCode',
        :'tax_freight_flag' => :'taxFreightFlag',
        :'tax_po_flag' => :'taxPoFlag',
        :'terms' => :'terms',
        :'total' => :'total',
        :'tracking_number' => :'trackingNumber',
        :'update_shipment_info' => :'updateShipmentInfo',
        :'update_vendor_order_number' => :'updateVendorOrderNumber',
        :'vendor_company' => :'vendorCompany',
        :'vendor_contact' => :'vendorContact',
        :'vendor_invoice_date' => :'vendorInvoiceDate',
        :'vendor_invoice_number' => :'vendorInvoiceNumber',
        :'vendor_order_number' => :'vendorOrderNumber',
        :'vendor_site' => :'vendorSite',
        :'warehouse' => :'warehouse',
        :'currency' => :'currency',
        :'_info' => :'_info',
        :'custom_fields' => :'customFields'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'business_unit_id' => :'Integer',
        :'cancel_reason' => :'String',
        :'closed_flag' => :'Boolean',
        :'customer_city' => :'String',
        :'customer_company' => :'CompanyReference',
        :'customer_contact' => :'ContactReference',
        :'customer_country' => :'CountryReference',
        :'customer_extension' => :'String',
        :'customer_name' => :'String',
        :'customer_phone' => :'String',
        :'customer_site' => :'SiteReference',
        :'customer_site_name' => :'String',
        :'customer_state' => :'String',
        :'customer_street_line1' => :'String',
        :'customer_street_line2' => :'String',
        :'customer_zip' => :'String',
        :'date_closed' => :'Time',
        :'drop_ship_customer_flag' => :'Boolean',
        :'entered_by' => :'String',
        :'freight_cost' => :'Float',
        :'freight_packing_slip' => :'String',
        :'freight_tax_total' => :'Float',
        :'internal_notes' => :'String',
        :'location_id' => :'Integer',
        :'po_date' => :'Time',
        :'po_number' => :'String',
        :'sales_tax' => :'Float',
        :'shipment_date' => :'Time',
        :'shipment_method' => :'ShipmentMethodReference',
        :'shipping_instructions' => :'String',
        :'status' => :'PurchaseOrderStatusReference',
        :'sub_total' => :'Float',
        :'tax_code' => :'TaxCodeReference',
        :'tax_freight_flag' => :'Boolean',
        :'tax_po_flag' => :'Boolean',
        :'terms' => :'BillingTermsReference',
        :'total' => :'Float',
        :'tracking_number' => :'String',
        :'update_shipment_info' => :'Boolean',
        :'update_vendor_order_number' => :'Boolean',
        :'vendor_company' => :'CompanyReference',
        :'vendor_contact' => :'ContactReference',
        :'vendor_invoice_date' => :'Time',
        :'vendor_invoice_number' => :'String',
        :'vendor_order_number' => :'String',
        :'vendor_site' => :'SiteReference',
        :'warehouse' => :'WarehouseReference',
        :'currency' => :'CurrencyReference',
        :'_info' => :'Hash<String, String>',
        :'custom_fields' => :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'business_unit_id',
        :'closed_flag',
        :'drop_ship_customer_flag',
        :'freight_cost',
        :'freight_tax_total',
        :'location_id',
        :'sales_tax',
        :'sub_total',
        :'tax_freight_flag',
        :'tax_po_flag',
        :'total',
        :'update_shipment_info',
        :'update_vendor_order_number',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::PurchaseOrder` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::PurchaseOrder`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'business_unit_id')
        self.business_unit_id = attributes[:'business_unit_id']
      end

      if attributes.key?(:'cancel_reason')
        self.cancel_reason = attributes[:'cancel_reason']
      end

      if attributes.key?(:'closed_flag')
        self.closed_flag = attributes[:'closed_flag']
      end

      if attributes.key?(:'customer_city')
        self.customer_city = attributes[:'customer_city']
      end

      if attributes.key?(:'customer_company')
        self.customer_company = attributes[:'customer_company']
      end

      if attributes.key?(:'customer_contact')
        self.customer_contact = attributes[:'customer_contact']
      end

      if attributes.key?(:'customer_country')
        self.customer_country = attributes[:'customer_country']
      end

      if attributes.key?(:'customer_extension')
        self.customer_extension = attributes[:'customer_extension']
      end

      if attributes.key?(:'customer_name')
        self.customer_name = attributes[:'customer_name']
      end

      if attributes.key?(:'customer_phone')
        self.customer_phone = attributes[:'customer_phone']
      end

      if attributes.key?(:'customer_site')
        self.customer_site = attributes[:'customer_site']
      end

      if attributes.key?(:'customer_site_name')
        self.customer_site_name = attributes[:'customer_site_name']
      end

      if attributes.key?(:'customer_state')
        self.customer_state = attributes[:'customer_state']
      end

      if attributes.key?(:'customer_street_line1')
        self.customer_street_line1 = attributes[:'customer_street_line1']
      end

      if attributes.key?(:'customer_street_line2')
        self.customer_street_line2 = attributes[:'customer_street_line2']
      end

      if attributes.key?(:'customer_zip')
        self.customer_zip = attributes[:'customer_zip']
      end

      if attributes.key?(:'date_closed')
        self.date_closed = attributes[:'date_closed']
      end

      if attributes.key?(:'drop_ship_customer_flag')
        self.drop_ship_customer_flag = attributes[:'drop_ship_customer_flag']
      end

      if attributes.key?(:'entered_by')
        self.entered_by = attributes[:'entered_by']
      end

      if attributes.key?(:'freight_cost')
        self.freight_cost = attributes[:'freight_cost']
      end

      if attributes.key?(:'freight_packing_slip')
        self.freight_packing_slip = attributes[:'freight_packing_slip']
      end

      if attributes.key?(:'freight_tax_total')
        self.freight_tax_total = attributes[:'freight_tax_total']
      end

      if attributes.key?(:'internal_notes')
        self.internal_notes = attributes[:'internal_notes']
      end

      if attributes.key?(:'location_id')
        self.location_id = attributes[:'location_id']
      end

      if attributes.key?(:'po_date')
        self.po_date = attributes[:'po_date']
      end

      if attributes.key?(:'po_number')
        self.po_number = attributes[:'po_number']
      end

      if attributes.key?(:'sales_tax')
        self.sales_tax = attributes[:'sales_tax']
      end

      if attributes.key?(:'shipment_date')
        self.shipment_date = attributes[:'shipment_date']
      end

      if attributes.key?(:'shipment_method')
        self.shipment_method = attributes[:'shipment_method']
      end

      if attributes.key?(:'shipping_instructions')
        self.shipping_instructions = attributes[:'shipping_instructions']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'sub_total')
        self.sub_total = attributes[:'sub_total']
      end

      if attributes.key?(:'tax_code')
        self.tax_code = attributes[:'tax_code']
      end

      if attributes.key?(:'tax_freight_flag')
        self.tax_freight_flag = attributes[:'tax_freight_flag']
      end

      if attributes.key?(:'tax_po_flag')
        self.tax_po_flag = attributes[:'tax_po_flag']
      end

      if attributes.key?(:'terms')
        self.terms = attributes[:'terms']
      end

      if attributes.key?(:'total')
        self.total = attributes[:'total']
      end

      if attributes.key?(:'tracking_number')
        self.tracking_number = attributes[:'tracking_number']
      end

      if attributes.key?(:'update_shipment_info')
        self.update_shipment_info = attributes[:'update_shipment_info']
      end

      if attributes.key?(:'update_vendor_order_number')
        self.update_vendor_order_number = attributes[:'update_vendor_order_number']
      end

      if attributes.key?(:'vendor_company')
        self.vendor_company = attributes[:'vendor_company']
      end

      if attributes.key?(:'vendor_contact')
        self.vendor_contact = attributes[:'vendor_contact']
      end

      if attributes.key?(:'vendor_invoice_date')
        self.vendor_invoice_date = attributes[:'vendor_invoice_date']
      end

      if attributes.key?(:'vendor_invoice_number')
        self.vendor_invoice_number = attributes[:'vendor_invoice_number']
      end

      if attributes.key?(:'vendor_order_number')
        self.vendor_order_number = attributes[:'vendor_order_number']
      end

      if attributes.key?(:'vendor_site')
        self.vendor_site = attributes[:'vendor_site']
      end

      if attributes.key?(:'warehouse')
        self.warehouse = attributes[:'warehouse']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          business_unit_id == o.business_unit_id &&
          cancel_reason == o.cancel_reason &&
          closed_flag == o.closed_flag &&
          customer_city == o.customer_city &&
          customer_company == o.customer_company &&
          customer_contact == o.customer_contact &&
          customer_country == o.customer_country &&
          customer_extension == o.customer_extension &&
          customer_name == o.customer_name &&
          customer_phone == o.customer_phone &&
          customer_site == o.customer_site &&
          customer_site_name == o.customer_site_name &&
          customer_state == o.customer_state &&
          customer_street_line1 == o.customer_street_line1 &&
          customer_street_line2 == o.customer_street_line2 &&
          customer_zip == o.customer_zip &&
          date_closed == o.date_closed &&
          drop_ship_customer_flag == o.drop_ship_customer_flag &&
          entered_by == o.entered_by &&
          freight_cost == o.freight_cost &&
          freight_packing_slip == o.freight_packing_slip &&
          freight_tax_total == o.freight_tax_total &&
          internal_notes == o.internal_notes &&
          location_id == o.location_id &&
          po_date == o.po_date &&
          po_number == o.po_number &&
          sales_tax == o.sales_tax &&
          shipment_date == o.shipment_date &&
          shipment_method == o.shipment_method &&
          shipping_instructions == o.shipping_instructions &&
          status == o.status &&
          sub_total == o.sub_total &&
          tax_code == o.tax_code &&
          tax_freight_flag == o.tax_freight_flag &&
          tax_po_flag == o.tax_po_flag &&
          terms == o.terms &&
          total == o.total &&
          tracking_number == o.tracking_number &&
          update_shipment_info == o.update_shipment_info &&
          update_vendor_order_number == o.update_vendor_order_number &&
          vendor_company == o.vendor_company &&
          vendor_contact == o.vendor_contact &&
          vendor_invoice_date == o.vendor_invoice_date &&
          vendor_invoice_number == o.vendor_invoice_number &&
          vendor_order_number == o.vendor_order_number &&
          vendor_site == o.vendor_site &&
          warehouse == o.warehouse &&
          currency == o.currency &&
          _info == o._info &&
          custom_fields == o.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, business_unit_id, cancel_reason, closed_flag, customer_city, customer_company, customer_contact, customer_country, customer_extension, customer_name, customer_phone, customer_site, customer_site_name, customer_state, customer_street_line1, customer_street_line2, customer_zip, date_closed, drop_ship_customer_flag, entered_by, freight_cost, freight_packing_slip, freight_tax_total, internal_notes, location_id, po_date, po_number, sales_tax, shipment_date, shipment_method, shipping_instructions, status, sub_total, tax_code, tax_freight_flag, tax_po_flag, terms, total, tracking_number, update_shipment_info, update_vendor_order_number, vendor_company, vendor_contact, vendor_invoice_date, vendor_invoice_number, vendor_order_number, vendor_site, warehouse, currency, _info, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
