# #Connectwise Manage All Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2022.1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.1
#

require 'date'
require 'time'

module ConnectWise
  class PurchaseOrder
    attr_accessor :id, :business_unit_id, :cancel_reason, :customer_city, :customer_company, :customer_contact, :customer_country, :customer_extension, :customer_name, :customer_phone, :customer_site, :customer_site_name, :customer_state, :customer_street_line1, :customer_street_line2, :customer_zip, :date_closed, :drop_ship_customer_flag, :entered_by, :freight_cost, :freight_packing_slip, :freight_tax_total, :internal_notes, :location_id, :sales_tax, :shipment_date, :shipment_method, :shipping_instructions, :status, :sub_total, :tax_code, :tax_freight_flag, :tax_po_flag, :terms, :total, :vendor_company, :vendor_contact, :vendor_invoice_date, :vendor_site, :warehouse, :currency, :_info, :custom_fields

    # The closed flag can only be updated via updating the purchase order status to a closed/open status.
    attr_accessor :closed_flag

    #  Required On Updates;
    attr_accessor :po_date

    #  Required On Updates; Max length: 50;
    attr_accessor :po_number

    #  Max length: 50;
    attr_accessor :tracking_number

    # Determines whether or not to update all of the shipment info for each associated line item when new shipment info is passed in
    attr_accessor :update_shipment_info

    # Determines whether or not to update vendor order number for each associated line item when new vendor order number is passed in
    attr_accessor :update_vendor_order_number

    #  Max length: 50;
    attr_accessor :vendor_invoice_number

    #  Max length: 50;
    attr_accessor :vendor_order_number

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        business_unit_id: :businessUnitId,
        cancel_reason: :cancelReason,
        closed_flag: :closedFlag,
        customer_city: :customerCity,
        customer_company: :customerCompany,
        customer_contact: :customerContact,
        customer_country: :customerCountry,
        customer_extension: :customerExtension,
        customer_name: :customerName,
        customer_phone: :customerPhone,
        customer_site: :customerSite,
        customer_site_name: :customerSiteName,
        customer_state: :customerState,
        customer_street_line1: :customerStreetLine1,
        customer_street_line2: :customerStreetLine2,
        customer_zip: :customerZip,
        date_closed: :dateClosed,
        drop_ship_customer_flag: :dropShipCustomerFlag,
        entered_by: :enteredBy,
        freight_cost: :freightCost,
        freight_packing_slip: :freightPackingSlip,
        freight_tax_total: :freightTaxTotal,
        internal_notes: :internalNotes,
        location_id: :locationId,
        po_date: :poDate,
        po_number: :poNumber,
        sales_tax: :salesTax,
        shipment_date: :shipmentDate,
        shipment_method: :shipmentMethod,
        shipping_instructions: :shippingInstructions,
        status: :status,
        sub_total: :subTotal,
        tax_code: :taxCode,
        tax_freight_flag: :taxFreightFlag,
        tax_po_flag: :taxPoFlag,
        terms: :terms,
        total: :total,
        tracking_number: :trackingNumber,
        update_shipment_info: :updateShipmentInfo,
        update_vendor_order_number: :updateVendorOrderNumber,
        vendor_company: :vendorCompany,
        vendor_contact: :vendorContact,
        vendor_invoice_date: :vendorInvoiceDate,
        vendor_invoice_number: :vendorInvoiceNumber,
        vendor_order_number: :vendorOrderNumber,
        vendor_site: :vendorSite,
        warehouse: :warehouse,
        currency: :currency,
        _info: :_info,
        custom_fields: :customFields
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        business_unit_id: :Integer,
        cancel_reason: :String,
        closed_flag: :Boolean,
        customer_city: :String,
        customer_company: :CompanyReference,
        customer_contact: :ContactReference,
        customer_country: :CountryReference,
        customer_extension: :String,
        customer_name: :String,
        customer_phone: :String,
        customer_site: :SiteReference,
        customer_site_name: :String,
        customer_state: :String,
        customer_street_line1: :String,
        customer_street_line2: :String,
        customer_zip: :String,
        date_closed: :Time,
        drop_ship_customer_flag: :Boolean,
        entered_by: :String,
        freight_cost: :Float,
        freight_packing_slip: :String,
        freight_tax_total: :Float,
        internal_notes: :String,
        location_id: :Integer,
        po_date: :Time,
        po_number: :String,
        sales_tax: :Float,
        shipment_date: :Time,
        shipment_method: :ShipmentMethodReference,
        shipping_instructions: :String,
        status: :PurchaseOrderStatusReference,
        sub_total: :Float,
        tax_code: :TaxCodeReference,
        tax_freight_flag: :Boolean,
        tax_po_flag: :Boolean,
        terms: :BillingTermsReference,
        total: :Float,
        tracking_number: :String,
        update_shipment_info: :Boolean,
        update_vendor_order_number: :Boolean,
        vendor_company: :CompanyReference,
        vendor_contact: :ContactReference,
        vendor_invoice_date: :Time,
        vendor_invoice_number: :String,
        vendor_order_number: :String,
        vendor_site: :SiteReference,
        warehouse: :WarehouseReference,
        currency: :CurrencyReference,
        _info: :'Hash<String, String>',
        custom_fields: :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                business_unit_id
                closed_flag
                drop_ship_customer_flag
                freight_cost
                freight_tax_total
                location_id
                sales_tax
                sub_total
                tax_freight_flag
                tax_po_flag
                total
                update_shipment_info
                update_vendor_order_number
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::PurchaseOrder` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::PurchaseOrder`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.business_unit_id = attributes[:business_unit_id] if attributes.key?(:business_unit_id)

      self.cancel_reason = attributes[:cancel_reason] if attributes.key?(:cancel_reason)

      self.closed_flag = attributes[:closed_flag] if attributes.key?(:closed_flag)

      self.customer_city = attributes[:customer_city] if attributes.key?(:customer_city)

      self.customer_company = attributes[:customer_company] if attributes.key?(:customer_company)

      self.customer_contact = attributes[:customer_contact] if attributes.key?(:customer_contact)

      self.customer_country = attributes[:customer_country] if attributes.key?(:customer_country)

      self.customer_extension = attributes[:customer_extension] if attributes.key?(:customer_extension)

      self.customer_name = attributes[:customer_name] if attributes.key?(:customer_name)

      self.customer_phone = attributes[:customer_phone] if attributes.key?(:customer_phone)

      self.customer_site = attributes[:customer_site] if attributes.key?(:customer_site)

      self.customer_site_name = attributes[:customer_site_name] if attributes.key?(:customer_site_name)

      self.customer_state = attributes[:customer_state] if attributes.key?(:customer_state)

      self.customer_street_line1 = attributes[:customer_street_line1] if attributes.key?(:customer_street_line1)

      self.customer_street_line2 = attributes[:customer_street_line2] if attributes.key?(:customer_street_line2)

      self.customer_zip = attributes[:customer_zip] if attributes.key?(:customer_zip)

      self.date_closed = attributes[:date_closed] if attributes.key?(:date_closed)

      self.drop_ship_customer_flag = attributes[:drop_ship_customer_flag] if attributes.key?(:drop_ship_customer_flag)

      self.entered_by = attributes[:entered_by] if attributes.key?(:entered_by)

      self.freight_cost = attributes[:freight_cost] if attributes.key?(:freight_cost)

      self.freight_packing_slip = attributes[:freight_packing_slip] if attributes.key?(:freight_packing_slip)

      self.freight_tax_total = attributes[:freight_tax_total] if attributes.key?(:freight_tax_total)

      self.internal_notes = attributes[:internal_notes] if attributes.key?(:internal_notes)

      self.location_id = attributes[:location_id] if attributes.key?(:location_id)

      self.po_date = attributes[:po_date] if attributes.key?(:po_date)

      self.po_number = attributes[:po_number] if attributes.key?(:po_number)

      self.sales_tax = attributes[:sales_tax] if attributes.key?(:sales_tax)

      self.shipment_date = attributes[:shipment_date] if attributes.key?(:shipment_date)

      self.shipment_method = attributes[:shipment_method] if attributes.key?(:shipment_method)

      self.shipping_instructions = attributes[:shipping_instructions] if attributes.key?(:shipping_instructions)

      self.status = attributes[:status] if attributes.key?(:status)

      self.sub_total = attributes[:sub_total] if attributes.key?(:sub_total)

      self.tax_code = attributes[:tax_code] if attributes.key?(:tax_code)

      self.tax_freight_flag = attributes[:tax_freight_flag] if attributes.key?(:tax_freight_flag)

      self.tax_po_flag = attributes[:tax_po_flag] if attributes.key?(:tax_po_flag)

      self.terms = attributes[:terms] if attributes.key?(:terms)

      self.total = attributes[:total] if attributes.key?(:total)

      self.tracking_number = attributes[:tracking_number] if attributes.key?(:tracking_number)

      self.update_shipment_info = attributes[:update_shipment_info] if attributes.key?(:update_shipment_info)

      self.update_vendor_order_number = attributes[:update_vendor_order_number] if attributes.key?(:update_vendor_order_number)

      self.vendor_company = attributes[:vendor_company] if attributes.key?(:vendor_company)

      self.vendor_contact = attributes[:vendor_contact] if attributes.key?(:vendor_contact)

      self.vendor_invoice_date = attributes[:vendor_invoice_date] if attributes.key?(:vendor_invoice_date)

      self.vendor_invoice_number = attributes[:vendor_invoice_number] if attributes.key?(:vendor_invoice_number)

      self.vendor_order_number = attributes[:vendor_order_number] if attributes.key?(:vendor_order_number)

      self.vendor_site = attributes[:vendor_site] if attributes.key?(:vendor_site)

      self.warehouse = attributes[:warehouse] if attributes.key?(:warehouse)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      if attributes.key?(:_info) && (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end

      return unless attributes.key?(:custom_fields)
      return unless (value = attributes[:custom_fields]).is_a?(Array)

      self.custom_fields = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        business_unit_id == other.business_unit_id &&
        cancel_reason == other.cancel_reason &&
        closed_flag == other.closed_flag &&
        customer_city == other.customer_city &&
        customer_company == other.customer_company &&
        customer_contact == other.customer_contact &&
        customer_country == other.customer_country &&
        customer_extension == other.customer_extension &&
        customer_name == other.customer_name &&
        customer_phone == other.customer_phone &&
        customer_site == other.customer_site &&
        customer_site_name == other.customer_site_name &&
        customer_state == other.customer_state &&
        customer_street_line1 == other.customer_street_line1 &&
        customer_street_line2 == other.customer_street_line2 &&
        customer_zip == other.customer_zip &&
        date_closed == other.date_closed &&
        drop_ship_customer_flag == other.drop_ship_customer_flag &&
        entered_by == other.entered_by &&
        freight_cost == other.freight_cost &&
        freight_packing_slip == other.freight_packing_slip &&
        freight_tax_total == other.freight_tax_total &&
        internal_notes == other.internal_notes &&
        location_id == other.location_id &&
        po_date == other.po_date &&
        po_number == other.po_number &&
        sales_tax == other.sales_tax &&
        shipment_date == other.shipment_date &&
        shipment_method == other.shipment_method &&
        shipping_instructions == other.shipping_instructions &&
        status == other.status &&
        sub_total == other.sub_total &&
        tax_code == other.tax_code &&
        tax_freight_flag == other.tax_freight_flag &&
        tax_po_flag == other.tax_po_flag &&
        terms == other.terms &&
        total == other.total &&
        tracking_number == other.tracking_number &&
        update_shipment_info == other.update_shipment_info &&
        update_vendor_order_number == other.update_vendor_order_number &&
        vendor_company == other.vendor_company &&
        vendor_contact == other.vendor_contact &&
        vendor_invoice_date == other.vendor_invoice_date &&
        vendor_invoice_number == other.vendor_invoice_number &&
        vendor_order_number == other.vendor_order_number &&
        vendor_site == other.vendor_site &&
        warehouse == other.warehouse &&
        currency == other.currency &&
        _info == other._info &&
        custom_fields == other.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, business_unit_id, cancel_reason, closed_flag, customer_city, customer_company, customer_contact, customer_country, customer_extension, customer_name, customer_phone, customer_site, customer_site_name, customer_state, customer_street_line1, customer_street_line2, customer_zip, date_closed, drop_ship_customer_flag, entered_by, freight_cost, freight_packing_slip, freight_tax_total, internal_notes, location_id, po_date, po_number, sales_tax, shipment_date, shipment_method, shipping_instructions, status, sub_total, tax_code, tax_freight_flag, tax_po_flag, terms, total, tracking_number, update_shipment_info, update_vendor_order_number, vendor_company, vendor_contact, vendor_invoice_date, vendor_invoice_number, vendor_order_number, vendor_site, warehouse, currency, _info, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
