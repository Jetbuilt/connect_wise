=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class BillingSetup
    #  Max length: 50;
    attr_accessor :remit_name

    attr_accessor :location

    #  Max length: 50;
    attr_accessor :invoice_title

    #  Max length: 50;
    attr_accessor :payable_name

    attr_accessor :email_template

    attr_accessor :id

    #  Max length: 50;
    attr_accessor :address_one

    #  Max length: 50;
    attr_accessor :address_two

    #  Max length: 50;
    attr_accessor :city

    attr_accessor :state

    #  Max length: 12;
    attr_accessor :zip

    attr_accessor :country

    #  Max length: 15;
    attr_accessor :phone

    #  Max length: 4000;
    attr_accessor :topcomment

    #  Max length: 500;
    attr_accessor :invoice_footer

    #  Max length: 1000;
    attr_accessor :quote_footer

    attr_accessor :overall_invoice_default

    attr_accessor :standard_invoice_actual

    attr_accessor :standard_invoice_fixed

    attr_accessor :progress_invoice

    attr_accessor :agreement_invoice

    attr_accessor :credit_memo_invoice

    attr_accessor :down_payment_invoice

    attr_accessor :misc_invoice

    attr_accessor :sales_order_invoice

    attr_accessor :exclude_do_not_bill_time_flag

    attr_accessor :exclude_do_not_bill_expense_flag

    attr_accessor :exclude_do_not_bill_product_flag

    attr_accessor :prefix_suffix_flag

    #  Max length: 5;
    attr_accessor :prefix_suffix_text

    attr_accessor :charge_adj_to_firm_flag

    attr_accessor :no_watermark_flag

    attr_accessor :display_tax_flag

    attr_accessor :allow_restricted_dept_on_routing_flag

    attr_accessor :bill_ticket_separately_flag

    attr_accessor :bill_ticket_complete_flag

    attr_accessor :bill_ticket_unapproved_flag

    attr_accessor :bill_project_complete_flag

    attr_accessor :bill_project_unapproved_flag

    attr_accessor :progress_time_flag

    attr_accessor :restrict_project_downpayment_flag

    attr_accessor :bill_sales_order_complete_flag

    attr_accessor :bill_product_after_ship_flag

    attr_accessor :restrict_downpayment_flag

    attr_accessor :copy_non_service_products_flag

    attr_accessor :copy_service_products_flag

    attr_accessor :copy_agreement_products_flag

    attr_accessor :print_logo_flag

    attr_accessor :read_receipt_flag

    attr_accessor :delivery_receipt_flag

    attr_accessor :disable_routing_email_flag

    attr_accessor :localized_country

    #  Max length: 50;
    attr_accessor :business_number

    attr_accessor :currency

    #  Max length: 50;
    attr_accessor :custom_label

    #  Max length: 500;
    attr_accessor :custom_text

    #  Max length: 250;
    attr_accessor :company_code

    attr_accessor :exclude_avalara_flag

    attr_accessor :_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'remit_name' => :'remitName',
        :'location' => :'location',
        :'invoice_title' => :'invoiceTitle',
        :'payable_name' => :'payableName',
        :'email_template' => :'emailTemplate',
        :'id' => :'id',
        :'address_one' => :'addressOne',
        :'address_two' => :'addressTwo',
        :'city' => :'city',
        :'state' => :'state',
        :'zip' => :'zip',
        :'country' => :'country',
        :'phone' => :'phone',
        :'topcomment' => :'topcomment',
        :'invoice_footer' => :'invoiceFooter',
        :'quote_footer' => :'quoteFooter',
        :'overall_invoice_default' => :'overallInvoiceDefault',
        :'standard_invoice_actual' => :'standardInvoiceActual',
        :'standard_invoice_fixed' => :'standardInvoiceFixed',
        :'progress_invoice' => :'progressInvoice',
        :'agreement_invoice' => :'agreementInvoice',
        :'credit_memo_invoice' => :'creditMemoInvoice',
        :'down_payment_invoice' => :'downPaymentInvoice',
        :'misc_invoice' => :'miscInvoice',
        :'sales_order_invoice' => :'salesOrderInvoice',
        :'exclude_do_not_bill_time_flag' => :'excludeDoNotBillTimeFlag',
        :'exclude_do_not_bill_expense_flag' => :'excludeDoNotBillExpenseFlag',
        :'exclude_do_not_bill_product_flag' => :'excludeDoNotBillProductFlag',
        :'prefix_suffix_flag' => :'prefixSuffixFlag',
        :'prefix_suffix_text' => :'prefixSuffixText',
        :'charge_adj_to_firm_flag' => :'chargeAdjToFirmFlag',
        :'no_watermark_flag' => :'noWatermarkFlag',
        :'display_tax_flag' => :'displayTaxFlag',
        :'allow_restricted_dept_on_routing_flag' => :'allowRestrictedDeptOnRoutingFlag',
        :'bill_ticket_separately_flag' => :'billTicketSeparatelyFlag',
        :'bill_ticket_complete_flag' => :'billTicketCompleteFlag',
        :'bill_ticket_unapproved_flag' => :'billTicketUnapprovedFlag',
        :'bill_project_complete_flag' => :'billProjectCompleteFlag',
        :'bill_project_unapproved_flag' => :'billProjectUnapprovedFlag',
        :'progress_time_flag' => :'progressTimeFlag',
        :'restrict_project_downpayment_flag' => :'restrictProjectDownpaymentFlag',
        :'bill_sales_order_complete_flag' => :'billSalesOrderCompleteFlag',
        :'bill_product_after_ship_flag' => :'billProductAfterShipFlag',
        :'restrict_downpayment_flag' => :'restrictDownpaymentFlag',
        :'copy_non_service_products_flag' => :'copyNonServiceProductsFlag',
        :'copy_service_products_flag' => :'copyServiceProductsFlag',
        :'copy_agreement_products_flag' => :'copyAgreementProductsFlag',
        :'print_logo_flag' => :'printLogoFlag',
        :'read_receipt_flag' => :'readReceiptFlag',
        :'delivery_receipt_flag' => :'deliveryReceiptFlag',
        :'disable_routing_email_flag' => :'disableRoutingEmailFlag',
        :'localized_country' => :'localizedCountry',
        :'business_number' => :'businessNumber',
        :'currency' => :'currency',
        :'custom_label' => :'customLabel',
        :'custom_text' => :'customText',
        :'company_code' => :'companyCode',
        :'exclude_avalara_flag' => :'excludeAvalaraFlag',
        :'_info' => :'_info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'remit_name' => :'String',
        :'location' => :'SystemLocationReference',
        :'invoice_title' => :'String',
        :'payable_name' => :'String',
        :'email_template' => :'EmailTemplateReference',
        :'id' => :'Integer',
        :'address_one' => :'String',
        :'address_two' => :'String',
        :'city' => :'String',
        :'state' => :'StateReference',
        :'zip' => :'String',
        :'country' => :'CountryReference',
        :'phone' => :'String',
        :'topcomment' => :'String',
        :'invoice_footer' => :'String',
        :'quote_footer' => :'String',
        :'overall_invoice_default' => :'InvoiceTemplateReference',
        :'standard_invoice_actual' => :'InvoiceTemplateReference',
        :'standard_invoice_fixed' => :'InvoiceTemplateReference',
        :'progress_invoice' => :'InvoiceTemplateReference',
        :'agreement_invoice' => :'InvoiceTemplateReference',
        :'credit_memo_invoice' => :'InvoiceTemplateReference',
        :'down_payment_invoice' => :'InvoiceTemplateReference',
        :'misc_invoice' => :'InvoiceTemplateReference',
        :'sales_order_invoice' => :'InvoiceTemplateReference',
        :'exclude_do_not_bill_time_flag' => :'Boolean',
        :'exclude_do_not_bill_expense_flag' => :'Boolean',
        :'exclude_do_not_bill_product_flag' => :'Boolean',
        :'prefix_suffix_flag' => :'String',
        :'prefix_suffix_text' => :'String',
        :'charge_adj_to_firm_flag' => :'Boolean',
        :'no_watermark_flag' => :'Boolean',
        :'display_tax_flag' => :'Boolean',
        :'allow_restricted_dept_on_routing_flag' => :'Boolean',
        :'bill_ticket_separately_flag' => :'Boolean',
        :'bill_ticket_complete_flag' => :'Boolean',
        :'bill_ticket_unapproved_flag' => :'Boolean',
        :'bill_project_complete_flag' => :'Boolean',
        :'bill_project_unapproved_flag' => :'Boolean',
        :'progress_time_flag' => :'Boolean',
        :'restrict_project_downpayment_flag' => :'Boolean',
        :'bill_sales_order_complete_flag' => :'Boolean',
        :'bill_product_after_ship_flag' => :'Boolean',
        :'restrict_downpayment_flag' => :'Boolean',
        :'copy_non_service_products_flag' => :'Boolean',
        :'copy_service_products_flag' => :'Boolean',
        :'copy_agreement_products_flag' => :'Boolean',
        :'print_logo_flag' => :'Boolean',
        :'read_receipt_flag' => :'Boolean',
        :'delivery_receipt_flag' => :'Boolean',
        :'disable_routing_email_flag' => :'Boolean',
        :'localized_country' => :'CountryReference',
        :'business_number' => :'String',
        :'currency' => :'CurrencyReference',
        :'custom_label' => :'String',
        :'custom_text' => :'String',
        :'company_code' => :'String',
        :'exclude_avalara_flag' => :'Boolean',
        :'_info' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'exclude_do_not_bill_time_flag',
        :'exclude_do_not_bill_expense_flag',
        :'exclude_do_not_bill_product_flag',
        :'prefix_suffix_flag',
        :'charge_adj_to_firm_flag',
        :'no_watermark_flag',
        :'display_tax_flag',
        :'allow_restricted_dept_on_routing_flag',
        :'bill_ticket_separately_flag',
        :'bill_ticket_complete_flag',
        :'bill_ticket_unapproved_flag',
        :'bill_project_complete_flag',
        :'bill_project_unapproved_flag',
        :'progress_time_flag',
        :'restrict_project_downpayment_flag',
        :'bill_sales_order_complete_flag',
        :'bill_product_after_ship_flag',
        :'restrict_downpayment_flag',
        :'copy_non_service_products_flag',
        :'copy_service_products_flag',
        :'copy_agreement_products_flag',
        :'print_logo_flag',
        :'read_receipt_flag',
        :'delivery_receipt_flag',
        :'disable_routing_email_flag',
        :'exclude_avalara_flag',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::BillingSetup` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::BillingSetup`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'remit_name')
        self.remit_name = attributes[:'remit_name']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'invoice_title')
        self.invoice_title = attributes[:'invoice_title']
      end

      if attributes.key?(:'payable_name')
        self.payable_name = attributes[:'payable_name']
      end

      if attributes.key?(:'email_template')
        self.email_template = attributes[:'email_template']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'address_one')
        self.address_one = attributes[:'address_one']
      end

      if attributes.key?(:'address_two')
        self.address_two = attributes[:'address_two']
      end

      if attributes.key?(:'city')
        self.city = attributes[:'city']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'zip')
        self.zip = attributes[:'zip']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'topcomment')
        self.topcomment = attributes[:'topcomment']
      end

      if attributes.key?(:'invoice_footer')
        self.invoice_footer = attributes[:'invoice_footer']
      end

      if attributes.key?(:'quote_footer')
        self.quote_footer = attributes[:'quote_footer']
      end

      if attributes.key?(:'overall_invoice_default')
        self.overall_invoice_default = attributes[:'overall_invoice_default']
      end

      if attributes.key?(:'standard_invoice_actual')
        self.standard_invoice_actual = attributes[:'standard_invoice_actual']
      end

      if attributes.key?(:'standard_invoice_fixed')
        self.standard_invoice_fixed = attributes[:'standard_invoice_fixed']
      end

      if attributes.key?(:'progress_invoice')
        self.progress_invoice = attributes[:'progress_invoice']
      end

      if attributes.key?(:'agreement_invoice')
        self.agreement_invoice = attributes[:'agreement_invoice']
      end

      if attributes.key?(:'credit_memo_invoice')
        self.credit_memo_invoice = attributes[:'credit_memo_invoice']
      end

      if attributes.key?(:'down_payment_invoice')
        self.down_payment_invoice = attributes[:'down_payment_invoice']
      end

      if attributes.key?(:'misc_invoice')
        self.misc_invoice = attributes[:'misc_invoice']
      end

      if attributes.key?(:'sales_order_invoice')
        self.sales_order_invoice = attributes[:'sales_order_invoice']
      end

      if attributes.key?(:'exclude_do_not_bill_time_flag')
        self.exclude_do_not_bill_time_flag = attributes[:'exclude_do_not_bill_time_flag']
      end

      if attributes.key?(:'exclude_do_not_bill_expense_flag')
        self.exclude_do_not_bill_expense_flag = attributes[:'exclude_do_not_bill_expense_flag']
      end

      if attributes.key?(:'exclude_do_not_bill_product_flag')
        self.exclude_do_not_bill_product_flag = attributes[:'exclude_do_not_bill_product_flag']
      end

      if attributes.key?(:'prefix_suffix_flag')
        self.prefix_suffix_flag = attributes[:'prefix_suffix_flag']
      end

      if attributes.key?(:'prefix_suffix_text')
        self.prefix_suffix_text = attributes[:'prefix_suffix_text']
      end

      if attributes.key?(:'charge_adj_to_firm_flag')
        self.charge_adj_to_firm_flag = attributes[:'charge_adj_to_firm_flag']
      end

      if attributes.key?(:'no_watermark_flag')
        self.no_watermark_flag = attributes[:'no_watermark_flag']
      end

      if attributes.key?(:'display_tax_flag')
        self.display_tax_flag = attributes[:'display_tax_flag']
      end

      if attributes.key?(:'allow_restricted_dept_on_routing_flag')
        self.allow_restricted_dept_on_routing_flag = attributes[:'allow_restricted_dept_on_routing_flag']
      end

      if attributes.key?(:'bill_ticket_separately_flag')
        self.bill_ticket_separately_flag = attributes[:'bill_ticket_separately_flag']
      end

      if attributes.key?(:'bill_ticket_complete_flag')
        self.bill_ticket_complete_flag = attributes[:'bill_ticket_complete_flag']
      end

      if attributes.key?(:'bill_ticket_unapproved_flag')
        self.bill_ticket_unapproved_flag = attributes[:'bill_ticket_unapproved_flag']
      end

      if attributes.key?(:'bill_project_complete_flag')
        self.bill_project_complete_flag = attributes[:'bill_project_complete_flag']
      end

      if attributes.key?(:'bill_project_unapproved_flag')
        self.bill_project_unapproved_flag = attributes[:'bill_project_unapproved_flag']
      end

      if attributes.key?(:'progress_time_flag')
        self.progress_time_flag = attributes[:'progress_time_flag']
      end

      if attributes.key?(:'restrict_project_downpayment_flag')
        self.restrict_project_downpayment_flag = attributes[:'restrict_project_downpayment_flag']
      end

      if attributes.key?(:'bill_sales_order_complete_flag')
        self.bill_sales_order_complete_flag = attributes[:'bill_sales_order_complete_flag']
      end

      if attributes.key?(:'bill_product_after_ship_flag')
        self.bill_product_after_ship_flag = attributes[:'bill_product_after_ship_flag']
      end

      if attributes.key?(:'restrict_downpayment_flag')
        self.restrict_downpayment_flag = attributes[:'restrict_downpayment_flag']
      end

      if attributes.key?(:'copy_non_service_products_flag')
        self.copy_non_service_products_flag = attributes[:'copy_non_service_products_flag']
      end

      if attributes.key?(:'copy_service_products_flag')
        self.copy_service_products_flag = attributes[:'copy_service_products_flag']
      end

      if attributes.key?(:'copy_agreement_products_flag')
        self.copy_agreement_products_flag = attributes[:'copy_agreement_products_flag']
      end

      if attributes.key?(:'print_logo_flag')
        self.print_logo_flag = attributes[:'print_logo_flag']
      end

      if attributes.key?(:'read_receipt_flag')
        self.read_receipt_flag = attributes[:'read_receipt_flag']
      end

      if attributes.key?(:'delivery_receipt_flag')
        self.delivery_receipt_flag = attributes[:'delivery_receipt_flag']
      end

      if attributes.key?(:'disable_routing_email_flag')
        self.disable_routing_email_flag = attributes[:'disable_routing_email_flag']
      end

      if attributes.key?(:'localized_country')
        self.localized_country = attributes[:'localized_country']
      end

      if attributes.key?(:'business_number')
        self.business_number = attributes[:'business_number']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'custom_label')
        self.custom_label = attributes[:'custom_label']
      end

      if attributes.key?(:'custom_text')
        self.custom_text = attributes[:'custom_text']
      end

      if attributes.key?(:'company_code')
        self.company_code = attributes[:'company_code']
      end

      if attributes.key?(:'exclude_avalara_flag')
        self.exclude_avalara_flag = attributes[:'exclude_avalara_flag']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @remit_name.nil?
        invalid_properties.push('invalid value for "remit_name", remit_name cannot be nil.')
      end

      if @location.nil?
        invalid_properties.push('invalid value for "location", location cannot be nil.')
      end

      if @invoice_title.nil?
        invalid_properties.push('invalid value for "invoice_title", invoice_title cannot be nil.')
      end

      if @payable_name.nil?
        invalid_properties.push('invalid value for "payable_name", payable_name cannot be nil.')
      end

      if @email_template.nil?
        invalid_properties.push('invalid value for "email_template", email_template cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @remit_name.nil?
      return false if @location.nil?
      return false if @invoice_title.nil?
      return false if @payable_name.nil?
      return false if @email_template.nil?
      prefix_suffix_flag_validator = EnumAttributeValidator.new('String', ["Prefix", "Suffix"])
      return false unless prefix_suffix_flag_validator.valid?(@prefix_suffix_flag)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] prefix_suffix_flag Object to be assigned
    def prefix_suffix_flag=(prefix_suffix_flag)
      validator = EnumAttributeValidator.new('String', ["Prefix", "Suffix"])
      unless validator.valid?(prefix_suffix_flag)
        fail ArgumentError, "invalid value for \"prefix_suffix_flag\", must be one of #{validator.allowable_values}."
      end
      @prefix_suffix_flag = prefix_suffix_flag
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          remit_name == o.remit_name &&
          location == o.location &&
          invoice_title == o.invoice_title &&
          payable_name == o.payable_name &&
          email_template == o.email_template &&
          id == o.id &&
          address_one == o.address_one &&
          address_two == o.address_two &&
          city == o.city &&
          state == o.state &&
          zip == o.zip &&
          country == o.country &&
          phone == o.phone &&
          topcomment == o.topcomment &&
          invoice_footer == o.invoice_footer &&
          quote_footer == o.quote_footer &&
          overall_invoice_default == o.overall_invoice_default &&
          standard_invoice_actual == o.standard_invoice_actual &&
          standard_invoice_fixed == o.standard_invoice_fixed &&
          progress_invoice == o.progress_invoice &&
          agreement_invoice == o.agreement_invoice &&
          credit_memo_invoice == o.credit_memo_invoice &&
          down_payment_invoice == o.down_payment_invoice &&
          misc_invoice == o.misc_invoice &&
          sales_order_invoice == o.sales_order_invoice &&
          exclude_do_not_bill_time_flag == o.exclude_do_not_bill_time_flag &&
          exclude_do_not_bill_expense_flag == o.exclude_do_not_bill_expense_flag &&
          exclude_do_not_bill_product_flag == o.exclude_do_not_bill_product_flag &&
          prefix_suffix_flag == o.prefix_suffix_flag &&
          prefix_suffix_text == o.prefix_suffix_text &&
          charge_adj_to_firm_flag == o.charge_adj_to_firm_flag &&
          no_watermark_flag == o.no_watermark_flag &&
          display_tax_flag == o.display_tax_flag &&
          allow_restricted_dept_on_routing_flag == o.allow_restricted_dept_on_routing_flag &&
          bill_ticket_separately_flag == o.bill_ticket_separately_flag &&
          bill_ticket_complete_flag == o.bill_ticket_complete_flag &&
          bill_ticket_unapproved_flag == o.bill_ticket_unapproved_flag &&
          bill_project_complete_flag == o.bill_project_complete_flag &&
          bill_project_unapproved_flag == o.bill_project_unapproved_flag &&
          progress_time_flag == o.progress_time_flag &&
          restrict_project_downpayment_flag == o.restrict_project_downpayment_flag &&
          bill_sales_order_complete_flag == o.bill_sales_order_complete_flag &&
          bill_product_after_ship_flag == o.bill_product_after_ship_flag &&
          restrict_downpayment_flag == o.restrict_downpayment_flag &&
          copy_non_service_products_flag == o.copy_non_service_products_flag &&
          copy_service_products_flag == o.copy_service_products_flag &&
          copy_agreement_products_flag == o.copy_agreement_products_flag &&
          print_logo_flag == o.print_logo_flag &&
          read_receipt_flag == o.read_receipt_flag &&
          delivery_receipt_flag == o.delivery_receipt_flag &&
          disable_routing_email_flag == o.disable_routing_email_flag &&
          localized_country == o.localized_country &&
          business_number == o.business_number &&
          currency == o.currency &&
          custom_label == o.custom_label &&
          custom_text == o.custom_text &&
          company_code == o.company_code &&
          exclude_avalara_flag == o.exclude_avalara_flag &&
          _info == o._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [remit_name, location, invoice_title, payable_name, email_template, id, address_one, address_two, city, state, zip, country, phone, topcomment, invoice_footer, quote_footer, overall_invoice_default, standard_invoice_actual, standard_invoice_fixed, progress_invoice, agreement_invoice, credit_memo_invoice, down_payment_invoice, misc_invoice, sales_order_invoice, exclude_do_not_bill_time_flag, exclude_do_not_bill_expense_flag, exclude_do_not_bill_product_flag, prefix_suffix_flag, prefix_suffix_text, charge_adj_to_firm_flag, no_watermark_flag, display_tax_flag, allow_restricted_dept_on_routing_flag, bill_ticket_separately_flag, bill_ticket_complete_flag, bill_ticket_unapproved_flag, bill_project_complete_flag, bill_project_unapproved_flag, progress_time_flag, restrict_project_downpayment_flag, bill_sales_order_complete_flag, bill_product_after_ship_flag, restrict_downpayment_flag, copy_non_service_products_flag, copy_service_products_flag, copy_agreement_products_flag, print_logo_flag, read_receipt_flag, delivery_receipt_flag, disable_routing_email_flag, localized_country, business_number, currency, custom_label, custom_text, company_code, exclude_avalara_flag, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
