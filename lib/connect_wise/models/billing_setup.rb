# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class BillingSetup
    #  Max length: 50;
    attr_accessor :remit_name

    attr_accessor :location, :overall_invoice_default, :email_template, :id, :state, :country, :standard_invoice_actual, :standard_invoice_fixed, :progress_invoice, :agreement_invoice, :credit_memo_invoice, :down_payment_invoice, :misc_invoice, :sales_order_invoice, :exclude_do_not_bill_time_flag, :exclude_do_not_bill_expense_flag, :exclude_do_not_bill_product_flag, :prefix_suffix_flag, :charge_adj_to_firm_flag, :no_watermark_flag, :display_tax_flag, :allow_restricted_dept_on_routing_flag, :bill_ticket_separately_flag, :bill_ticket_complete_flag, :bill_ticket_unapproved_flag, :bill_project_complete_flag, :bill_project_unapproved_flag, :progress_time_flag, :restrict_project_downpayment_flag, :bill_sales_order_complete_flag, :bill_product_after_ship_flag, :restrict_downpayment_flag, :copy_non_service_products_flag, :copy_service_products_flag, :copy_agreement_products_flag, :print_logo_flag, :read_receipt_flag, :delivery_receipt_flag, :attach_xml_invoice_flag, :disable_routing_email_flag, :localized_country, :currency, :exclude_avalara_flag, :_info

    #  Max length: 50;
    attr_accessor :invoice_title

    #  Max length: 50;
    attr_accessor :payable_name

    #  Max length: 50;
    attr_accessor :address_one

    #  Max length: 50;
    attr_accessor :address_two

    #  Max length: 50;
    attr_accessor :city

    #  Max length: 12;
    attr_accessor :zip

    #  Max length: 15;
    attr_accessor :phone

    #  Max length: 4000;
    attr_accessor :topcomment

    #  Max length: 500;
    attr_accessor :invoice_footer

    #  Max length: 1000;
    attr_accessor :quote_footer

    #  Max length: 5;
    attr_accessor :prefix_suffix_text

    #  Max length: 50;
    attr_accessor :business_number

    #  Max length: 50;
    attr_accessor :custom_label

    #  Max length: 500;
    attr_accessor :custom_text

    #  Max length: 250;
    attr_accessor :company_code

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        remit_name: :remitName,
        location: :location,
        invoice_title: :invoiceTitle,
        payable_name: :payableName,
        overall_invoice_default: :overallInvoiceDefault,
        email_template: :emailTemplate,
        id: :id,
        address_one: :addressOne,
        address_two: :addressTwo,
        city: :city,
        state: :state,
        zip: :zip,
        country: :country,
        phone: :phone,
        topcomment: :topcomment,
        invoice_footer: :invoiceFooter,
        quote_footer: :quoteFooter,
        standard_invoice_actual: :standardInvoiceActual,
        standard_invoice_fixed: :standardInvoiceFixed,
        progress_invoice: :progressInvoice,
        agreement_invoice: :agreementInvoice,
        credit_memo_invoice: :creditMemoInvoice,
        down_payment_invoice: :downPaymentInvoice,
        misc_invoice: :miscInvoice,
        sales_order_invoice: :salesOrderInvoice,
        exclude_do_not_bill_time_flag: :excludeDoNotBillTimeFlag,
        exclude_do_not_bill_expense_flag: :excludeDoNotBillExpenseFlag,
        exclude_do_not_bill_product_flag: :excludeDoNotBillProductFlag,
        prefix_suffix_flag: :prefixSuffixFlag,
        prefix_suffix_text: :prefixSuffixText,
        charge_adj_to_firm_flag: :chargeAdjToFirmFlag,
        no_watermark_flag: :noWatermarkFlag,
        display_tax_flag: :displayTaxFlag,
        allow_restricted_dept_on_routing_flag: :allowRestrictedDeptOnRoutingFlag,
        bill_ticket_separately_flag: :billTicketSeparatelyFlag,
        bill_ticket_complete_flag: :billTicketCompleteFlag,
        bill_ticket_unapproved_flag: :billTicketUnapprovedFlag,
        bill_project_complete_flag: :billProjectCompleteFlag,
        bill_project_unapproved_flag: :billProjectUnapprovedFlag,
        progress_time_flag: :progressTimeFlag,
        restrict_project_downpayment_flag: :restrictProjectDownpaymentFlag,
        bill_sales_order_complete_flag: :billSalesOrderCompleteFlag,
        bill_product_after_ship_flag: :billProductAfterShipFlag,
        restrict_downpayment_flag: :restrictDownpaymentFlag,
        copy_non_service_products_flag: :copyNonServiceProductsFlag,
        copy_service_products_flag: :copyServiceProductsFlag,
        copy_agreement_products_flag: :copyAgreementProductsFlag,
        print_logo_flag: :printLogoFlag,
        read_receipt_flag: :readReceiptFlag,
        delivery_receipt_flag: :deliveryReceiptFlag,
        attach_xml_invoice_flag: :attachXmlInvoiceFlag,
        disable_routing_email_flag: :disableRoutingEmailFlag,
        localized_country: :localizedCountry,
        business_number: :businessNumber,
        currency: :currency,
        custom_label: :customLabel,
        custom_text: :customText,
        company_code: :companyCode,
        exclude_avalara_flag: :excludeAvalaraFlag,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        remit_name: :String,
        location: :SystemLocationReference,
        invoice_title: :String,
        payable_name: :String,
        overall_invoice_default: :InvoiceTemplateReference,
        email_template: :EmailTemplateReference,
        id: :Integer,
        address_one: :String,
        address_two: :String,
        city: :String,
        state: :StateReference,
        zip: :String,
        country: :CountryReference,
        phone: :String,
        topcomment: :String,
        invoice_footer: :String,
        quote_footer: :String,
        standard_invoice_actual: :InvoiceTemplateReference,
        standard_invoice_fixed: :InvoiceTemplateReference,
        progress_invoice: :InvoiceTemplateReference,
        agreement_invoice: :InvoiceTemplateReference,
        credit_memo_invoice: :InvoiceTemplateReference,
        down_payment_invoice: :InvoiceTemplateReference,
        misc_invoice: :InvoiceTemplateReference,
        sales_order_invoice: :InvoiceTemplateReference,
        exclude_do_not_bill_time_flag: :Boolean,
        exclude_do_not_bill_expense_flag: :Boolean,
        exclude_do_not_bill_product_flag: :Boolean,
        prefix_suffix_flag: :String,
        prefix_suffix_text: :String,
        charge_adj_to_firm_flag: :Boolean,
        no_watermark_flag: :Boolean,
        display_tax_flag: :Boolean,
        allow_restricted_dept_on_routing_flag: :Boolean,
        bill_ticket_separately_flag: :Boolean,
        bill_ticket_complete_flag: :Boolean,
        bill_ticket_unapproved_flag: :Boolean,
        bill_project_complete_flag: :Boolean,
        bill_project_unapproved_flag: :Boolean,
        progress_time_flag: :Boolean,
        restrict_project_downpayment_flag: :Boolean,
        bill_sales_order_complete_flag: :Boolean,
        bill_product_after_ship_flag: :Boolean,
        restrict_downpayment_flag: :Boolean,
        copy_non_service_products_flag: :Boolean,
        copy_service_products_flag: :Boolean,
        copy_agreement_products_flag: :Boolean,
        print_logo_flag: :Boolean,
        read_receipt_flag: :Boolean,
        delivery_receipt_flag: :Boolean,
        attach_xml_invoice_flag: :Boolean,
        disable_routing_email_flag: :Boolean,
        localized_country: :CountryReference,
        business_number: :String,
        currency: :CurrencyReference,
        custom_label: :String,
        custom_text: :String,
        company_code: :String,
        exclude_avalara_flag: :Boolean,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                exclude_do_not_bill_time_flag
                exclude_do_not_bill_expense_flag
                exclude_do_not_bill_product_flag
                prefix_suffix_flag
                charge_adj_to_firm_flag
                no_watermark_flag
                display_tax_flag
                allow_restricted_dept_on_routing_flag
                bill_ticket_separately_flag
                bill_ticket_complete_flag
                bill_ticket_unapproved_flag
                bill_project_complete_flag
                bill_project_unapproved_flag
                progress_time_flag
                restrict_project_downpayment_flag
                bill_sales_order_complete_flag
                bill_product_after_ship_flag
                restrict_downpayment_flag
                copy_non_service_products_flag
                copy_service_products_flag
                copy_agreement_products_flag
                print_logo_flag
                read_receipt_flag
                delivery_receipt_flag
                attach_xml_invoice_flag
                disable_routing_email_flag
                exclude_avalara_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::BillingSetup` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::BillingSetup`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.remit_name = (attributes[:remit_name] if attributes.key?(:remit_name))

      self.location = (attributes[:location] if attributes.key?(:location))

      self.invoice_title = (attributes[:invoice_title] if attributes.key?(:invoice_title))

      self.payable_name = (attributes[:payable_name] if attributes.key?(:payable_name))

      self.overall_invoice_default = (attributes[:overall_invoice_default] if attributes.key?(:overall_invoice_default))

      self.email_template = (attributes[:email_template] if attributes.key?(:email_template))

      self.id = attributes[:id] if attributes.key?(:id)

      self.address_one = attributes[:address_one] if attributes.key?(:address_one)

      self.address_two = attributes[:address_two] if attributes.key?(:address_two)

      self.city = attributes[:city] if attributes.key?(:city)

      self.state = attributes[:state] if attributes.key?(:state)

      self.zip = attributes[:zip] if attributes.key?(:zip)

      self.country = attributes[:country] if attributes.key?(:country)

      self.phone = attributes[:phone] if attributes.key?(:phone)

      self.topcomment = attributes[:topcomment] if attributes.key?(:topcomment)

      self.invoice_footer = attributes[:invoice_footer] if attributes.key?(:invoice_footer)

      self.quote_footer = attributes[:quote_footer] if attributes.key?(:quote_footer)

      self.standard_invoice_actual = attributes[:standard_invoice_actual] if attributes.key?(:standard_invoice_actual)

      self.standard_invoice_fixed = attributes[:standard_invoice_fixed] if attributes.key?(:standard_invoice_fixed)

      self.progress_invoice = attributes[:progress_invoice] if attributes.key?(:progress_invoice)

      self.agreement_invoice = attributes[:agreement_invoice] if attributes.key?(:agreement_invoice)

      self.credit_memo_invoice = attributes[:credit_memo_invoice] if attributes.key?(:credit_memo_invoice)

      self.down_payment_invoice = attributes[:down_payment_invoice] if attributes.key?(:down_payment_invoice)

      self.misc_invoice = attributes[:misc_invoice] if attributes.key?(:misc_invoice)

      self.sales_order_invoice = attributes[:sales_order_invoice] if attributes.key?(:sales_order_invoice)

      self.exclude_do_not_bill_time_flag = attributes[:exclude_do_not_bill_time_flag] if attributes.key?(:exclude_do_not_bill_time_flag)

      self.exclude_do_not_bill_expense_flag = attributes[:exclude_do_not_bill_expense_flag] if attributes.key?(:exclude_do_not_bill_expense_flag)

      self.exclude_do_not_bill_product_flag = attributes[:exclude_do_not_bill_product_flag] if attributes.key?(:exclude_do_not_bill_product_flag)

      self.prefix_suffix_flag = attributes[:prefix_suffix_flag] if attributes.key?(:prefix_suffix_flag)

      self.prefix_suffix_text = attributes[:prefix_suffix_text] if attributes.key?(:prefix_suffix_text)

      self.charge_adj_to_firm_flag = attributes[:charge_adj_to_firm_flag] if attributes.key?(:charge_adj_to_firm_flag)

      self.no_watermark_flag = attributes[:no_watermark_flag] if attributes.key?(:no_watermark_flag)

      self.display_tax_flag = attributes[:display_tax_flag] if attributes.key?(:display_tax_flag)

      self.allow_restricted_dept_on_routing_flag = attributes[:allow_restricted_dept_on_routing_flag] if attributes.key?(:allow_restricted_dept_on_routing_flag)

      self.bill_ticket_separately_flag = attributes[:bill_ticket_separately_flag] if attributes.key?(:bill_ticket_separately_flag)

      self.bill_ticket_complete_flag = attributes[:bill_ticket_complete_flag] if attributes.key?(:bill_ticket_complete_flag)

      self.bill_ticket_unapproved_flag = attributes[:bill_ticket_unapproved_flag] if attributes.key?(:bill_ticket_unapproved_flag)

      self.bill_project_complete_flag = attributes[:bill_project_complete_flag] if attributes.key?(:bill_project_complete_flag)

      self.bill_project_unapproved_flag = attributes[:bill_project_unapproved_flag] if attributes.key?(:bill_project_unapproved_flag)

      self.progress_time_flag = attributes[:progress_time_flag] if attributes.key?(:progress_time_flag)

      self.restrict_project_downpayment_flag = attributes[:restrict_project_downpayment_flag] if attributes.key?(:restrict_project_downpayment_flag)

      self.bill_sales_order_complete_flag = attributes[:bill_sales_order_complete_flag] if attributes.key?(:bill_sales_order_complete_flag)

      self.bill_product_after_ship_flag = attributes[:bill_product_after_ship_flag] if attributes.key?(:bill_product_after_ship_flag)

      self.restrict_downpayment_flag = attributes[:restrict_downpayment_flag] if attributes.key?(:restrict_downpayment_flag)

      self.copy_non_service_products_flag = attributes[:copy_non_service_products_flag] if attributes.key?(:copy_non_service_products_flag)

      self.copy_service_products_flag = attributes[:copy_service_products_flag] if attributes.key?(:copy_service_products_flag)

      self.copy_agreement_products_flag = attributes[:copy_agreement_products_flag] if attributes.key?(:copy_agreement_products_flag)

      self.print_logo_flag = attributes[:print_logo_flag] if attributes.key?(:print_logo_flag)

      self.read_receipt_flag = attributes[:read_receipt_flag] if attributes.key?(:read_receipt_flag)

      self.delivery_receipt_flag = attributes[:delivery_receipt_flag] if attributes.key?(:delivery_receipt_flag)

      self.attach_xml_invoice_flag = attributes[:attach_xml_invoice_flag] if attributes.key?(:attach_xml_invoice_flag)

      self.disable_routing_email_flag = attributes[:disable_routing_email_flag] if attributes.key?(:disable_routing_email_flag)

      self.localized_country = attributes[:localized_country] if attributes.key?(:localized_country)

      self.business_number = attributes[:business_number] if attributes.key?(:business_number)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      self.custom_label = attributes[:custom_label] if attributes.key?(:custom_label)

      self.custom_text = attributes[:custom_text] if attributes.key?(:custom_text)

      self.company_code = attributes[:company_code] if attributes.key?(:company_code)

      self.exclude_avalara_flag = attributes[:exclude_avalara_flag] if attributes.key?(:exclude_avalara_flag)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "remit_name", remit_name cannot be nil.') if @remit_name.nil?

      invalid_properties.push('invalid value for "location", location cannot be nil.') if @location.nil?

      invalid_properties.push('invalid value for "invoice_title", invoice_title cannot be nil.') if @invoice_title.nil?

      invalid_properties.push('invalid value for "payable_name", payable_name cannot be nil.') if @payable_name.nil?

      invalid_properties.push('invalid value for "overall_invoice_default", overall_invoice_default cannot be nil.') if @overall_invoice_default.nil?

      invalid_properties.push('invalid value for "email_template", email_template cannot be nil.') if @email_template.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @remit_name.nil?
      return false if @location.nil?
      return false if @invoice_title.nil?
      return false if @payable_name.nil?
      return false if @overall_invoice_default.nil?
      return false if @email_template.nil?

      prefix_suffix_flag_validator = EnumAttributeValidator.new('String', %w[Prefix Suffix])
      return false unless prefix_suffix_flag_validator.valid?(@prefix_suffix_flag)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] remit_name Value to be assigned
    def remit_name=(remit_name)
      raise ArgumentError, 'remit_name cannot be nil' if remit_name.nil?

      @remit_name = remit_name
    end

    # Custom attribute writer method with validation
    # @param [Object] location Value to be assigned
    def location=(location)
      raise ArgumentError, 'location cannot be nil' if location.nil?

      @location = location
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_title Value to be assigned
    def invoice_title=(invoice_title)
      raise ArgumentError, 'invoice_title cannot be nil' if invoice_title.nil?

      @invoice_title = invoice_title
    end

    # Custom attribute writer method with validation
    # @param [Object] payable_name Value to be assigned
    def payable_name=(payable_name)
      raise ArgumentError, 'payable_name cannot be nil' if payable_name.nil?

      @payable_name = payable_name
    end

    # Custom attribute writer method with validation
    # @param [Object] overall_invoice_default Value to be assigned
    def overall_invoice_default=(overall_invoice_default)
      raise ArgumentError, 'overall_invoice_default cannot be nil' if overall_invoice_default.nil?

      @overall_invoice_default = overall_invoice_default
    end

    # Custom attribute writer method with validation
    # @param [Object] email_template Value to be assigned
    def email_template=(email_template)
      raise ArgumentError, 'email_template cannot be nil' if email_template.nil?

      @email_template = email_template
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] prefix_suffix_flag Object to be assigned
    def prefix_suffix_flag=(prefix_suffix_flag)
      validator = EnumAttributeValidator.new('String', %w[Prefix Suffix])
      raise ArgumentError, "invalid value for \"prefix_suffix_flag\", must be one of #{validator.allowable_values}." unless validator.valid?(prefix_suffix_flag)

      @prefix_suffix_flag = prefix_suffix_flag
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        remit_name == other.remit_name &&
        location == other.location &&
        invoice_title == other.invoice_title &&
        payable_name == other.payable_name &&
        overall_invoice_default == other.overall_invoice_default &&
        email_template == other.email_template &&
        id == other.id &&
        address_one == other.address_one &&
        address_two == other.address_two &&
        city == other.city &&
        state == other.state &&
        zip == other.zip &&
        country == other.country &&
        phone == other.phone &&
        topcomment == other.topcomment &&
        invoice_footer == other.invoice_footer &&
        quote_footer == other.quote_footer &&
        standard_invoice_actual == other.standard_invoice_actual &&
        standard_invoice_fixed == other.standard_invoice_fixed &&
        progress_invoice == other.progress_invoice &&
        agreement_invoice == other.agreement_invoice &&
        credit_memo_invoice == other.credit_memo_invoice &&
        down_payment_invoice == other.down_payment_invoice &&
        misc_invoice == other.misc_invoice &&
        sales_order_invoice == other.sales_order_invoice &&
        exclude_do_not_bill_time_flag == other.exclude_do_not_bill_time_flag &&
        exclude_do_not_bill_expense_flag == other.exclude_do_not_bill_expense_flag &&
        exclude_do_not_bill_product_flag == other.exclude_do_not_bill_product_flag &&
        prefix_suffix_flag == other.prefix_suffix_flag &&
        prefix_suffix_text == other.prefix_suffix_text &&
        charge_adj_to_firm_flag == other.charge_adj_to_firm_flag &&
        no_watermark_flag == other.no_watermark_flag &&
        display_tax_flag == other.display_tax_flag &&
        allow_restricted_dept_on_routing_flag == other.allow_restricted_dept_on_routing_flag &&
        bill_ticket_separately_flag == other.bill_ticket_separately_flag &&
        bill_ticket_complete_flag == other.bill_ticket_complete_flag &&
        bill_ticket_unapproved_flag == other.bill_ticket_unapproved_flag &&
        bill_project_complete_flag == other.bill_project_complete_flag &&
        bill_project_unapproved_flag == other.bill_project_unapproved_flag &&
        progress_time_flag == other.progress_time_flag &&
        restrict_project_downpayment_flag == other.restrict_project_downpayment_flag &&
        bill_sales_order_complete_flag == other.bill_sales_order_complete_flag &&
        bill_product_after_ship_flag == other.bill_product_after_ship_flag &&
        restrict_downpayment_flag == other.restrict_downpayment_flag &&
        copy_non_service_products_flag == other.copy_non_service_products_flag &&
        copy_service_products_flag == other.copy_service_products_flag &&
        copy_agreement_products_flag == other.copy_agreement_products_flag &&
        print_logo_flag == other.print_logo_flag &&
        read_receipt_flag == other.read_receipt_flag &&
        delivery_receipt_flag == other.delivery_receipt_flag &&
        attach_xml_invoice_flag == other.attach_xml_invoice_flag &&
        disable_routing_email_flag == other.disable_routing_email_flag &&
        localized_country == other.localized_country &&
        business_number == other.business_number &&
        currency == other.currency &&
        custom_label == other.custom_label &&
        custom_text == other.custom_text &&
        company_code == other.company_code &&
        exclude_avalara_flag == other.exclude_avalara_flag &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [remit_name, location, invoice_title, payable_name, overall_invoice_default, email_template, id, address_one, address_two, city, state, zip, country, phone, topcomment, invoice_footer, quote_footer, standard_invoice_actual, standard_invoice_fixed, progress_invoice, agreement_invoice, credit_memo_invoice, down_payment_invoice, misc_invoice, sales_order_invoice, exclude_do_not_bill_time_flag, exclude_do_not_bill_expense_flag, exclude_do_not_bill_product_flag, prefix_suffix_flag, prefix_suffix_text, charge_adj_to_firm_flag, no_watermark_flag, display_tax_flag, allow_restricted_dept_on_routing_flag, bill_ticket_separately_flag, bill_ticket_complete_flag, bill_ticket_unapproved_flag, bill_project_complete_flag, bill_project_unapproved_flag, progress_time_flag, restrict_project_downpayment_flag, bill_sales_order_complete_flag, bill_product_after_ship_flag, restrict_downpayment_flag, copy_non_service_products_flag, copy_service_products_flag, copy_agreement_products_flag, print_logo_flag, read_receipt_flag, delivery_receipt_flag, attach_xml_invoice_flag, disable_routing_email_flag, localized_country, business_number, currency, custom_label, custom_text, company_code, exclude_avalara_flag, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
