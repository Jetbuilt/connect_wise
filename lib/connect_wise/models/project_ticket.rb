# #Connectwise Manage All Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2022.1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.1
#

require 'date'
require 'time'

module ConnectWise
  class ProjectTicket
    #  Max length: 100;
    attr_accessor :summary

    attr_accessor :id, :is_issue_flag, :board, :status, :work_role, :work_type, :project, :phase, :company, :site, :country, :contact, :type, :sub_type, :item, :owner, :priority, :service_location, :source, :required_date, :budget_hours, :opportunity, :agreement, :knowledge_base_category_id, :knowledge_base_sub_category_id, :knowledge_base_link_id, :knowledge_base_link_type, :allow_all_clients_portal_view, :customer_updated_flag, :automatic_email_contact_flag, :automatic_email_resource_flag, :automatic_email_cc_flag, :closed_date, :closed_by, :closed_flag, :actual_hours, :approved, :sub_billing_method, :sub_billing_amount, :sub_date_accepted, :resources, :bill_time, :bill_expenses, :bill_products, :predecessor_type, :predecessor_id, :predecessor_closed_flag, :lag_days, :lag_nonworking_days_flag, :estimated_start_date, :location, :department, :duration, :mobile_guid, :currency, :_info, :contact_email_lookup, :skip_callback, :custom_fields

    #  Max length: 50;
    attr_accessor :wbs_code

    #  Max length: 50;
    attr_accessor :site_name

    #  Max length: 50;
    attr_accessor :address_line1

    #  Max length: 50;
    attr_accessor :address_line2

    #  Max length: 50;
    attr_accessor :city

    #  Max length: 50;
    attr_accessor :state_identifier

    #  Max length: 12;
    attr_accessor :zip

    #  Max length: 62;
    attr_accessor :contact_name

    #  Max length: 20;
    attr_accessor :contact_phone_number

    #  Max length: 15;
    attr_accessor :contact_phone_extension

    #  Max length: 250;
    attr_accessor :contact_email_address

    #  Max length: 1000;
    attr_accessor :automatic_email_cc

    # Only available for POST, will not be returned in the response
    attr_accessor :initial_description

    # Only available for POST, will not be returned in the response
    attr_accessor :initial_internal_analysis

    # Only available for POST, will not be returned in the response
    attr_accessor :initial_resolution

    # Can be set to false to skip notification processing when adding or updating a ticket (Defaults to True)
    attr_accessor :process_notifications

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        summary: :summary,
        id: :id,
        is_issue_flag: :isIssueFlag,
        board: :board,
        status: :status,
        work_role: :workRole,
        work_type: :workType,
        project: :project,
        phase: :phase,
        wbs_code: :wbsCode,
        company: :company,
        site: :site,
        site_name: :siteName,
        address_line1: :addressLine1,
        address_line2: :addressLine2,
        city: :city,
        state_identifier: :stateIdentifier,
        zip: :zip,
        country: :country,
        contact: :contact,
        contact_name: :contactName,
        contact_phone_number: :contactPhoneNumber,
        contact_phone_extension: :contactPhoneExtension,
        contact_email_address: :contactEmailAddress,
        type: :type,
        sub_type: :subType,
        item: :item,
        owner: :owner,
        priority: :priority,
        service_location: :serviceLocation,
        source: :source,
        required_date: :requiredDate,
        budget_hours: :budgetHours,
        opportunity: :opportunity,
        agreement: :agreement,
        knowledge_base_category_id: :knowledgeBaseCategoryId,
        knowledge_base_sub_category_id: :knowledgeBaseSubCategoryId,
        knowledge_base_link_id: :knowledgeBaseLinkId,
        knowledge_base_link_type: :knowledgeBaseLinkType,
        allow_all_clients_portal_view: :allowAllClientsPortalView,
        customer_updated_flag: :customerUpdatedFlag,
        automatic_email_contact_flag: :automaticEmailContactFlag,
        automatic_email_resource_flag: :automaticEmailResourceFlag,
        automatic_email_cc_flag: :automaticEmailCcFlag,
        automatic_email_cc: :automaticEmailCc,
        closed_date: :closedDate,
        closed_by: :closedBy,
        closed_flag: :closedFlag,
        actual_hours: :actualHours,
        approved: :approved,
        sub_billing_method: :subBillingMethod,
        sub_billing_amount: :subBillingAmount,
        sub_date_accepted: :subDateAccepted,
        resources: :resources,
        bill_time: :billTime,
        bill_expenses: :billExpenses,
        bill_products: :billProducts,
        predecessor_type: :predecessorType,
        predecessor_id: :predecessorId,
        predecessor_closed_flag: :predecessorClosedFlag,
        lag_days: :lagDays,
        lag_nonworking_days_flag: :lagNonworkingDaysFlag,
        estimated_start_date: :estimatedStartDate,
        location: :location,
        department: :department,
        duration: :duration,
        mobile_guid: :mobileGuid,
        currency: :currency,
        _info: :_info,
        initial_description: :initialDescription,
        initial_internal_analysis: :initialInternalAnalysis,
        initial_resolution: :initialResolution,
        contact_email_lookup: :contactEmailLookup,
        process_notifications: :processNotifications,
        skip_callback: :skipCallback,
        custom_fields: :customFields
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        summary: :String,
        id: :Integer,
        is_issue_flag: :Boolean,
        board: :BoardReference,
        status: :ServiceStatusReference,
        work_role: :WorkRoleReference,
        work_type: :WorkTypeReference,
        project: :ProjectReference,
        phase: :ProjectPhaseReference,
        wbs_code: :String,
        company: :CompanyReference,
        site: :SiteReference,
        site_name: :String,
        address_line1: :String,
        address_line2: :String,
        city: :String,
        state_identifier: :String,
        zip: :String,
        country: :CountryReference,
        contact: :ContactReference,
        contact_name: :String,
        contact_phone_number: :String,
        contact_phone_extension: :String,
        contact_email_address: :String,
        type: :ServiceTypeReference,
        sub_type: :ServiceSubTypeReference,
        item: :ServiceItemReference,
        owner: :MemberReference,
        priority: :PriorityReference,
        service_location: :ServiceLocationReference,
        source: :ServiceSourceReference,
        required_date: :Time,
        budget_hours: :Float,
        opportunity: :OpportunityReference,
        agreement: :AgreementReference,
        knowledge_base_category_id: :Integer,
        knowledge_base_sub_category_id: :Integer,
        knowledge_base_link_id: :Integer,
        knowledge_base_link_type: :String,
        allow_all_clients_portal_view: :Boolean,
        customer_updated_flag: :Boolean,
        automatic_email_contact_flag: :Boolean,
        automatic_email_resource_flag: :Boolean,
        automatic_email_cc_flag: :Boolean,
        automatic_email_cc: :String,
        closed_date: :String,
        closed_by: :String,
        closed_flag: :Boolean,
        actual_hours: :Float,
        approved: :Boolean,
        sub_billing_method: :String,
        sub_billing_amount: :Float,
        sub_date_accepted: :String,
        resources: :String,
        bill_time: :String,
        bill_expenses: :String,
        bill_products: :String,
        predecessor_type: :String,
        predecessor_id: :Integer,
        predecessor_closed_flag: :Boolean,
        lag_days: :Integer,
        lag_nonworking_days_flag: :Boolean,
        estimated_start_date: :Time,
        location: :SystemLocationReference,
        department: :SystemDepartmentReference,
        duration: :Integer,
        mobile_guid: :String,
        currency: :CurrencyReference,
        _info: :'Hash<String, String>',
        initial_description: :String,
        initial_internal_analysis: :String,
        initial_resolution: :String,
        contact_email_lookup: :String,
        process_notifications: :Boolean,
        skip_callback: :Boolean,
        custom_fields: :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                is_issue_flag
                budget_hours
                knowledge_base_category_id
                knowledge_base_sub_category_id
                knowledge_base_link_id
                knowledge_base_link_type
                allow_all_clients_portal_view
                customer_updated_flag
                automatic_email_contact_flag
                automatic_email_resource_flag
                automatic_email_cc_flag
                closed_flag
                actual_hours
                approved
                sub_billing_method
                sub_billing_amount
                bill_time
                bill_expenses
                bill_products
                predecessor_type
                predecessor_id
                predecessor_closed_flag
                lag_days
                lag_nonworking_days_flag
                duration
                mobile_guid
                process_notifications
                skip_callback
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::ProjectTicket` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::ProjectTicket`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.summary = attributes[:summary] if attributes.key?(:summary)

      self.id = attributes[:id] if attributes.key?(:id)

      self.is_issue_flag = attributes[:is_issue_flag] if attributes.key?(:is_issue_flag)

      self.board = attributes[:board] if attributes.key?(:board)

      self.status = attributes[:status] if attributes.key?(:status)

      self.work_role = attributes[:work_role] if attributes.key?(:work_role)

      self.work_type = attributes[:work_type] if attributes.key?(:work_type)

      self.project = attributes[:project] if attributes.key?(:project)

      self.phase = attributes[:phase] if attributes.key?(:phase)

      self.wbs_code = attributes[:wbs_code] if attributes.key?(:wbs_code)

      self.company = attributes[:company] if attributes.key?(:company)

      self.site = attributes[:site] if attributes.key?(:site)

      self.site_name = attributes[:site_name] if attributes.key?(:site_name)

      self.address_line1 = attributes[:address_line1] if attributes.key?(:address_line1)

      self.address_line2 = attributes[:address_line2] if attributes.key?(:address_line2)

      self.city = attributes[:city] if attributes.key?(:city)

      self.state_identifier = attributes[:state_identifier] if attributes.key?(:state_identifier)

      self.zip = attributes[:zip] if attributes.key?(:zip)

      self.country = attributes[:country] if attributes.key?(:country)

      self.contact = attributes[:contact] if attributes.key?(:contact)

      self.contact_name = attributes[:contact_name] if attributes.key?(:contact_name)

      self.contact_phone_number = attributes[:contact_phone_number] if attributes.key?(:contact_phone_number)

      self.contact_phone_extension = attributes[:contact_phone_extension] if attributes.key?(:contact_phone_extension)

      self.contact_email_address = attributes[:contact_email_address] if attributes.key?(:contact_email_address)

      self.type = attributes[:type] if attributes.key?(:type)

      self.sub_type = attributes[:sub_type] if attributes.key?(:sub_type)

      self.item = attributes[:item] if attributes.key?(:item)

      self.owner = attributes[:owner] if attributes.key?(:owner)

      self.priority = attributes[:priority] if attributes.key?(:priority)

      self.service_location = attributes[:service_location] if attributes.key?(:service_location)

      self.source = attributes[:source] if attributes.key?(:source)

      self.required_date = attributes[:required_date] if attributes.key?(:required_date)

      self.budget_hours = attributes[:budget_hours] if attributes.key?(:budget_hours)

      self.opportunity = attributes[:opportunity] if attributes.key?(:opportunity)

      self.agreement = attributes[:agreement] if attributes.key?(:agreement)

      self.knowledge_base_category_id = attributes[:knowledge_base_category_id] if attributes.key?(:knowledge_base_category_id)

      self.knowledge_base_sub_category_id = attributes[:knowledge_base_sub_category_id] if attributes.key?(:knowledge_base_sub_category_id)

      self.knowledge_base_link_id = attributes[:knowledge_base_link_id] if attributes.key?(:knowledge_base_link_id)

      self.knowledge_base_link_type = attributes[:knowledge_base_link_type] if attributes.key?(:knowledge_base_link_type)

      self.allow_all_clients_portal_view = attributes[:allow_all_clients_portal_view] if attributes.key?(:allow_all_clients_portal_view)

      self.customer_updated_flag = attributes[:customer_updated_flag] if attributes.key?(:customer_updated_flag)

      self.automatic_email_contact_flag = attributes[:automatic_email_contact_flag] if attributes.key?(:automatic_email_contact_flag)

      self.automatic_email_resource_flag = attributes[:automatic_email_resource_flag] if attributes.key?(:automatic_email_resource_flag)

      self.automatic_email_cc_flag = attributes[:automatic_email_cc_flag] if attributes.key?(:automatic_email_cc_flag)

      self.automatic_email_cc = attributes[:automatic_email_cc] if attributes.key?(:automatic_email_cc)

      self.closed_date = attributes[:closed_date] if attributes.key?(:closed_date)

      self.closed_by = attributes[:closed_by] if attributes.key?(:closed_by)

      self.closed_flag = attributes[:closed_flag] if attributes.key?(:closed_flag)

      self.actual_hours = attributes[:actual_hours] if attributes.key?(:actual_hours)

      self.approved = attributes[:approved] if attributes.key?(:approved)

      self.sub_billing_method = attributes[:sub_billing_method] if attributes.key?(:sub_billing_method)

      self.sub_billing_amount = attributes[:sub_billing_amount] if attributes.key?(:sub_billing_amount)

      self.sub_date_accepted = attributes[:sub_date_accepted] if attributes.key?(:sub_date_accepted)

      self.resources = attributes[:resources] if attributes.key?(:resources)

      self.bill_time = attributes[:bill_time] if attributes.key?(:bill_time)

      self.bill_expenses = attributes[:bill_expenses] if attributes.key?(:bill_expenses)

      self.bill_products = attributes[:bill_products] if attributes.key?(:bill_products)

      self.predecessor_type = attributes[:predecessor_type] if attributes.key?(:predecessor_type)

      self.predecessor_id = attributes[:predecessor_id] if attributes.key?(:predecessor_id)

      self.predecessor_closed_flag = attributes[:predecessor_closed_flag] if attributes.key?(:predecessor_closed_flag)

      self.lag_days = attributes[:lag_days] if attributes.key?(:lag_days)

      self.lag_nonworking_days_flag = attributes[:lag_nonworking_days_flag] if attributes.key?(:lag_nonworking_days_flag)

      self.estimated_start_date = attributes[:estimated_start_date] if attributes.key?(:estimated_start_date)

      self.location = attributes[:location] if attributes.key?(:location)

      self.department = attributes[:department] if attributes.key?(:department)

      self.duration = attributes[:duration] if attributes.key?(:duration)

      self.mobile_guid = attributes[:mobile_guid] if attributes.key?(:mobile_guid)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      if attributes.key?(:_info) && (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end

      self.initial_description = attributes[:initial_description] if attributes.key?(:initial_description)

      self.initial_internal_analysis = attributes[:initial_internal_analysis] if attributes.key?(:initial_internal_analysis)

      self.initial_resolution = attributes[:initial_resolution] if attributes.key?(:initial_resolution)

      self.contact_email_lookup = attributes[:contact_email_lookup] if attributes.key?(:contact_email_lookup)

      self.process_notifications = attributes[:process_notifications] if attributes.key?(:process_notifications)

      self.skip_callback = attributes[:skip_callback] if attributes.key?(:skip_callback)

      return unless attributes.key?(:custom_fields)
      return unless (value = attributes[:custom_fields]).is_a?(Array)

      self.custom_fields = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      invalid_properties.push('invalid value for "summary", summary cannot be nil.') if @summary.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @summary.nil?

      knowledge_base_link_type_validator = EnumAttributeValidator.new('String', %w[Activity ProjectIssue KnowledgeBaseArticle ProjectTicket ServiceTicket Time])
      return false unless knowledge_base_link_type_validator.valid?(@knowledge_base_link_type)

      sub_billing_method_validator = EnumAttributeValidator.new('String', %w[ActualRates FixedFee NotToExceed OverrideRate])
      return false unless sub_billing_method_validator.valid?(@sub_billing_method)

      bill_time_validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      return false unless bill_time_validator.valid?(@bill_time)

      bill_expenses_validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      return false unless bill_expenses_validator.valid?(@bill_expenses)

      bill_products_validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      return false unless bill_products_validator.valid?(@bill_products)

      predecessor_type_validator = EnumAttributeValidator.new('String', %w[Ticket Phase])
      return false unless predecessor_type_validator.valid?(@predecessor_type)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] knowledge_base_link_type Object to be assigned
    def knowledge_base_link_type=(knowledge_base_link_type)
      validator = EnumAttributeValidator.new('String', %w[Activity ProjectIssue KnowledgeBaseArticle ProjectTicket ServiceTicket Time])
      raise ArgumentError, "invalid value for \"knowledge_base_link_type\", must be one of #{validator.allowable_values}." unless validator.valid?(knowledge_base_link_type)

      @knowledge_base_link_type = knowledge_base_link_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sub_billing_method Object to be assigned
    def sub_billing_method=(sub_billing_method)
      validator = EnumAttributeValidator.new('String', %w[ActualRates FixedFee NotToExceed OverrideRate])
      raise ArgumentError, "invalid value for \"sub_billing_method\", must be one of #{validator.allowable_values}." unless validator.valid?(sub_billing_method)

      @sub_billing_method = sub_billing_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bill_time Object to be assigned
    def bill_time=(bill_time)
      validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      raise ArgumentError, "invalid value for \"bill_time\", must be one of #{validator.allowable_values}." unless validator.valid?(bill_time)

      @bill_time = bill_time
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bill_expenses Object to be assigned
    def bill_expenses=(bill_expenses)
      validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      raise ArgumentError, "invalid value for \"bill_expenses\", must be one of #{validator.allowable_values}." unless validator.valid?(bill_expenses)

      @bill_expenses = bill_expenses
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bill_products Object to be assigned
    def bill_products=(bill_products)
      validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      raise ArgumentError, "invalid value for \"bill_products\", must be one of #{validator.allowable_values}." unless validator.valid?(bill_products)

      @bill_products = bill_products
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] predecessor_type Object to be assigned
    def predecessor_type=(predecessor_type)
      validator = EnumAttributeValidator.new('String', %w[Ticket Phase])
      raise ArgumentError, "invalid value for \"predecessor_type\", must be one of #{validator.allowable_values}." unless validator.valid?(predecessor_type)

      @predecessor_type = predecessor_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        summary == other.summary &&
        id == other.id &&
        is_issue_flag == other.is_issue_flag &&
        board == other.board &&
        status == other.status &&
        work_role == other.work_role &&
        work_type == other.work_type &&
        project == other.project &&
        phase == other.phase &&
        wbs_code == other.wbs_code &&
        company == other.company &&
        site == other.site &&
        site_name == other.site_name &&
        address_line1 == other.address_line1 &&
        address_line2 == other.address_line2 &&
        city == other.city &&
        state_identifier == other.state_identifier &&
        zip == other.zip &&
        country == other.country &&
        contact == other.contact &&
        contact_name == other.contact_name &&
        contact_phone_number == other.contact_phone_number &&
        contact_phone_extension == other.contact_phone_extension &&
        contact_email_address == other.contact_email_address &&
        type == other.type &&
        sub_type == other.sub_type &&
        item == other.item &&
        owner == other.owner &&
        priority == other.priority &&
        service_location == other.service_location &&
        source == other.source &&
        required_date == other.required_date &&
        budget_hours == other.budget_hours &&
        opportunity == other.opportunity &&
        agreement == other.agreement &&
        knowledge_base_category_id == other.knowledge_base_category_id &&
        knowledge_base_sub_category_id == other.knowledge_base_sub_category_id &&
        knowledge_base_link_id == other.knowledge_base_link_id &&
        knowledge_base_link_type == other.knowledge_base_link_type &&
        allow_all_clients_portal_view == other.allow_all_clients_portal_view &&
        customer_updated_flag == other.customer_updated_flag &&
        automatic_email_contact_flag == other.automatic_email_contact_flag &&
        automatic_email_resource_flag == other.automatic_email_resource_flag &&
        automatic_email_cc_flag == other.automatic_email_cc_flag &&
        automatic_email_cc == other.automatic_email_cc &&
        closed_date == other.closed_date &&
        closed_by == other.closed_by &&
        closed_flag == other.closed_flag &&
        actual_hours == other.actual_hours &&
        approved == other.approved &&
        sub_billing_method == other.sub_billing_method &&
        sub_billing_amount == other.sub_billing_amount &&
        sub_date_accepted == other.sub_date_accepted &&
        resources == other.resources &&
        bill_time == other.bill_time &&
        bill_expenses == other.bill_expenses &&
        bill_products == other.bill_products &&
        predecessor_type == other.predecessor_type &&
        predecessor_id == other.predecessor_id &&
        predecessor_closed_flag == other.predecessor_closed_flag &&
        lag_days == other.lag_days &&
        lag_nonworking_days_flag == other.lag_nonworking_days_flag &&
        estimated_start_date == other.estimated_start_date &&
        location == other.location &&
        department == other.department &&
        duration == other.duration &&
        mobile_guid == other.mobile_guid &&
        currency == other.currency &&
        _info == other._info &&
        initial_description == other.initial_description &&
        initial_internal_analysis == other.initial_internal_analysis &&
        initial_resolution == other.initial_resolution &&
        contact_email_lookup == other.contact_email_lookup &&
        process_notifications == other.process_notifications &&
        skip_callback == other.skip_callback &&
        custom_fields == other.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [summary, id, is_issue_flag, board, status, work_role, work_type, project, phase, wbs_code, company, site, site_name, address_line1, address_line2, city, state_identifier, zip, country, contact, contact_name, contact_phone_number, contact_phone_extension, contact_email_address, type, sub_type, item, owner, priority, service_location, source, required_date, budget_hours, opportunity, agreement, knowledge_base_category_id, knowledge_base_sub_category_id, knowledge_base_link_id, knowledge_base_link_type, allow_all_clients_portal_view, customer_updated_flag, automatic_email_contact_flag, automatic_email_resource_flag, automatic_email_cc_flag, automatic_email_cc, closed_date, closed_by, closed_flag, actual_hours, approved, sub_billing_method, sub_billing_amount, sub_date_accepted, resources, bill_time, bill_expenses, bill_products, predecessor_type, predecessor_id, predecessor_closed_flag, lag_days, lag_nonworking_days_flag, estimated_start_date, location, department, duration, mobile_guid, currency, _info, initial_description, initial_internal_analysis, initial_resolution, contact_email_lookup, process_notifications, skip_callback, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
