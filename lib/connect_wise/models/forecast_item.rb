=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class ForecastItem
    attr_accessor :forecast_type

    attr_accessor :id

    #  Max length: 50;
    attr_accessor :forecast_description

    attr_accessor :opportunity

    attr_accessor :quantity

    attr_accessor :status

    attr_accessor :catalog_item

    attr_accessor :product_description

    attr_accessor :product_class

    attr_accessor :revenue

    attr_accessor :cost

    attr_accessor :margin

    attr_accessor :percentage

    attr_accessor :include_flag

    #  Max length: 20;
    attr_accessor :quote_werks_doc_no

    #  Max length: 255;
    attr_accessor :quote_werks_doc_name

    attr_accessor :quote_werks_quantity

    attr_accessor :link_flag

    attr_accessor :recurring_revenue

    attr_accessor :recurring_cost

    attr_accessor :recurring_date_start

    attr_accessor :recurring_date_end

    attr_accessor :bill_cycle

    attr_accessor :cycle_basis

    attr_accessor :cycles

    attr_accessor :recurring_flag

    attr_accessor :sequence_number

    attr_accessor :sub_number

    attr_accessor :taxable_flag

    attr_accessor :_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'forecast_type' => :'forecastType',
        :'id' => :'id',
        :'forecast_description' => :'forecastDescription',
        :'opportunity' => :'opportunity',
        :'quantity' => :'quantity',
        :'status' => :'status',
        :'catalog_item' => :'catalogItem',
        :'product_description' => :'productDescription',
        :'product_class' => :'productClass',
        :'revenue' => :'revenue',
        :'cost' => :'cost',
        :'margin' => :'margin',
        :'percentage' => :'percentage',
        :'include_flag' => :'includeFlag',
        :'quote_werks_doc_no' => :'quoteWerksDocNo',
        :'quote_werks_doc_name' => :'quoteWerksDocName',
        :'quote_werks_quantity' => :'quoteWerksQuantity',
        :'link_flag' => :'linkFlag',
        :'recurring_revenue' => :'recurringRevenue',
        :'recurring_cost' => :'recurringCost',
        :'recurring_date_start' => :'recurringDateStart',
        :'recurring_date_end' => :'recurringDateEnd',
        :'bill_cycle' => :'billCycle',
        :'cycle_basis' => :'cycleBasis',
        :'cycles' => :'cycles',
        :'recurring_flag' => :'recurringFlag',
        :'sequence_number' => :'sequenceNumber',
        :'sub_number' => :'subNumber',
        :'taxable_flag' => :'taxableFlag',
        :'_info' => :'_info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'forecast_type' => :'String',
        :'id' => :'Integer',
        :'forecast_description' => :'String',
        :'opportunity' => :'OpportunityReference',
        :'quantity' => :'Float',
        :'status' => :'OpportunityStatusReference',
        :'catalog_item' => :'IvItemReference',
        :'product_description' => :'String',
        :'product_class' => :'String',
        :'revenue' => :'Float',
        :'cost' => :'Float',
        :'margin' => :'Float',
        :'percentage' => :'Integer',
        :'include_flag' => :'Boolean',
        :'quote_werks_doc_no' => :'String',
        :'quote_werks_doc_name' => :'String',
        :'quote_werks_quantity' => :'Integer',
        :'link_flag' => :'Boolean',
        :'recurring_revenue' => :'Float',
        :'recurring_cost' => :'Float',
        :'recurring_date_start' => :'Time',
        :'recurring_date_end' => :'Time',
        :'bill_cycle' => :'BillingCycleReference',
        :'cycle_basis' => :'String',
        :'cycles' => :'Integer',
        :'recurring_flag' => :'Boolean',
        :'sequence_number' => :'Float',
        :'sub_number' => :'Integer',
        :'taxable_flag' => :'Boolean',
        :'_info' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'forecast_type',
        :'cost',
        :'recurring_cost',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::ForecastItem` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::ForecastItem`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'forecast_type')
        self.forecast_type = attributes[:'forecast_type']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'forecast_description')
        self.forecast_description = attributes[:'forecast_description']
      end

      if attributes.key?(:'opportunity')
        self.opportunity = attributes[:'opportunity']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'catalog_item')
        self.catalog_item = attributes[:'catalog_item']
      end

      if attributes.key?(:'product_description')
        self.product_description = attributes[:'product_description']
      end

      if attributes.key?(:'product_class')
        self.product_class = attributes[:'product_class']
      end

      if attributes.key?(:'revenue')
        self.revenue = attributes[:'revenue']
      end

      if attributes.key?(:'cost')
        self.cost = attributes[:'cost']
      end

      if attributes.key?(:'margin')
        self.margin = attributes[:'margin']
      end

      if attributes.key?(:'percentage')
        self.percentage = attributes[:'percentage']
      end

      if attributes.key?(:'include_flag')
        self.include_flag = attributes[:'include_flag']
      end

      if attributes.key?(:'quote_werks_doc_no')
        self.quote_werks_doc_no = attributes[:'quote_werks_doc_no']
      end

      if attributes.key?(:'quote_werks_doc_name')
        self.quote_werks_doc_name = attributes[:'quote_werks_doc_name']
      end

      if attributes.key?(:'quote_werks_quantity')
        self.quote_werks_quantity = attributes[:'quote_werks_quantity']
      end

      if attributes.key?(:'link_flag')
        self.link_flag = attributes[:'link_flag']
      end

      if attributes.key?(:'recurring_revenue')
        self.recurring_revenue = attributes[:'recurring_revenue']
      end

      if attributes.key?(:'recurring_cost')
        self.recurring_cost = attributes[:'recurring_cost']
      end

      if attributes.key?(:'recurring_date_start')
        self.recurring_date_start = attributes[:'recurring_date_start']
      end

      if attributes.key?(:'recurring_date_end')
        self.recurring_date_end = attributes[:'recurring_date_end']
      end

      if attributes.key?(:'bill_cycle')
        self.bill_cycle = attributes[:'bill_cycle']
      end

      if attributes.key?(:'cycle_basis')
        self.cycle_basis = attributes[:'cycle_basis']
      end

      if attributes.key?(:'cycles')
        self.cycles = attributes[:'cycles']
      end

      if attributes.key?(:'recurring_flag')
        self.recurring_flag = attributes[:'recurring_flag']
      end

      if attributes.key?(:'sequence_number')
        self.sequence_number = attributes[:'sequence_number']
      end

      if attributes.key?(:'sub_number')
        self.sub_number = attributes[:'sub_number']
      end

      if attributes.key?(:'taxable_flag')
        self.taxable_flag = attributes[:'taxable_flag']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      forecast_type_validator = EnumAttributeValidator.new('String', ["Other1", "Other2", "Agreement", "Product", "Service"])
      return false unless forecast_type_validator.valid?(@forecast_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] forecast_type Object to be assigned
    def forecast_type=(forecast_type)
      validator = EnumAttributeValidator.new('String', ["Other1", "Other2", "Agreement", "Product", "Service"])
      unless validator.valid?(forecast_type)
        fail ArgumentError, "invalid value for \"forecast_type\", must be one of #{validator.allowable_values}."
      end
      @forecast_type = forecast_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          forecast_type == o.forecast_type &&
          id == o.id &&
          forecast_description == o.forecast_description &&
          opportunity == o.opportunity &&
          quantity == o.quantity &&
          status == o.status &&
          catalog_item == o.catalog_item &&
          product_description == o.product_description &&
          product_class == o.product_class &&
          revenue == o.revenue &&
          cost == o.cost &&
          margin == o.margin &&
          percentage == o.percentage &&
          include_flag == o.include_flag &&
          quote_werks_doc_no == o.quote_werks_doc_no &&
          quote_werks_doc_name == o.quote_werks_doc_name &&
          quote_werks_quantity == o.quote_werks_quantity &&
          link_flag == o.link_flag &&
          recurring_revenue == o.recurring_revenue &&
          recurring_cost == o.recurring_cost &&
          recurring_date_start == o.recurring_date_start &&
          recurring_date_end == o.recurring_date_end &&
          bill_cycle == o.bill_cycle &&
          cycle_basis == o.cycle_basis &&
          cycles == o.cycles &&
          recurring_flag == o.recurring_flag &&
          sequence_number == o.sequence_number &&
          sub_number == o.sub_number &&
          taxable_flag == o.taxable_flag &&
          _info == o._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [forecast_type, id, forecast_description, opportunity, quantity, status, catalog_item, product_description, product_class, revenue, cost, margin, percentage, include_flag, quote_werks_doc_no, quote_werks_doc_name, quote_werks_quantity, link_flag, recurring_revenue, recurring_cost, recurring_date_start, recurring_date_end, bill_cycle, cycle_basis, cycles, recurring_flag, sequence_number, sub_number, taxable_flag, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
