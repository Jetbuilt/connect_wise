# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class ForecastItem
    attr_accessor :opportunity, :status, :forecast_type, :id, :quantity, :catalog_item, :product_description, :product_class, :revenue, :cost, :margin, :percentage, :include_flag, :quote_werks_quantity, :link_flag, :recurring_revenue, :recurring_cost, :recurring_date_start, :recurring_date_end, :bill_cycle, :cycle_basis, :cycles, :recurring_flag, :sequence_number, :sub_number, :taxable_flag, :_info

    #  Max length: 50;
    attr_accessor :forecast_description

    #  Max length: 20;
    attr_accessor :quote_werks_doc_no

    #  Max length: 255;
    attr_accessor :quote_werks_doc_name

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        opportunity: :opportunity,
        status: :status,
        forecast_type: :forecastType,
        id: :id,
        forecast_description: :forecastDescription,
        quantity: :quantity,
        catalog_item: :catalogItem,
        product_description: :productDescription,
        product_class: :productClass,
        revenue: :revenue,
        cost: :cost,
        margin: :margin,
        percentage: :percentage,
        include_flag: :includeFlag,
        quote_werks_doc_no: :quoteWerksDocNo,
        quote_werks_doc_name: :quoteWerksDocName,
        quote_werks_quantity: :quoteWerksQuantity,
        link_flag: :linkFlag,
        recurring_revenue: :recurringRevenue,
        recurring_cost: :recurringCost,
        recurring_date_start: :recurringDateStart,
        recurring_date_end: :recurringDateEnd,
        bill_cycle: :billCycle,
        cycle_basis: :cycleBasis,
        cycles: :cycles,
        recurring_flag: :recurringFlag,
        sequence_number: :sequenceNumber,
        sub_number: :subNumber,
        taxable_flag: :taxableFlag,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        opportunity: :OpportunityReference,
        status: :OpportunityStatusReference,
        forecast_type: :String,
        id: :Integer,
        forecast_description: :String,
        quantity: :Float,
        catalog_item: :IvItemReference,
        product_description: :String,
        product_class: :String,
        revenue: :Float,
        cost: :Float,
        margin: :Float,
        percentage: :Integer,
        include_flag: :Boolean,
        quote_werks_doc_no: :String,
        quote_werks_doc_name: :String,
        quote_werks_quantity: :Integer,
        link_flag: :Boolean,
        recurring_revenue: :Float,
        recurring_cost: :Float,
        recurring_date_start: :Time,
        recurring_date_end: :Time,
        bill_cycle: :BillingCycleReference,
        cycle_basis: :String,
        cycles: :Integer,
        recurring_flag: :Boolean,
        sequence_number: :Float,
        sub_number: :Integer,
        taxable_flag: :Boolean,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                forecast_type
                cost
                recurring_cost
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::ForecastItem` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::ForecastItem`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.opportunity = (attributes[:opportunity] if attributes.key?(:opportunity))

      self.status = (attributes[:status] if attributes.key?(:status))

      self.forecast_type = (attributes[:forecast_type] if attributes.key?(:forecast_type))

      self.id = attributes[:id] if attributes.key?(:id)

      self.forecast_description = attributes[:forecast_description] if attributes.key?(:forecast_description)

      self.quantity = attributes[:quantity] if attributes.key?(:quantity)

      self.catalog_item = attributes[:catalog_item] if attributes.key?(:catalog_item)

      self.product_description = attributes[:product_description] if attributes.key?(:product_description)

      self.product_class = attributes[:product_class] if attributes.key?(:product_class)

      self.revenue = attributes[:revenue] if attributes.key?(:revenue)

      self.cost = attributes[:cost] if attributes.key?(:cost)

      self.margin = attributes[:margin] if attributes.key?(:margin)

      self.percentage = attributes[:percentage] if attributes.key?(:percentage)

      self.include_flag = attributes[:include_flag] if attributes.key?(:include_flag)

      self.quote_werks_doc_no = attributes[:quote_werks_doc_no] if attributes.key?(:quote_werks_doc_no)

      self.quote_werks_doc_name = attributes[:quote_werks_doc_name] if attributes.key?(:quote_werks_doc_name)

      self.quote_werks_quantity = attributes[:quote_werks_quantity] if attributes.key?(:quote_werks_quantity)

      self.link_flag = attributes[:link_flag] if attributes.key?(:link_flag)

      self.recurring_revenue = attributes[:recurring_revenue] if attributes.key?(:recurring_revenue)

      self.recurring_cost = attributes[:recurring_cost] if attributes.key?(:recurring_cost)

      self.recurring_date_start = attributes[:recurring_date_start] if attributes.key?(:recurring_date_start)

      self.recurring_date_end = attributes[:recurring_date_end] if attributes.key?(:recurring_date_end)

      self.bill_cycle = attributes[:bill_cycle] if attributes.key?(:bill_cycle)

      self.cycle_basis = attributes[:cycle_basis] if attributes.key?(:cycle_basis)

      self.cycles = attributes[:cycles] if attributes.key?(:cycles)

      self.recurring_flag = attributes[:recurring_flag] if attributes.key?(:recurring_flag)

      self.sequence_number = attributes[:sequence_number] if attributes.key?(:sequence_number)

      self.sub_number = attributes[:sub_number] if attributes.key?(:sub_number)

      self.taxable_flag = attributes[:taxable_flag] if attributes.key?(:taxable_flag)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "opportunity", opportunity cannot be nil.') if @opportunity.nil?

      invalid_properties.push('invalid value for "status", status cannot be nil.') if @status.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @opportunity.nil?
      return false if @status.nil?

      forecast_type_validator = EnumAttributeValidator.new('String', %w[Other1 Other2 Agreement Product Service])
      return false unless forecast_type_validator.valid?(@forecast_type)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] opportunity Value to be assigned
    def opportunity=(opportunity)
      raise ArgumentError, 'opportunity cannot be nil' if opportunity.nil?

      @opportunity = opportunity
    end

    # Custom attribute writer method with validation
    # @param [Object] status Value to be assigned
    def status=(status)
      raise ArgumentError, 'status cannot be nil' if status.nil?

      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] forecast_type Object to be assigned
    def forecast_type=(forecast_type)
      validator = EnumAttributeValidator.new('String', %w[Other1 Other2 Agreement Product Service])
      raise ArgumentError, "invalid value for \"forecast_type\", must be one of #{validator.allowable_values}." unless validator.valid?(forecast_type)

      @forecast_type = forecast_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        opportunity == other.opportunity &&
        status == other.status &&
        forecast_type == other.forecast_type &&
        id == other.id &&
        forecast_description == other.forecast_description &&
        quantity == other.quantity &&
        catalog_item == other.catalog_item &&
        product_description == other.product_description &&
        product_class == other.product_class &&
        revenue == other.revenue &&
        cost == other.cost &&
        margin == other.margin &&
        percentage == other.percentage &&
        include_flag == other.include_flag &&
        quote_werks_doc_no == other.quote_werks_doc_no &&
        quote_werks_doc_name == other.quote_werks_doc_name &&
        quote_werks_quantity == other.quote_werks_quantity &&
        link_flag == other.link_flag &&
        recurring_revenue == other.recurring_revenue &&
        recurring_cost == other.recurring_cost &&
        recurring_date_start == other.recurring_date_start &&
        recurring_date_end == other.recurring_date_end &&
        bill_cycle == other.bill_cycle &&
        cycle_basis == other.cycle_basis &&
        cycles == other.cycles &&
        recurring_flag == other.recurring_flag &&
        sequence_number == other.sequence_number &&
        sub_number == other.sub_number &&
        taxable_flag == other.taxable_flag &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [opportunity, status, forecast_type, id, forecast_description, quantity, catalog_item, product_description, product_class, revenue, cost, margin, percentage, include_flag, quote_werks_doc_no, quote_werks_doc_name, quote_werks_quantity, link_flag, recurring_revenue, recurring_cost, recurring_date_start, recurring_date_end, bill_cycle, cycle_basis, cycles, recurring_flag, sequence_number, sub_number, taxable_flag, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
