# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class WorkflowEvent
    attr_accessor :event_condition, :id, :name, :date_tested_utc, :test_records_matched, :connect_wise_id, :parent_connect_wise_id, :_info

    # Required when exectionTimes is set to MultipleTimes or Continuously
    attr_accessor :frequency_unit

    # Required when exectionTimes is set to MultipleTimes or Continuously
    attr_accessor :frequency_of_execution

    # Required when exectionTimes is set to MultipleTimes
    attr_accessor :max_number_of_execution

    # Defaults to Once when not specified
    attr_accessor :execution_time

    # WF_NotifyHeader_RecID
    attr_accessor :parent_id

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        event_condition: :eventCondition,
        id: :id,
        name: :name,
        frequency_unit: :frequencyUnit,
        frequency_of_execution: :frequencyOfExecution,
        max_number_of_execution: :maxNumberOfExecution,
        execution_time: :executionTime,
        date_tested_utc: :dateTestedUTC,
        test_records_matched: :testRecordsMatched,
        connect_wise_id: :connectWiseID,
        parent_id: :parentId,
        parent_connect_wise_id: :parentConnectWiseId,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        event_condition: :String,
        id: :Integer,
        name: :String,
        frequency_unit: :String,
        frequency_of_execution: :Integer,
        max_number_of_execution: :Integer,
        execution_time: :String,
        date_tested_utc: :Time,
        test_records_matched: :Integer,
        connect_wise_id: :String,
        parent_id: :Integer,
        parent_connect_wise_id: :String,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                frequency_unit
                frequency_of_execution
                max_number_of_execution
                execution_time
                test_records_matched
                parent_id
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::WorkflowEvent` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::WorkflowEvent`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.event_condition = (attributes[:event_condition] if attributes.key?(:event_condition))

      self.id = attributes[:id] if attributes.key?(:id)

      self.name = attributes[:name] if attributes.key?(:name)

      self.frequency_unit = attributes[:frequency_unit] if attributes.key?(:frequency_unit)

      self.frequency_of_execution = attributes[:frequency_of_execution] if attributes.key?(:frequency_of_execution)

      self.max_number_of_execution = attributes[:max_number_of_execution] if attributes.key?(:max_number_of_execution)

      self.execution_time = attributes[:execution_time] if attributes.key?(:execution_time)

      self.date_tested_utc = attributes[:date_tested_utc] if attributes.key?(:date_tested_utc)

      self.test_records_matched = attributes[:test_records_matched] if attributes.key?(:test_records_matched)

      self.connect_wise_id = attributes[:connect_wise_id] if attributes.key?(:connect_wise_id)

      self.parent_id = attributes[:parent_id] if attributes.key?(:parent_id)

      self.parent_connect_wise_id = attributes[:parent_connect_wise_id] if attributes.key?(:parent_connect_wise_id)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "event_condition", event_condition cannot be nil.') if @event_condition.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @event_condition.nil?

      frequency_unit_validator = EnumAttributeValidator.new('String', %w[Minutes Hours Days Months])
      return false unless frequency_unit_validator.valid?(@frequency_unit)

      execution_time_validator = EnumAttributeValidator.new('String', %w[Once MultipleTimes Continuously])
      return false unless execution_time_validator.valid?(@execution_time)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] event_condition Value to be assigned
    def event_condition=(event_condition)
      raise ArgumentError, 'event_condition cannot be nil' if event_condition.nil?

      @event_condition = event_condition
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] frequency_unit Object to be assigned
    def frequency_unit=(frequency_unit)
      validator = EnumAttributeValidator.new('String', %w[Minutes Hours Days Months])
      raise ArgumentError, "invalid value for \"frequency_unit\", must be one of #{validator.allowable_values}." unless validator.valid?(frequency_unit)

      @frequency_unit = frequency_unit
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] execution_time Object to be assigned
    def execution_time=(execution_time)
      validator = EnumAttributeValidator.new('String', %w[Once MultipleTimes Continuously])
      raise ArgumentError, "invalid value for \"execution_time\", must be one of #{validator.allowable_values}." unless validator.valid?(execution_time)

      @execution_time = execution_time
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        event_condition == other.event_condition &&
        id == other.id &&
        name == other.name &&
        frequency_unit == other.frequency_unit &&
        frequency_of_execution == other.frequency_of_execution &&
        max_number_of_execution == other.max_number_of_execution &&
        execution_time == other.execution_time &&
        date_tested_utc == other.date_tested_utc &&
        test_records_matched == other.test_records_matched &&
        connect_wise_id == other.connect_wise_id &&
        parent_id == other.parent_id &&
        parent_connect_wise_id == other.parent_connect_wise_id &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [event_condition, id, name, frequency_unit, frequency_of_execution, max_number_of_execution, execution_time, date_tested_utc, test_records_matched, connect_wise_id, parent_id, parent_connect_wise_id, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
