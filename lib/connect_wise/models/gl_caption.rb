# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class GLCaption
    attr_accessor :id, :segment1type, :segment2type, :segment3type, :segment4type, :segment5type, :segment6type, :segment7type, :segment8type, :segment9type, :segment10type, :_info

    #  Max length: 255;
    attr_accessor :segment1

    #  Max length: 255;
    attr_accessor :segment2

    #  Max length: 255;
    attr_accessor :segment3

    #  Max length: 255;
    attr_accessor :segment4

    #  Max length: 255;
    attr_accessor :segment5

    #  Max length: 255;
    attr_accessor :segment6

    #  Max length: 255;
    attr_accessor :segment7

    #  Max length: 255;
    attr_accessor :segment8

    #  Max length: 255;
    attr_accessor :segment9

    #  Max length: 255;
    attr_accessor :segment10

    #  Max length: 255;
    attr_accessor :cogs1

    #  Max length: 255;
    attr_accessor :cogs2

    #  Max length: 255;
    attr_accessor :cogs3

    #  Max length: 255;
    attr_accessor :cogs4

    #  Max length: 255;
    attr_accessor :cogs5

    #  Max length: 255;
    attr_accessor :cogs6

    #  Max length: 255;
    attr_accessor :cogs7

    #  Max length: 255;
    attr_accessor :cogs8

    #  Max length: 255;
    attr_accessor :cogs9

    #  Max length: 255;
    attr_accessor :cogs10

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        segment1: :segment1,
        segment2: :segment2,
        segment3: :segment3,
        segment4: :segment4,
        segment5: :segment5,
        segment6: :segment6,
        segment7: :segment7,
        segment8: :segment8,
        segment9: :segment9,
        segment10: :segment10,
        segment1type: :segment1type,
        segment2type: :segment2type,
        segment3type: :segment3type,
        segment4type: :segment4type,
        segment5type: :segment5type,
        segment6type: :segment6type,
        segment7type: :segment7type,
        segment8type: :segment8type,
        segment9type: :segment9type,
        segment10type: :segment10type,
        cogs1: :cogs1,
        cogs2: :cogs2,
        cogs3: :cogs3,
        cogs4: :cogs4,
        cogs5: :cogs5,
        cogs6: :cogs6,
        cogs7: :cogs7,
        cogs8: :cogs8,
        cogs9: :cogs9,
        cogs10: :cogs10,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        segment1: :String,
        segment2: :String,
        segment3: :String,
        segment4: :String,
        segment5: :String,
        segment6: :String,
        segment7: :String,
        segment8: :String,
        segment9: :String,
        segment10: :String,
        segment1type: :String,
        segment2type: :String,
        segment3type: :String,
        segment4type: :String,
        segment5type: :String,
        segment6type: :String,
        segment7type: :String,
        segment8type: :String,
        segment9type: :String,
        segment10type: :String,
        cogs1: :String,
        cogs2: :String,
        cogs3: :String,
        cogs4: :String,
        cogs5: :String,
        cogs6: :String,
        cogs7: :String,
        cogs8: :String,
        cogs9: :String,
        cogs10: :String,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                segment1type
                segment2type
                segment3type
                segment4type
                segment5type
                segment6type
                segment7type
                segment8type
                segment9type
                segment10type
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::GLCaption` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::GLCaption`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.segment1 = attributes[:segment1] if attributes.key?(:segment1)

      self.segment2 = attributes[:segment2] if attributes.key?(:segment2)

      self.segment3 = attributes[:segment3] if attributes.key?(:segment3)

      self.segment4 = attributes[:segment4] if attributes.key?(:segment4)

      self.segment5 = attributes[:segment5] if attributes.key?(:segment5)

      self.segment6 = attributes[:segment6] if attributes.key?(:segment6)

      self.segment7 = attributes[:segment7] if attributes.key?(:segment7)

      self.segment8 = attributes[:segment8] if attributes.key?(:segment8)

      self.segment9 = attributes[:segment9] if attributes.key?(:segment9)

      self.segment10 = attributes[:segment10] if attributes.key?(:segment10)

      self.segment1type = attributes[:segment1type] if attributes.key?(:segment1type)

      self.segment2type = attributes[:segment2type] if attributes.key?(:segment2type)

      self.segment3type = attributes[:segment3type] if attributes.key?(:segment3type)

      self.segment4type = attributes[:segment4type] if attributes.key?(:segment4type)

      self.segment5type = attributes[:segment5type] if attributes.key?(:segment5type)

      self.segment6type = attributes[:segment6type] if attributes.key?(:segment6type)

      self.segment7type = attributes[:segment7type] if attributes.key?(:segment7type)

      self.segment8type = attributes[:segment8type] if attributes.key?(:segment8type)

      self.segment9type = attributes[:segment9type] if attributes.key?(:segment9type)

      self.segment10type = attributes[:segment10type] if attributes.key?(:segment10type)

      self.cogs1 = attributes[:cogs1] if attributes.key?(:cogs1)

      self.cogs2 = attributes[:cogs2] if attributes.key?(:cogs2)

      self.cogs3 = attributes[:cogs3] if attributes.key?(:cogs3)

      self.cogs4 = attributes[:cogs4] if attributes.key?(:cogs4)

      self.cogs5 = attributes[:cogs5] if attributes.key?(:cogs5)

      self.cogs6 = attributes[:cogs6] if attributes.key?(:cogs6)

      self.cogs7 = attributes[:cogs7] if attributes.key?(:cogs7)

      self.cogs8 = attributes[:cogs8] if attributes.key?(:cogs8)

      self.cogs9 = attributes[:cogs9] if attributes.key?(:cogs9)

      self.cogs10 = attributes[:cogs10] if attributes.key?(:cogs10)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      segment1type_validator = EnumAttributeValidator.new('String', %w[Account Class])
      return false unless segment1type_validator.valid?(@segment1type)

      segment2type_validator = EnumAttributeValidator.new('String', %w[Account Class])
      return false unless segment2type_validator.valid?(@segment2type)

      segment3type_validator = EnumAttributeValidator.new('String', %w[Account Class])
      return false unless segment3type_validator.valid?(@segment3type)

      segment4type_validator = EnumAttributeValidator.new('String', %w[Account Class])
      return false unless segment4type_validator.valid?(@segment4type)

      segment5type_validator = EnumAttributeValidator.new('String', %w[Account Class])
      return false unless segment5type_validator.valid?(@segment5type)

      segment6type_validator = EnumAttributeValidator.new('String', %w[Account Class])
      return false unless segment6type_validator.valid?(@segment6type)

      segment7type_validator = EnumAttributeValidator.new('String', %w[Account Class])
      return false unless segment7type_validator.valid?(@segment7type)

      segment8type_validator = EnumAttributeValidator.new('String', %w[Account Class])
      return false unless segment8type_validator.valid?(@segment8type)

      segment9type_validator = EnumAttributeValidator.new('String', %w[Account Class])
      return false unless segment9type_validator.valid?(@segment9type)

      segment10type_validator = EnumAttributeValidator.new('String', %w[Account Class])
      return false unless segment10type_validator.valid?(@segment10type)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] segment1type Object to be assigned
    def segment1type=(segment1type)
      validator = EnumAttributeValidator.new('String', %w[Account Class])
      raise ArgumentError, "invalid value for \"segment1type\", must be one of #{validator.allowable_values}." unless validator.valid?(segment1type)

      @segment1type = segment1type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] segment2type Object to be assigned
    def segment2type=(segment2type)
      validator = EnumAttributeValidator.new('String', %w[Account Class])
      raise ArgumentError, "invalid value for \"segment2type\", must be one of #{validator.allowable_values}." unless validator.valid?(segment2type)

      @segment2type = segment2type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] segment3type Object to be assigned
    def segment3type=(segment3type)
      validator = EnumAttributeValidator.new('String', %w[Account Class])
      raise ArgumentError, "invalid value for \"segment3type\", must be one of #{validator.allowable_values}." unless validator.valid?(segment3type)

      @segment3type = segment3type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] segment4type Object to be assigned
    def segment4type=(segment4type)
      validator = EnumAttributeValidator.new('String', %w[Account Class])
      raise ArgumentError, "invalid value for \"segment4type\", must be one of #{validator.allowable_values}." unless validator.valid?(segment4type)

      @segment4type = segment4type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] segment5type Object to be assigned
    def segment5type=(segment5type)
      validator = EnumAttributeValidator.new('String', %w[Account Class])
      raise ArgumentError, "invalid value for \"segment5type\", must be one of #{validator.allowable_values}." unless validator.valid?(segment5type)

      @segment5type = segment5type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] segment6type Object to be assigned
    def segment6type=(segment6type)
      validator = EnumAttributeValidator.new('String', %w[Account Class])
      raise ArgumentError, "invalid value for \"segment6type\", must be one of #{validator.allowable_values}." unless validator.valid?(segment6type)

      @segment6type = segment6type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] segment7type Object to be assigned
    def segment7type=(segment7type)
      validator = EnumAttributeValidator.new('String', %w[Account Class])
      raise ArgumentError, "invalid value for \"segment7type\", must be one of #{validator.allowable_values}." unless validator.valid?(segment7type)

      @segment7type = segment7type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] segment8type Object to be assigned
    def segment8type=(segment8type)
      validator = EnumAttributeValidator.new('String', %w[Account Class])
      raise ArgumentError, "invalid value for \"segment8type\", must be one of #{validator.allowable_values}." unless validator.valid?(segment8type)

      @segment8type = segment8type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] segment9type Object to be assigned
    def segment9type=(segment9type)
      validator = EnumAttributeValidator.new('String', %w[Account Class])
      raise ArgumentError, "invalid value for \"segment9type\", must be one of #{validator.allowable_values}." unless validator.valid?(segment9type)

      @segment9type = segment9type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] segment10type Object to be assigned
    def segment10type=(segment10type)
      validator = EnumAttributeValidator.new('String', %w[Account Class])
      raise ArgumentError, "invalid value for \"segment10type\", must be one of #{validator.allowable_values}." unless validator.valid?(segment10type)

      @segment10type = segment10type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        segment1 == other.segment1 &&
        segment2 == other.segment2 &&
        segment3 == other.segment3 &&
        segment4 == other.segment4 &&
        segment5 == other.segment5 &&
        segment6 == other.segment6 &&
        segment7 == other.segment7 &&
        segment8 == other.segment8 &&
        segment9 == other.segment9 &&
        segment10 == other.segment10 &&
        segment1type == other.segment1type &&
        segment2type == other.segment2type &&
        segment3type == other.segment3type &&
        segment4type == other.segment4type &&
        segment5type == other.segment5type &&
        segment6type == other.segment6type &&
        segment7type == other.segment7type &&
        segment8type == other.segment8type &&
        segment9type == other.segment9type &&
        segment10type == other.segment10type &&
        cogs1 == other.cogs1 &&
        cogs2 == other.cogs2 &&
        cogs3 == other.cogs3 &&
        cogs4 == other.cogs4 &&
        cogs5 == other.cogs5 &&
        cogs6 == other.cogs6 &&
        cogs7 == other.cogs7 &&
        cogs8 == other.cogs8 &&
        cogs9 == other.cogs9 &&
        cogs10 == other.cogs10 &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, segment1, segment2, segment3, segment4, segment5, segment6, segment7, segment8, segment9, segment10, segment1type, segment2type, segment3type, segment4type, segment5type, segment6type, segment7type, segment8type, segment9type, segment10type, cogs1, cogs2, cogs3, cogs4, cogs5, cogs6, cogs7, cogs8, cogs9, cogs10, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
