# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class UnpostedInvoice
    attr_accessor :id, :billing_log_id, :location_id, :location, :department_id, :department, :company, :account_number, :bill_to_company, :bill_to_site, :ship_to_company, :ship_to_site, :invoice_number, :invoice_date, :invoice_type, :description, :billing_terms, :due_days, :due_date, :currency, :sub_total, :total, :has_time, :has_expenses, :has_products, :invoice_taxable_flag, :tax_code, :item_taxable_flag, :sales_tax_amount, :state_tax_xref, :state_tax_amount, :county_tax_xref, :county_tax_amount, :city_tax_xref, :city_tax_amount, :country_tax_xref, :country_tax_amount, :composite_tax_xref, :composite_tax_amount, :level_six_tax_xref, :level_six_tax_amount, :created_by, :date_closed, :_info

    # Used to determine if Avalara tax is enabled.
    attr_accessor :avalara_tax_flag

    # Set to true if transaction is taxable at the state level.
    attr_accessor :state_tax_flag

    # Set to true if transaction is taxable at the county level.
    attr_accessor :county_tax_flag

    # Set to true if transaction is taxable at the city level.
    attr_accessor :city_tax_flag

    # Set to true if transaction is taxable at the country level.
    attr_accessor :country_tax_flag

    # Set to true if transaction is taxable at the composite level.
    attr_accessor :composite_tax_flag

    # Set to true if transaction is taxable at level six.
    attr_accessor :level_six_tax_flag

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        billing_log_id: :billingLogId,
        location_id: :locationId,
        location: :location,
        department_id: :departmentId,
        department: :department,
        company: :company,
        account_number: :accountNumber,
        bill_to_company: :billToCompany,
        bill_to_site: :billToSite,
        ship_to_company: :shipToCompany,
        ship_to_site: :shipToSite,
        invoice_number: :invoiceNumber,
        invoice_date: :invoiceDate,
        invoice_type: :invoiceType,
        description: :description,
        billing_terms: :billingTerms,
        due_days: :dueDays,
        due_date: :dueDate,
        currency: :currency,
        sub_total: :subTotal,
        total: :total,
        has_time: :hasTime,
        has_expenses: :hasExpenses,
        has_products: :hasProducts,
        invoice_taxable_flag: :invoiceTaxableFlag,
        tax_code: :taxCode,
        avalara_tax_flag: :avalaraTaxFlag,
        item_taxable_flag: :itemTaxableFlag,
        sales_tax_amount: :salesTaxAmount,
        state_tax_flag: :stateTaxFlag,
        state_tax_xref: :stateTaxXref,
        state_tax_amount: :stateTaxAmount,
        county_tax_flag: :countyTaxFlag,
        county_tax_xref: :countyTaxXref,
        county_tax_amount: :countyTaxAmount,
        city_tax_flag: :cityTaxFlag,
        city_tax_xref: :cityTaxXref,
        city_tax_amount: :cityTaxAmount,
        country_tax_flag: :countryTaxFlag,
        country_tax_xref: :countryTaxXref,
        country_tax_amount: :countryTaxAmount,
        composite_tax_flag: :compositeTaxFlag,
        composite_tax_xref: :compositeTaxXref,
        composite_tax_amount: :compositeTaxAmount,
        level_six_tax_flag: :levelSixTaxFlag,
        level_six_tax_xref: :levelSixTaxXref,
        level_six_tax_amount: :levelSixTaxAmount,
        created_by: :createdBy,
        date_closed: :dateClosed,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        billing_log_id: :Integer,
        location_id: :Integer,
        location: :OwnerLevelReference,
        department_id: :Integer,
        department: :SystemDepartmentReference,
        company: :CompanyReference,
        account_number: :String,
        bill_to_company: :CompanyReference,
        bill_to_site: :SiteReference,
        ship_to_company: :CompanyReference,
        ship_to_site: :SiteReference,
        invoice_number: :String,
        invoice_date: :String,
        invoice_type: :String,
        description: :String,
        billing_terms: :BillingTermsReference,
        due_days: :String,
        due_date: :String,
        currency: :CurrencyReference,
        sub_total: :Float,
        total: :Float,
        has_time: :Boolean,
        has_expenses: :Boolean,
        has_products: :Boolean,
        invoice_taxable_flag: :Boolean,
        tax_code: :TaxCodeReference,
        avalara_tax_flag: :Boolean,
        item_taxable_flag: :Boolean,
        sales_tax_amount: :Float,
        state_tax_flag: :Boolean,
        state_tax_xref: :String,
        state_tax_amount: :Float,
        county_tax_flag: :Boolean,
        county_tax_xref: :String,
        county_tax_amount: :Float,
        city_tax_flag: :Boolean,
        city_tax_xref: :String,
        city_tax_amount: :Float,
        country_tax_flag: :Boolean,
        country_tax_xref: :String,
        country_tax_amount: :Float,
        composite_tax_flag: :Boolean,
        composite_tax_xref: :String,
        composite_tax_amount: :Float,
        level_six_tax_flag: :Boolean,
        level_six_tax_xref: :String,
        level_six_tax_amount: :Float,
        created_by: :String,
        date_closed: :String,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                billing_log_id
                location_id
                department_id
                invoice_type
                sub_total
                total
                invoice_taxable_flag
                avalara_tax_flag
                item_taxable_flag
                sales_tax_amount
                state_tax_flag
                state_tax_amount
                county_tax_flag
                county_tax_amount
                city_tax_flag
                city_tax_amount
                country_tax_flag
                country_tax_amount
                composite_tax_flag
                composite_tax_amount
                level_six_tax_flag
                level_six_tax_amount
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::UnpostedInvoice` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::UnpostedInvoice`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.billing_log_id = attributes[:billing_log_id] if attributes.key?(:billing_log_id)

      self.location_id = attributes[:location_id] if attributes.key?(:location_id)

      self.location = attributes[:location] if attributes.key?(:location)

      self.department_id = attributes[:department_id] if attributes.key?(:department_id)

      self.department = attributes[:department] if attributes.key?(:department)

      self.company = attributes[:company] if attributes.key?(:company)

      self.account_number = attributes[:account_number] if attributes.key?(:account_number)

      self.bill_to_company = attributes[:bill_to_company] if attributes.key?(:bill_to_company)

      self.bill_to_site = attributes[:bill_to_site] if attributes.key?(:bill_to_site)

      self.ship_to_company = attributes[:ship_to_company] if attributes.key?(:ship_to_company)

      self.ship_to_site = attributes[:ship_to_site] if attributes.key?(:ship_to_site)

      self.invoice_number = attributes[:invoice_number] if attributes.key?(:invoice_number)

      self.invoice_date = attributes[:invoice_date] if attributes.key?(:invoice_date)

      self.invoice_type = attributes[:invoice_type] if attributes.key?(:invoice_type)

      self.description = attributes[:description] if attributes.key?(:description)

      self.billing_terms = attributes[:billing_terms] if attributes.key?(:billing_terms)

      self.due_days = attributes[:due_days] if attributes.key?(:due_days)

      self.due_date = attributes[:due_date] if attributes.key?(:due_date)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      self.sub_total = attributes[:sub_total] if attributes.key?(:sub_total)

      self.total = attributes[:total] if attributes.key?(:total)

      self.has_time = attributes[:has_time] if attributes.key?(:has_time)

      self.has_expenses = attributes[:has_expenses] if attributes.key?(:has_expenses)

      self.has_products = attributes[:has_products] if attributes.key?(:has_products)

      self.invoice_taxable_flag = attributes[:invoice_taxable_flag] if attributes.key?(:invoice_taxable_flag)

      self.tax_code = attributes[:tax_code] if attributes.key?(:tax_code)

      self.avalara_tax_flag = attributes[:avalara_tax_flag] if attributes.key?(:avalara_tax_flag)

      self.item_taxable_flag = attributes[:item_taxable_flag] if attributes.key?(:item_taxable_flag)

      self.sales_tax_amount = attributes[:sales_tax_amount] if attributes.key?(:sales_tax_amount)

      self.state_tax_flag = attributes[:state_tax_flag] if attributes.key?(:state_tax_flag)

      self.state_tax_xref = attributes[:state_tax_xref] if attributes.key?(:state_tax_xref)

      self.state_tax_amount = attributes[:state_tax_amount] if attributes.key?(:state_tax_amount)

      self.county_tax_flag = attributes[:county_tax_flag] if attributes.key?(:county_tax_flag)

      self.county_tax_xref = attributes[:county_tax_xref] if attributes.key?(:county_tax_xref)

      self.county_tax_amount = attributes[:county_tax_amount] if attributes.key?(:county_tax_amount)

      self.city_tax_flag = attributes[:city_tax_flag] if attributes.key?(:city_tax_flag)

      self.city_tax_xref = attributes[:city_tax_xref] if attributes.key?(:city_tax_xref)

      self.city_tax_amount = attributes[:city_tax_amount] if attributes.key?(:city_tax_amount)

      self.country_tax_flag = attributes[:country_tax_flag] if attributes.key?(:country_tax_flag)

      self.country_tax_xref = attributes[:country_tax_xref] if attributes.key?(:country_tax_xref)

      self.country_tax_amount = attributes[:country_tax_amount] if attributes.key?(:country_tax_amount)

      self.composite_tax_flag = attributes[:composite_tax_flag] if attributes.key?(:composite_tax_flag)

      self.composite_tax_xref = attributes[:composite_tax_xref] if attributes.key?(:composite_tax_xref)

      self.composite_tax_amount = attributes[:composite_tax_amount] if attributes.key?(:composite_tax_amount)

      self.level_six_tax_flag = attributes[:level_six_tax_flag] if attributes.key?(:level_six_tax_flag)

      self.level_six_tax_xref = attributes[:level_six_tax_xref] if attributes.key?(:level_six_tax_xref)

      self.level_six_tax_amount = attributes[:level_six_tax_amount] if attributes.key?(:level_six_tax_amount)

      self.created_by = attributes[:created_by] if attributes.key?(:created_by)

      self.date_closed = attributes[:date_closed] if attributes.key?(:date_closed)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      invoice_type_validator = EnumAttributeValidator.new('String', %w[Agreement CreditMemo DownPayment Miscellaneous Progress Standard])
      return false unless invoice_type_validator.valid?(@invoice_type)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_type Object to be assigned
    def invoice_type=(invoice_type)
      validator = EnumAttributeValidator.new('String', %w[Agreement CreditMemo DownPayment Miscellaneous Progress Standard])
      raise ArgumentError, "invalid value for \"invoice_type\", must be one of #{validator.allowable_values}." unless validator.valid?(invoice_type)

      @invoice_type = invoice_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        billing_log_id == other.billing_log_id &&
        location_id == other.location_id &&
        location == other.location &&
        department_id == other.department_id &&
        department == other.department &&
        company == other.company &&
        account_number == other.account_number &&
        bill_to_company == other.bill_to_company &&
        bill_to_site == other.bill_to_site &&
        ship_to_company == other.ship_to_company &&
        ship_to_site == other.ship_to_site &&
        invoice_number == other.invoice_number &&
        invoice_date == other.invoice_date &&
        invoice_type == other.invoice_type &&
        description == other.description &&
        billing_terms == other.billing_terms &&
        due_days == other.due_days &&
        due_date == other.due_date &&
        currency == other.currency &&
        sub_total == other.sub_total &&
        total == other.total &&
        has_time == other.has_time &&
        has_expenses == other.has_expenses &&
        has_products == other.has_products &&
        invoice_taxable_flag == other.invoice_taxable_flag &&
        tax_code == other.tax_code &&
        avalara_tax_flag == other.avalara_tax_flag &&
        item_taxable_flag == other.item_taxable_flag &&
        sales_tax_amount == other.sales_tax_amount &&
        state_tax_flag == other.state_tax_flag &&
        state_tax_xref == other.state_tax_xref &&
        state_tax_amount == other.state_tax_amount &&
        county_tax_flag == other.county_tax_flag &&
        county_tax_xref == other.county_tax_xref &&
        county_tax_amount == other.county_tax_amount &&
        city_tax_flag == other.city_tax_flag &&
        city_tax_xref == other.city_tax_xref &&
        city_tax_amount == other.city_tax_amount &&
        country_tax_flag == other.country_tax_flag &&
        country_tax_xref == other.country_tax_xref &&
        country_tax_amount == other.country_tax_amount &&
        composite_tax_flag == other.composite_tax_flag &&
        composite_tax_xref == other.composite_tax_xref &&
        composite_tax_amount == other.composite_tax_amount &&
        level_six_tax_flag == other.level_six_tax_flag &&
        level_six_tax_xref == other.level_six_tax_xref &&
        level_six_tax_amount == other.level_six_tax_amount &&
        created_by == other.created_by &&
        date_closed == other.date_closed &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, billing_log_id, location_id, location, department_id, department, company, account_number, bill_to_company, bill_to_site, ship_to_company, ship_to_site, invoice_number, invoice_date, invoice_type, description, billing_terms, due_days, due_date, currency, sub_total, total, has_time, has_expenses, has_products, invoice_taxable_flag, tax_code, avalara_tax_flag, item_taxable_flag, sales_tax_amount, state_tax_flag, state_tax_xref, state_tax_amount, county_tax_flag, county_tax_xref, county_tax_amount, city_tax_flag, city_tax_xref, city_tax_amount, country_tax_flag, country_tax_xref, country_tax_amount, composite_tax_flag, composite_tax_xref, composite_tax_amount, level_six_tax_flag, level_six_tax_xref, level_six_tax_amount, created_by, date_closed, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
