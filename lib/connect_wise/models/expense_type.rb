# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class ExpenseType
    #  Max length: 30;
    attr_accessor :name

    attr_accessor :amount_caption, :bill_expenses, :invoice_markup_option, :id, :reimbursement_rate, :invoice_markup_amount, :advanced_amount_flag, :mileage_flag, :quantity_flag, :inactive_flag, :max_amount, :default_flag, :_info

    #  Max length: 50;
    attr_accessor :integration_x_ref

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        name: :name,
        amount_caption: :amountCaption,
        bill_expenses: :billExpenses,
        invoice_markup_option: :invoiceMarkupOption,
        id: :id,
        reimbursement_rate: :reimbursementRate,
        invoice_markup_amount: :invoiceMarkupAmount,
        advanced_amount_flag: :advancedAmountFlag,
        mileage_flag: :mileageFlag,
        quantity_flag: :quantityFlag,
        inactive_flag: :inactiveFlag,
        max_amount: :maxAmount,
        integration_x_ref: :integrationXRef,
        default_flag: :defaultFlag,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        name: :String,
        amount_caption: :String,
        bill_expenses: :String,
        invoice_markup_option: :String,
        id: :Integer,
        reimbursement_rate: :Float,
        invoice_markup_amount: :Float,
        advanced_amount_flag: :Boolean,
        mileage_flag: :Boolean,
        quantity_flag: :Boolean,
        inactive_flag: :Boolean,
        max_amount: :Float,
        integration_x_ref: :String,
        default_flag: :Boolean,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                bill_expenses
                invoice_markup_option
                reimbursement_rate
                invoice_markup_amount
                advanced_amount_flag
                mileage_flag
                quantity_flag
                inactive_flag
                max_amount
                default_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::ExpenseType` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::ExpenseType`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.name = (attributes[:name] if attributes.key?(:name))

      self.amount_caption = (attributes[:amount_caption] if attributes.key?(:amount_caption))

      self.bill_expenses = (attributes[:bill_expenses] if attributes.key?(:bill_expenses))

      self.invoice_markup_option = (attributes[:invoice_markup_option] if attributes.key?(:invoice_markup_option))

      self.id = attributes[:id] if attributes.key?(:id)

      self.reimbursement_rate = attributes[:reimbursement_rate] if attributes.key?(:reimbursement_rate)

      self.invoice_markup_amount = attributes[:invoice_markup_amount] if attributes.key?(:invoice_markup_amount)

      self.advanced_amount_flag = attributes[:advanced_amount_flag] if attributes.key?(:advanced_amount_flag)

      self.mileage_flag = attributes[:mileage_flag] if attributes.key?(:mileage_flag)

      self.quantity_flag = attributes[:quantity_flag] if attributes.key?(:quantity_flag)

      self.inactive_flag = attributes[:inactive_flag] if attributes.key?(:inactive_flag)

      self.max_amount = attributes[:max_amount] if attributes.key?(:max_amount)

      self.integration_x_ref = attributes[:integration_x_ref] if attributes.key?(:integration_x_ref)

      self.default_flag = attributes[:default_flag] if attributes.key?(:default_flag)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "name", name cannot be nil.') if @name.nil?

      invalid_properties.push('invalid value for "amount_caption", amount_caption cannot be nil.') if @amount_caption.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @name.nil?
      return false if @amount_caption.nil?

      bill_expenses_validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      return false unless bill_expenses_validator.valid?(@bill_expenses)

      invoice_markup_option_validator = EnumAttributeValidator.new('String', %w[Amount Mile Percent])
      return false unless invoice_markup_option_validator.valid?(@invoice_markup_option)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      raise ArgumentError, 'name cannot be nil' if name.nil?

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] amount_caption Value to be assigned
    def amount_caption=(amount_caption)
      raise ArgumentError, 'amount_caption cannot be nil' if amount_caption.nil?

      @amount_caption = amount_caption
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bill_expenses Object to be assigned
    def bill_expenses=(bill_expenses)
      validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      raise ArgumentError, "invalid value for \"bill_expenses\", must be one of #{validator.allowable_values}." unless validator.valid?(bill_expenses)

      @bill_expenses = bill_expenses
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_markup_option Object to be assigned
    def invoice_markup_option=(invoice_markup_option)
      validator = EnumAttributeValidator.new('String', %w[Amount Mile Percent])
      raise ArgumentError, "invalid value for \"invoice_markup_option\", must be one of #{validator.allowable_values}." unless validator.valid?(invoice_markup_option)

      @invoice_markup_option = invoice_markup_option
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        amount_caption == other.amount_caption &&
        bill_expenses == other.bill_expenses &&
        invoice_markup_option == other.invoice_markup_option &&
        id == other.id &&
        reimbursement_rate == other.reimbursement_rate &&
        invoice_markup_amount == other.invoice_markup_amount &&
        advanced_amount_flag == other.advanced_amount_flag &&
        mileage_flag == other.mileage_flag &&
        quantity_flag == other.quantity_flag &&
        inactive_flag == other.inactive_flag &&
        max_amount == other.max_amount &&
        integration_x_ref == other.integration_x_ref &&
        default_flag == other.default_flag &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, amount_caption, bill_expenses, invoice_markup_option, id, reimbursement_rate, invoice_markup_amount, advanced_amount_flag, mileage_flag, quantity_flag, inactive_flag, max_amount, integration_x_ref, default_flag, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
