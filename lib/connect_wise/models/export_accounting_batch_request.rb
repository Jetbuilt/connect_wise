# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class ExportAccountingBatchRequest
    #  Max length: 50;
    attr_accessor :batch_identifier

    attr_accessor :gl_interface_identifier, :thru_date, :location_id, :summarize_invoices, :included_invoice_ids, :excluded_invoice_ids, :included_expense_ids, :excluded_expense_ids, :included_payment_ids, :included_product_ids, :excluded_product_ids

    # Batch export must include invoices, expenses, or products (procurement).
    attr_accessor :export_invoices_flag

    # Batch export must include invoices, expenses, or products (procurement).
    attr_accessor :export_expenses_flag

    # Batch export must include invoices, expenses, or products (procurement).
    attr_accessor :export_payments_flag

    # Batch export must include invoices, expenses, or products (procurement).
    attr_accessor :export_products_flag

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        batch_identifier: :batchIdentifier,
        gl_interface_identifier: :glInterfaceIdentifier,
        thru_date: :thruDate,
        location_id: :locationId,
        summarize_invoices: :summarizeInvoices,
        export_invoices_flag: :exportInvoicesFlag,
        included_invoice_ids: :includedInvoiceIds,
        excluded_invoice_ids: :excludedInvoiceIds,
        export_expenses_flag: :exportExpensesFlag,
        included_expense_ids: :includedExpenseIds,
        excluded_expense_ids: :excludedExpenseIds,
        export_payments_flag: :exportPaymentsFlag,
        included_payment_ids: :includedPaymentIds,
        export_products_flag: :exportProductsFlag,
        included_product_ids: :includedProductIds,
        excluded_product_ids: :excludedProductIds
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        batch_identifier: :String,
        gl_interface_identifier: :String,
        thru_date: :Time,
        location_id: :Integer,
        summarize_invoices: :String,
        export_invoices_flag: :Boolean,
        included_invoice_ids: :'Array<Integer>',
        excluded_invoice_ids: :'Array<Integer>',
        export_expenses_flag: :Boolean,
        included_expense_ids: :'Array<Integer>',
        excluded_expense_ids: :'Array<Integer>',
        export_payments_flag: :Boolean,
        included_payment_ids: :'Array<Integer>',
        export_products_flag: :Boolean,
        included_product_ids: :'Array<String>',
        excluded_product_ids: :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                location_id
                export_invoices_flag
                export_expenses_flag
                export_payments_flag
                export_products_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::ExportAccountingBatchRequest` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::ExportAccountingBatchRequest`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.batch_identifier = attributes[:batch_identifier] if attributes.key?(:batch_identifier)

      self.gl_interface_identifier = attributes[:gl_interface_identifier] if attributes.key?(:gl_interface_identifier)

      self.thru_date = attributes[:thru_date] if attributes.key?(:thru_date)

      self.location_id = attributes[:location_id] if attributes.key?(:location_id)

      self.summarize_invoices = attributes[:summarize_invoices] if attributes.key?(:summarize_invoices)

      self.export_invoices_flag = attributes[:export_invoices_flag] if attributes.key?(:export_invoices_flag)

      if attributes.key?(:included_invoice_ids) && (value = attributes[:included_invoice_ids]).is_a?(Array)
        self.included_invoice_ids = value
      end

      if attributes.key?(:excluded_invoice_ids) && (value = attributes[:excluded_invoice_ids]).is_a?(Array)
        self.excluded_invoice_ids = value
      end

      self.export_expenses_flag = attributes[:export_expenses_flag] if attributes.key?(:export_expenses_flag)

      if attributes.key?(:included_expense_ids) && (value = attributes[:included_expense_ids]).is_a?(Array)
        self.included_expense_ids = value
      end

      if attributes.key?(:excluded_expense_ids) && (value = attributes[:excluded_expense_ids]).is_a?(Array)
        self.excluded_expense_ids = value
      end

      self.export_payments_flag = attributes[:export_payments_flag] if attributes.key?(:export_payments_flag)

      if attributes.key?(:included_payment_ids) && (value = attributes[:included_payment_ids]).is_a?(Array)
        self.included_payment_ids = value
      end

      self.export_products_flag = attributes[:export_products_flag] if attributes.key?(:export_products_flag)

      if attributes.key?(:included_product_ids) && (value = attributes[:included_product_ids]).is_a?(Array)
        self.included_product_ids = value
      end

      return unless attributes.key?(:excluded_product_ids)

      if (value = attributes[:excluded_product_ids]).is_a?(Array)
        self.excluded_product_ids = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      summarize_invoices_validator = EnumAttributeValidator.new('String', %w[Default Condensed Detailed])
      return false unless summarize_invoices_validator.valid?(@summarize_invoices)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] summarize_invoices Object to be assigned
    def summarize_invoices=(summarize_invoices)
      validator = EnumAttributeValidator.new('String', %w[Default Condensed Detailed])
      raise ArgumentError, "invalid value for \"summarize_invoices\", must be one of #{validator.allowable_values}." unless validator.valid?(summarize_invoices)

      @summarize_invoices = summarize_invoices
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        batch_identifier == other.batch_identifier &&
        gl_interface_identifier == other.gl_interface_identifier &&
        thru_date == other.thru_date &&
        location_id == other.location_id &&
        summarize_invoices == other.summarize_invoices &&
        export_invoices_flag == other.export_invoices_flag &&
        included_invoice_ids == other.included_invoice_ids &&
        excluded_invoice_ids == other.excluded_invoice_ids &&
        export_expenses_flag == other.export_expenses_flag &&
        included_expense_ids == other.included_expense_ids &&
        excluded_expense_ids == other.excluded_expense_ids &&
        export_payments_flag == other.export_payments_flag &&
        included_payment_ids == other.included_payment_ids &&
        export_products_flag == other.export_products_flag &&
        included_product_ids == other.included_product_ids &&
        excluded_product_ids == other.excluded_product_ids
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [batch_identifier, gl_interface_identifier, thru_date, location_id, summarize_invoices, export_invoices_flag, included_invoice_ids, excluded_invoice_ids, export_expenses_flag, included_expense_ids, excluded_expense_ids, export_payments_flag, included_payment_ids, export_products_flag, included_product_ids, excluded_product_ids].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
