# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class CompanySite
    #  Max length: 50;
    attr_accessor :name

    attr_accessor :id, :state_reference, :country, :address_format, :tax_code, :entity_type, :expense_reimbursement,
                  :primary_address_flag, :default_shipping_flag, :default_billing_flag, :default_mailing_flag, :inactive_flag, :bill_separate_flag, :mobile_guid, :calendar, :time_zone, :company, :_info, :custom_fields

    #  Max length: 50;
    attr_accessor :address_line1

    #  Max length: 50;
    attr_accessor :address_line2

    #  Max length: 50;
    attr_accessor :city

    #  Max length: 12;
    attr_accessor :zip

    #  Max length: 30;
    attr_accessor :phone_number

    #  Max length: 30;
    attr_accessor :phone_number_ext

    #  Max length: 30;
    attr_accessor :fax_number

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        name: :name,
        id: :id,
        address_line1: :addressLine1,
        address_line2: :addressLine2,
        city: :city,
        state_reference: :stateReference,
        zip: :zip,
        country: :country,
        address_format: :addressFormat,
        phone_number: :phoneNumber,
        phone_number_ext: :phoneNumberExt,
        fax_number: :faxNumber,
        tax_code: :taxCode,
        entity_type: :entityType,
        expense_reimbursement: :expenseReimbursement,
        primary_address_flag: :primaryAddressFlag,
        default_shipping_flag: :defaultShippingFlag,
        default_billing_flag: :defaultBillingFlag,
        default_mailing_flag: :defaultMailingFlag,
        inactive_flag: :inactiveFlag,
        bill_separate_flag: :billSeparateFlag,
        mobile_guid: :mobileGuid,
        calendar: :calendar,
        time_zone: :timeZone,
        company: :company,
        _info: :_info,
        custom_fields: :customFields
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        name: :String,
        id: :Integer,
        address_line1: :String,
        address_line2: :String,
        city: :String,
        state_reference: :StateReference,
        zip: :String,
        country: :CountryReference,
        address_format: :String,
        phone_number: :String,
        phone_number_ext: :String,
        fax_number: :String,
        tax_code: :TaxCodeReference,
        entity_type: :EntityTypeReference,
        expense_reimbursement: :Float,
        primary_address_flag: :Boolean,
        default_shipping_flag: :Boolean,
        default_billing_flag: :Boolean,
        default_mailing_flag: :Boolean,
        inactive_flag: :Boolean,
        bill_separate_flag: :Boolean,
        mobile_guid: :String,
        calendar: :CalendarReference,
        time_zone: :TimeZoneSetupReference,
        company: :CompanyReference,
        _info: :'Hash<String, String>',
        custom_fields: :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                expense_reimbursement
                primary_address_flag
                default_shipping_flag
                default_billing_flag
                default_mailing_flag
                inactive_flag
                bill_separate_flag
                mobile_guid
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `ConnectWise::CompanySite` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless acceptable_attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `ConnectWise::CompanySite`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.name = (attributes[:name] if attributes.key?(:name))

      self.id = attributes[:id] if attributes.key?(:id)

      self.address_line1 = attributes[:address_line1] if attributes.key?(:address_line1)

      self.address_line2 = attributes[:address_line2] if attributes.key?(:address_line2)

      self.city = attributes[:city] if attributes.key?(:city)

      self.state_reference = attributes[:state_reference] if attributes.key?(:state_reference)

      self.zip = attributes[:zip] if attributes.key?(:zip)

      self.country = attributes[:country] if attributes.key?(:country)

      self.address_format = attributes[:address_format] if attributes.key?(:address_format)

      self.phone_number = attributes[:phone_number] if attributes.key?(:phone_number)

      self.phone_number_ext = attributes[:phone_number_ext] if attributes.key?(:phone_number_ext)

      self.fax_number = attributes[:fax_number] if attributes.key?(:fax_number)

      self.tax_code = attributes[:tax_code] if attributes.key?(:tax_code)

      self.entity_type = attributes[:entity_type] if attributes.key?(:entity_type)

      self.expense_reimbursement = attributes[:expense_reimbursement] if attributes.key?(:expense_reimbursement)

      self.primary_address_flag = attributes[:primary_address_flag] if attributes.key?(:primary_address_flag)

      self.default_shipping_flag = attributes[:default_shipping_flag] if attributes.key?(:default_shipping_flag)

      self.default_billing_flag = attributes[:default_billing_flag] if attributes.key?(:default_billing_flag)

      self.default_mailing_flag = attributes[:default_mailing_flag] if attributes.key?(:default_mailing_flag)

      self.inactive_flag = attributes[:inactive_flag] if attributes.key?(:inactive_flag)

      self.bill_separate_flag = attributes[:bill_separate_flag] if attributes.key?(:bill_separate_flag)

      self.mobile_guid = attributes[:mobile_guid] if attributes.key?(:mobile_guid)

      self.calendar = attributes[:calendar] if attributes.key?(:calendar)

      self.time_zone = attributes[:time_zone] if attributes.key?(:time_zone)

      self.company = attributes[:company] if attributes.key?(:company)

      if attributes.key?(:_info) && (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end

      return unless attributes.key?(:custom_fields)

      if (value = attributes[:custom_fields]).is_a?(Array)
        self.custom_fields = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "name", name cannot be nil.') if @name.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @name.nil?

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      raise ArgumentError, 'name cannot be nil' if name.nil?

      @name = name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        id == other.id &&
        address_line1 == other.address_line1 &&
        address_line2 == other.address_line2 &&
        city == other.city &&
        state_reference == other.state_reference &&
        zip == other.zip &&
        country == other.country &&
        address_format == other.address_format &&
        phone_number == other.phone_number &&
        phone_number_ext == other.phone_number_ext &&
        fax_number == other.fax_number &&
        tax_code == other.tax_code &&
        entity_type == other.entity_type &&
        expense_reimbursement == other.expense_reimbursement &&
        primary_address_flag == other.primary_address_flag &&
        default_shipping_flag == other.default_shipping_flag &&
        default_billing_flag == other.default_billing_flag &&
        default_mailing_flag == other.default_mailing_flag &&
        inactive_flag == other.inactive_flag &&
        bill_separate_flag == other.bill_separate_flag &&
        mobile_guid == other.mobile_guid &&
        calendar == other.calendar &&
        time_zone == other.time_zone &&
        company == other.company &&
        _info == other._info &&
        custom_fields == other.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, id, address_line1, address_line2, city, state_reference, zip, country, address_format, phone_number,
       phone_number_ext, fax_number, tax_code, entity_type, expense_reimbursement, primary_address_flag, default_shipping_flag, default_billing_flag, default_mailing_flag, inactive_flag, bill_separate_flag, mobile_guid, calendar, time_zone, company, _info, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
