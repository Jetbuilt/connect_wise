# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class ProjectTemplateTicket
    #  Max length: 100;
    attr_accessor :description

    attr_accessor :id, :project_template_id, :project_template_phase_id, :line_number, :connect_wise_id, :parent_id, :parent_connect_wise_id, :project_template_phase_cw_id, :notes, :internal_analysis, :resolution, :budget_hours, :duration, :bill_separately_flag, :mark_as_milestone_flag, :pm_tmp_project_rec_id, :predecessor_type, :predecessor_id, :predecessor_closed_flag, :lag_days, :lag_nonworking_days_flag, :priority, :source, :work_role, :work_type, :_info

    #  Max length: 50;
    attr_accessor :wbs_code

    #  Max length: 1;
    attr_accessor :record_type

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        description: :description,
        id: :id,
        project_template_id: :projectTemplateId,
        project_template_phase_id: :projectTemplatePhaseId,
        line_number: :lineNumber,
        connect_wise_id: :connectWiseId,
        parent_id: :parentId,
        parent_connect_wise_id: :parentConnectWiseId,
        project_template_phase_cw_id: :projectTemplatePhaseCwId,
        notes: :notes,
        internal_analysis: :internalAnalysis,
        resolution: :resolution,
        budget_hours: :budgetHours,
        duration: :duration,
        wbs_code: :wbsCode,
        bill_separately_flag: :billSeparatelyFlag,
        mark_as_milestone_flag: :markAsMilestoneFlag,
        record_type: :recordType,
        pm_tmp_project_rec_id: :pmTmpProjectRecID,
        predecessor_type: :predecessorType,
        predecessor_id: :predecessorId,
        predecessor_closed_flag: :predecessorClosedFlag,
        lag_days: :lagDays,
        lag_nonworking_days_flag: :lagNonworkingDaysFlag,
        priority: :priority,
        source: :source,
        work_role: :workRole,
        work_type: :workType,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        description: :String,
        id: :Integer,
        project_template_id: :Integer,
        project_template_phase_id: :Integer,
        line_number: :Float,
        connect_wise_id: :String,
        parent_id: :Integer,
        parent_connect_wise_id: :String,
        project_template_phase_cw_id: :String,
        notes: :String,
        internal_analysis: :String,
        resolution: :String,
        budget_hours: :Float,
        duration: :Integer,
        wbs_code: :String,
        bill_separately_flag: :Boolean,
        mark_as_milestone_flag: :Boolean,
        record_type: :String,
        pm_tmp_project_rec_id: :Integer,
        predecessor_type: :String,
        predecessor_id: :Integer,
        predecessor_closed_flag: :Boolean,
        lag_days: :Integer,
        lag_nonworking_days_flag: :Boolean,
        priority: :PriorityReference,
        source: :ServiceSourceReference,
        work_role: :WorkRoleReference,
        work_type: :WorkTypeReference,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                project_template_id
                project_template_phase_id
                line_number
                parent_id
                budget_hours
                duration
                bill_separately_flag
                mark_as_milestone_flag
                pm_tmp_project_rec_id
                predecessor_type
                predecessor_id
                predecessor_closed_flag
                lag_days
                lag_nonworking_days_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::ProjectTemplateTicket` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::ProjectTemplateTicket`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.description = (attributes[:description] if attributes.key?(:description))

      self.id = attributes[:id] if attributes.key?(:id)

      self.project_template_id = attributes[:project_template_id] if attributes.key?(:project_template_id)

      self.project_template_phase_id = attributes[:project_template_phase_id] if attributes.key?(:project_template_phase_id)

      self.line_number = attributes[:line_number] if attributes.key?(:line_number)

      self.connect_wise_id = attributes[:connect_wise_id] if attributes.key?(:connect_wise_id)

      self.parent_id = attributes[:parent_id] if attributes.key?(:parent_id)

      self.parent_connect_wise_id = attributes[:parent_connect_wise_id] if attributes.key?(:parent_connect_wise_id)

      self.project_template_phase_cw_id = attributes[:project_template_phase_cw_id] if attributes.key?(:project_template_phase_cw_id)

      self.notes = attributes[:notes] if attributes.key?(:notes)

      self.internal_analysis = attributes[:internal_analysis] if attributes.key?(:internal_analysis)

      self.resolution = attributes[:resolution] if attributes.key?(:resolution)

      self.budget_hours = attributes[:budget_hours] if attributes.key?(:budget_hours)

      self.duration = attributes[:duration] if attributes.key?(:duration)

      self.wbs_code = attributes[:wbs_code] if attributes.key?(:wbs_code)

      self.bill_separately_flag = attributes[:bill_separately_flag] if attributes.key?(:bill_separately_flag)

      self.mark_as_milestone_flag = attributes[:mark_as_milestone_flag] if attributes.key?(:mark_as_milestone_flag)

      self.record_type = attributes[:record_type] if attributes.key?(:record_type)

      self.pm_tmp_project_rec_id = attributes[:pm_tmp_project_rec_id] if attributes.key?(:pm_tmp_project_rec_id)

      self.predecessor_type = attributes[:predecessor_type] if attributes.key?(:predecessor_type)

      self.predecessor_id = attributes[:predecessor_id] if attributes.key?(:predecessor_id)

      self.predecessor_closed_flag = attributes[:predecessor_closed_flag] if attributes.key?(:predecessor_closed_flag)

      self.lag_days = attributes[:lag_days] if attributes.key?(:lag_days)

      self.lag_nonworking_days_flag = attributes[:lag_nonworking_days_flag] if attributes.key?(:lag_nonworking_days_flag)

      self.priority = attributes[:priority] if attributes.key?(:priority)

      self.source = attributes[:source] if attributes.key?(:source)

      self.work_role = attributes[:work_role] if attributes.key?(:work_role)

      self.work_type = attributes[:work_type] if attributes.key?(:work_type)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "description", description cannot be nil.') if @description.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @description.nil?

      predecessor_type_validator = EnumAttributeValidator.new('String', %w[Ticket Phase])
      return false unless predecessor_type_validator.valid?(@predecessor_type)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      raise ArgumentError, 'description cannot be nil' if description.nil?

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] predecessor_type Object to be assigned
    def predecessor_type=(predecessor_type)
      validator = EnumAttributeValidator.new('String', %w[Ticket Phase])
      raise ArgumentError, "invalid value for \"predecessor_type\", must be one of #{validator.allowable_values}." unless validator.valid?(predecessor_type)

      @predecessor_type = predecessor_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        description == other.description &&
        id == other.id &&
        project_template_id == other.project_template_id &&
        project_template_phase_id == other.project_template_phase_id &&
        line_number == other.line_number &&
        connect_wise_id == other.connect_wise_id &&
        parent_id == other.parent_id &&
        parent_connect_wise_id == other.parent_connect_wise_id &&
        project_template_phase_cw_id == other.project_template_phase_cw_id &&
        notes == other.notes &&
        internal_analysis == other.internal_analysis &&
        resolution == other.resolution &&
        budget_hours == other.budget_hours &&
        duration == other.duration &&
        wbs_code == other.wbs_code &&
        bill_separately_flag == other.bill_separately_flag &&
        mark_as_milestone_flag == other.mark_as_milestone_flag &&
        record_type == other.record_type &&
        pm_tmp_project_rec_id == other.pm_tmp_project_rec_id &&
        predecessor_type == other.predecessor_type &&
        predecessor_id == other.predecessor_id &&
        predecessor_closed_flag == other.predecessor_closed_flag &&
        lag_days == other.lag_days &&
        lag_nonworking_days_flag == other.lag_nonworking_days_flag &&
        priority == other.priority &&
        source == other.source &&
        work_role == other.work_role &&
        work_type == other.work_type &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [description, id, project_template_id, project_template_phase_id, line_number, connect_wise_id, parent_id, parent_connect_wise_id, project_template_phase_cw_id, notes, internal_analysis, resolution, budget_hours, duration, wbs_code, bill_separately_flag, mark_as_milestone_flag, record_type, pm_tmp_project_rec_id, predecessor_type, predecessor_id, predecessor_closed_flag, lag_days, lag_nonworking_days_flag, priority, source, work_role, work_type, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
