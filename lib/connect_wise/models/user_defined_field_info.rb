# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class UserDefinedFieldInfo
    # ID of the custom user defined field
    attr_accessor :id

    # Id of the Pod where the custom field will be placed
    attr_accessor :pod_id

    # Field caption
    attr_accessor :caption

    # Must be between 1 and 500.  This defines the order in which the custom fields will appear
    attr_accessor :sequence_number

    # Help text to accompany the custom field
    attr_accessor :help_text

    attr_accessor :field_type_identifier, :entry_type_identifier, :required_flag, :display_on_screen_flag,
                  :read_only_flag, :options, :_info

    # Only valid for Number or percent
    attr_accessor :number_decimals

    # Denotes that this custom field is included on a list view
    attr_accessor :list_view_flag

    # Only available with Button Field Type. Required when entryTypeIdentifier is button
    attr_accessor :button_url

    # List of business unit ids using custom field
    attr_accessor :business_unit_ids

    # List of locations ids using custom field
    attr_accessor :location_ids

    # Date in UTC the custom field was created
    attr_accessor :date_created

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        pod_id: :podId,
        caption: :caption,
        sequence_number: :sequenceNumber,
        help_text: :helpText,
        field_type_identifier: :fieldTypeIdentifier,
        number_decimals: :numberDecimals,
        entry_type_identifier: :entryTypeIdentifier,
        required_flag: :requiredFlag,
        display_on_screen_flag: :displayOnScreenFlag,
        read_only_flag: :readOnlyFlag,
        list_view_flag: :listViewFlag,
        button_url: :buttonUrl,
        options: :options,
        business_unit_ids: :businessUnitIds,
        location_ids: :locationIds,
        date_created: :dateCreated,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        pod_id: :Integer,
        caption: :String,
        sequence_number: :Integer,
        help_text: :String,
        field_type_identifier: :String,
        number_decimals: :Integer,
        entry_type_identifier: :String,
        required_flag: :Boolean,
        display_on_screen_flag: :Boolean,
        read_only_flag: :Boolean,
        list_view_flag: :Boolean,
        button_url: :String,
        options: :'Array<UserDefinedFieldOption>',
        business_unit_ids: :'Array<Integer>',
        location_ids: :'Array<Integer>',
        date_created: :String,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                pod_id
                sequence_number
                field_type_identifier
                number_decimals
                entry_type_identifier
                required_flag
                display_on_screen_flag
                read_only_flag
                list_view_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `ConnectWise::UserDefinedFieldInfo` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless acceptable_attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `ConnectWise::UserDefinedFieldInfo`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.pod_id = attributes[:pod_id] if attributes.key?(:pod_id)

      self.caption = attributes[:caption] if attributes.key?(:caption)

      self.sequence_number = attributes[:sequence_number] if attributes.key?(:sequence_number)

      self.help_text = attributes[:help_text] if attributes.key?(:help_text)

      self.field_type_identifier = attributes[:field_type_identifier] if attributes.key?(:field_type_identifier)

      self.number_decimals = attributes[:number_decimals] if attributes.key?(:number_decimals)

      self.entry_type_identifier = attributes[:entry_type_identifier] if attributes.key?(:entry_type_identifier)

      self.required_flag = attributes[:required_flag] if attributes.key?(:required_flag)

      self.display_on_screen_flag = attributes[:display_on_screen_flag] if attributes.key?(:display_on_screen_flag)

      self.read_only_flag = attributes[:read_only_flag] if attributes.key?(:read_only_flag)

      self.list_view_flag = attributes[:list_view_flag] if attributes.key?(:list_view_flag)

      self.button_url = attributes[:button_url] if attributes.key?(:button_url)

      if attributes.key?(:options) && (value = attributes[:options]).is_a?(Array)
        self.options = value
      end

      if attributes.key?(:business_unit_ids) && (value = attributes[:business_unit_ids]).is_a?(Array)
        self.business_unit_ids = value
      end

      if attributes.key?(:location_ids) && (value = attributes[:location_ids]).is_a?(Array)
        self.location_ids = value
      end

      self.date_created = attributes[:date_created] if attributes.key?(:date_created)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      field_type_identifier_validator = EnumAttributeValidator.new('String',
                                                                   %w[TextArea Button Currency Date Hyperlink IPAddress Checkbox Number Percent PhoneNumber
                                                                      Text Password])
      return false unless field_type_identifier_validator.valid?(@field_type_identifier)

      entry_type_identifier_validator = EnumAttributeValidator.new('String', %w[Date EntryField List Option])
      return false unless entry_type_identifier_validator.valid?(@entry_type_identifier)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] field_type_identifier Object to be assigned
    def field_type_identifier=(field_type_identifier)
      validator = EnumAttributeValidator.new('String',
                                             %w[TextArea Button Currency Date Hyperlink IPAddress Checkbox Number Percent PhoneNumber
                                                Text Password])
      unless validator.valid?(field_type_identifier)
        raise ArgumentError,
              "invalid value for \"field_type_identifier\", must be one of #{validator.allowable_values}."
      end

      @field_type_identifier = field_type_identifier
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] entry_type_identifier Object to be assigned
    def entry_type_identifier=(entry_type_identifier)
      validator = EnumAttributeValidator.new('String', %w[Date EntryField List Option])
      unless validator.valid?(entry_type_identifier)
        raise ArgumentError,
              "invalid value for \"entry_type_identifier\", must be one of #{validator.allowable_values}."
      end

      @entry_type_identifier = entry_type_identifier
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        pod_id == other.pod_id &&
        caption == other.caption &&
        sequence_number == other.sequence_number &&
        help_text == other.help_text &&
        field_type_identifier == other.field_type_identifier &&
        number_decimals == other.number_decimals &&
        entry_type_identifier == other.entry_type_identifier &&
        required_flag == other.required_flag &&
        display_on_screen_flag == other.display_on_screen_flag &&
        read_only_flag == other.read_only_flag &&
        list_view_flag == other.list_view_flag &&
        button_url == other.button_url &&
        options == other.options &&
        business_unit_ids == other.business_unit_ids &&
        location_ids == other.location_ids &&
        date_created == other.date_created &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, pod_id, caption, sequence_number, help_text, field_type_identifier, number_decimals, entry_type_identifier,
       required_flag, display_on_screen_flag, read_only_flag, list_view_flag, button_url, options, business_unit_ids, location_ids, date_created, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
