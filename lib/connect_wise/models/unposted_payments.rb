# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class UnpostedPayments
    attr_accessor :id, :type, :source, :invoice, :amount, :payment_date, :applied_by, :_info, :wise_pay_payment,
                  :payment_sync_status, :payment_sync_date, :payment_account, :a_r_payment_account

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        type: :type,
        source: :source,
        invoice: :invoice,
        amount: :amount,
        payment_date: :paymentDate,
        applied_by: :appliedBy,
        _info: :_info,
        wise_pay_payment: :wisePayPayment,
        payment_sync_status: :paymentSyncStatus,
        payment_sync_date: :paymentSyncDate,
        payment_account: :paymentAccount,
        a_r_payment_account: :aRPaymentAccount
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        type: :String,
        source: :String,
        invoice: :InvoiceReference,
        amount: :Float,
        payment_date: :String,
        applied_by: :String,
        _info: :'Hash<String, String>',
        wise_pay_payment: :WisePayPayment,
        payment_sync_status: :String,
        payment_sync_date: :String,
        payment_account: :String,
        a_r_payment_account: :String
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
                :amount
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `ConnectWise::UnpostedPayments` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless acceptable_attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `ConnectWise::UnpostedPayments`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.type = attributes[:type] if attributes.key?(:type)

      self.source = attributes[:source] if attributes.key?(:source)

      self.invoice = attributes[:invoice] if attributes.key?(:invoice)

      self.amount = attributes[:amount] if attributes.key?(:amount)

      self.payment_date = attributes[:payment_date] if attributes.key?(:payment_date)

      self.applied_by = attributes[:applied_by] if attributes.key?(:applied_by)

      if attributes.key?(:_info) && (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end

      self.wise_pay_payment = attributes[:wise_pay_payment] if attributes.key?(:wise_pay_payment)

      self.payment_sync_status = attributes[:payment_sync_status] if attributes.key?(:payment_sync_status)

      self.payment_sync_date = attributes[:payment_sync_date] if attributes.key?(:payment_sync_date)

      self.payment_account = attributes[:payment_account] if attributes.key?(:payment_account)

      return unless attributes.key?(:a_r_payment_account)

      self.a_r_payment_account = attributes[:a_r_payment_account]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      source_validator = EnumAttributeValidator.new('String', %w[Default WisePay])
      return false unless source_validator.valid?(@source)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source Object to be assigned
    def source=(source)
      validator = EnumAttributeValidator.new('String', %w[Default WisePay])
      unless validator.valid?(source)
        raise ArgumentError, "invalid value for \"source\", must be one of #{validator.allowable_values}."
      end

      @source = source
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        type == other.type &&
        source == other.source &&
        invoice == other.invoice &&
        amount == other.amount &&
        payment_date == other.payment_date &&
        applied_by == other.applied_by &&
        _info == other._info &&
        wise_pay_payment == other.wise_pay_payment &&
        payment_sync_status == other.payment_sync_status &&
        payment_sync_date == other.payment_sync_date &&
        payment_account == other.payment_account &&
        a_r_payment_account == other.a_r_payment_account
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, type, source, invoice, amount, payment_date, applied_by, _info, wise_pay_payment, payment_sync_status,
       payment_sync_date, payment_account, a_r_payment_account].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
