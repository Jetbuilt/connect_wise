# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class TimeEntry
    attr_accessor :time_start, :id, :company, :company_type, :member, :location_id, :business_unit_id,
                  :business_group_desc, :location, :department, :work_type, :work_role, :agreement, :agreement_type, :activity, :opportunity_recid, :project_activity, :territory, :time_end, :hours_deduct, :actual_hours, :notes, :internal_notes, :add_to_detail_description_flag, :add_to_internal_analysis_flag, :add_to_resolution_flag, :hours_billed, :invoice_hours, :hourly_cost, :entered_by, :date_entered, :invoice, :mobile_guid, :overage_rate, :agreement_hours, :agreement_amount, :agreement_adjustment, :adjustment, :invoice_ready, :time_sheet, :status, :ticket, :project, :phase, :ticket_board, :ticket_status, :ticket_type, :ticket_sub_type, :invoice_flag, :extended_invoice_amount, :location_name, :tax_code, :_info, :custom_fields

    # If chargeToId is not specified, we asume you enter time against the company specified
    attr_accessor :charge_to_id

    # If chargeToId is not specified, we asume you enter time against the company specified
    attr_accessor :charge_to_type

    #  Required On Updates;
    attr_accessor :billable_option

    # This is an action flag. To update this value use the /service/tickets endpoint automaticEmailResourceFlag field
    attr_accessor :email_resource_flag

    # This is an action flag. To update this value use the /service/tickets endpoint automaticEmailContactFlag field
    attr_accessor :email_contact_flag

    # This is an action flag. To update this value use the /service/tickets endpoint automaticEmailCcFlag field
    attr_accessor :email_cc_flag

    # To update this value use the /service/tickets endpoint automaticEmailCc field
    attr_accessor :email_cc

    # This field may only be Updated, it is defaulted on Create
    attr_accessor :hourly_rate

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        time_start: :timeStart,
        id: :id,
        company: :company,
        company_type: :companyType,
        charge_to_id: :chargeToId,
        charge_to_type: :chargeToType,
        member: :member,
        location_id: :locationId,
        business_unit_id: :businessUnitId,
        business_group_desc: :businessGroupDesc,
        location: :location,
        department: :department,
        work_type: :workType,
        work_role: :workRole,
        agreement: :agreement,
        agreement_type: :agreementType,
        activity: :activity,
        opportunity_recid: :opportunityRecid,
        project_activity: :projectActivity,
        territory: :territory,
        time_end: :timeEnd,
        hours_deduct: :hoursDeduct,
        actual_hours: :actualHours,
        billable_option: :billableOption,
        notes: :notes,
        internal_notes: :internalNotes,
        add_to_detail_description_flag: :addToDetailDescriptionFlag,
        add_to_internal_analysis_flag: :addToInternalAnalysisFlag,
        add_to_resolution_flag: :addToResolutionFlag,
        email_resource_flag: :emailResourceFlag,
        email_contact_flag: :emailContactFlag,
        email_cc_flag: :emailCcFlag,
        email_cc: :emailCc,
        hours_billed: :hoursBilled,
        invoice_hours: :invoiceHours,
        hourly_cost: :hourlyCost,
        entered_by: :enteredBy,
        date_entered: :dateEntered,
        invoice: :invoice,
        mobile_guid: :mobileGuid,
        hourly_rate: :hourlyRate,
        overage_rate: :overageRate,
        agreement_hours: :agreementHours,
        agreement_amount: :agreementAmount,
        agreement_adjustment: :agreementAdjustment,
        adjustment: :adjustment,
        invoice_ready: :invoiceReady,
        time_sheet: :timeSheet,
        status: :status,
        ticket: :ticket,
        project: :project,
        phase: :phase,
        ticket_board: :ticketBoard,
        ticket_status: :ticketStatus,
        ticket_type: :ticketType,
        ticket_sub_type: :ticketSubType,
        invoice_flag: :invoiceFlag,
        extended_invoice_amount: :extendedInvoiceAmount,
        location_name: :locationName,
        tax_code: :taxCode,
        _info: :_info,
        custom_fields: :customFields
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        time_start: :Time,
        id: :Integer,
        company: :CompanyReference,
        company_type: :String,
        charge_to_id: :Integer,
        charge_to_type: :String,
        member: :MemberReference,
        location_id: :Integer,
        business_unit_id: :Integer,
        business_group_desc: :String,
        location: :OwnerLevelReference,
        department: :BillingUnitReference,
        work_type: :WorkTypeReference,
        work_role: :WorkRoleReference,
        agreement: :AgreementReference,
        agreement_type: :String,
        activity: :ActivityReference,
        opportunity_recid: :Integer,
        project_activity: :String,
        territory: :String,
        time_end: :Time,
        hours_deduct: :Float,
        actual_hours: :Float,
        billable_option: :String,
        notes: :String,
        internal_notes: :String,
        add_to_detail_description_flag: :Boolean,
        add_to_internal_analysis_flag: :Boolean,
        add_to_resolution_flag: :Boolean,
        email_resource_flag: :Boolean,
        email_contact_flag: :Boolean,
        email_cc_flag: :Boolean,
        email_cc: :String,
        hours_billed: :Float,
        invoice_hours: :Float,
        hourly_cost: :String,
        entered_by: :String,
        date_entered: :Time,
        invoice: :InvoiceReference,
        mobile_guid: :String,
        hourly_rate: :Float,
        overage_rate: :Float,
        agreement_hours: :Float,
        agreement_amount: :Float,
        agreement_adjustment: :Float,
        adjustment: :Float,
        invoice_ready: :Integer,
        time_sheet: :TimeSheetReference,
        status: :String,
        ticket: :TicketReference,
        project: :ProjectReference,
        phase: :ProjectPhaseReference,
        ticket_board: :String,
        ticket_status: :String,
        ticket_type: :String,
        ticket_sub_type: :String,
        invoice_flag: :Boolean,
        extended_invoice_amount: :Float,
        location_name: :String,
        tax_code: :TaxCodeReference,
        _info: :'Hash<String, String>',
        custom_fields: :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                charge_to_id
                charge_to_type
                location_id
                business_unit_id
                opportunity_recid
                hours_deduct
                actual_hours
                billable_option
                add_to_detail_description_flag
                add_to_internal_analysis_flag
                add_to_resolution_flag
                email_resource_flag
                email_contact_flag
                email_cc_flag
                hours_billed
                invoice_hours
                mobile_guid
                hourly_rate
                overage_rate
                agreement_hours
                agreement_amount
                agreement_adjustment
                adjustment
                invoice_ready
                status
                invoice_flag
                extended_invoice_amount
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `ConnectWise::TimeEntry` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless acceptable_attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `ConnectWise::TimeEntry`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.time_start = (attributes[:time_start] if attributes.key?(:time_start))

      self.id = attributes[:id] if attributes.key?(:id)

      self.company = attributes[:company] if attributes.key?(:company)

      self.company_type = attributes[:company_type] if attributes.key?(:company_type)

      self.charge_to_id = attributes[:charge_to_id] if attributes.key?(:charge_to_id)

      self.charge_to_type = attributes[:charge_to_type] if attributes.key?(:charge_to_type)

      self.member = attributes[:member] if attributes.key?(:member)

      self.location_id = attributes[:location_id] if attributes.key?(:location_id)

      self.business_unit_id = attributes[:business_unit_id] if attributes.key?(:business_unit_id)

      self.business_group_desc = attributes[:business_group_desc] if attributes.key?(:business_group_desc)

      self.location = attributes[:location] if attributes.key?(:location)

      self.department = attributes[:department] if attributes.key?(:department)

      self.work_type = attributes[:work_type] if attributes.key?(:work_type)

      self.work_role = attributes[:work_role] if attributes.key?(:work_role)

      self.agreement = attributes[:agreement] if attributes.key?(:agreement)

      self.agreement_type = attributes[:agreement_type] if attributes.key?(:agreement_type)

      self.activity = attributes[:activity] if attributes.key?(:activity)

      self.opportunity_recid = attributes[:opportunity_recid] if attributes.key?(:opportunity_recid)

      self.project_activity = attributes[:project_activity] if attributes.key?(:project_activity)

      self.territory = attributes[:territory] if attributes.key?(:territory)

      self.time_end = attributes[:time_end] if attributes.key?(:time_end)

      self.hours_deduct = attributes[:hours_deduct] if attributes.key?(:hours_deduct)

      self.actual_hours = attributes[:actual_hours] if attributes.key?(:actual_hours)

      self.billable_option = attributes[:billable_option] if attributes.key?(:billable_option)

      self.notes = attributes[:notes] if attributes.key?(:notes)

      self.internal_notes = attributes[:internal_notes] if attributes.key?(:internal_notes)

      if attributes.key?(:add_to_detail_description_flag)
        self.add_to_detail_description_flag = attributes[:add_to_detail_description_flag]
      end

      if attributes.key?(:add_to_internal_analysis_flag)
        self.add_to_internal_analysis_flag = attributes[:add_to_internal_analysis_flag]
      end

      self.add_to_resolution_flag = attributes[:add_to_resolution_flag] if attributes.key?(:add_to_resolution_flag)

      self.email_resource_flag = attributes[:email_resource_flag] if attributes.key?(:email_resource_flag)

      self.email_contact_flag = attributes[:email_contact_flag] if attributes.key?(:email_contact_flag)

      self.email_cc_flag = attributes[:email_cc_flag] if attributes.key?(:email_cc_flag)

      self.email_cc = attributes[:email_cc] if attributes.key?(:email_cc)

      self.hours_billed = attributes[:hours_billed] if attributes.key?(:hours_billed)

      self.invoice_hours = attributes[:invoice_hours] if attributes.key?(:invoice_hours)

      self.hourly_cost = attributes[:hourly_cost] if attributes.key?(:hourly_cost)

      self.entered_by = attributes[:entered_by] if attributes.key?(:entered_by)

      self.date_entered = attributes[:date_entered] if attributes.key?(:date_entered)

      self.invoice = attributes[:invoice] if attributes.key?(:invoice)

      self.mobile_guid = attributes[:mobile_guid] if attributes.key?(:mobile_guid)

      self.hourly_rate = attributes[:hourly_rate] if attributes.key?(:hourly_rate)

      self.overage_rate = attributes[:overage_rate] if attributes.key?(:overage_rate)

      self.agreement_hours = attributes[:agreement_hours] if attributes.key?(:agreement_hours)

      self.agreement_amount = attributes[:agreement_amount] if attributes.key?(:agreement_amount)

      self.agreement_adjustment = attributes[:agreement_adjustment] if attributes.key?(:agreement_adjustment)

      self.adjustment = attributes[:adjustment] if attributes.key?(:adjustment)

      self.invoice_ready = attributes[:invoice_ready] if attributes.key?(:invoice_ready)

      self.time_sheet = attributes[:time_sheet] if attributes.key?(:time_sheet)

      self.status = attributes[:status] if attributes.key?(:status)

      self.ticket = attributes[:ticket] if attributes.key?(:ticket)

      self.project = attributes[:project] if attributes.key?(:project)

      self.phase = attributes[:phase] if attributes.key?(:phase)

      self.ticket_board = attributes[:ticket_board] if attributes.key?(:ticket_board)

      self.ticket_status = attributes[:ticket_status] if attributes.key?(:ticket_status)

      self.ticket_type = attributes[:ticket_type] if attributes.key?(:ticket_type)

      self.ticket_sub_type = attributes[:ticket_sub_type] if attributes.key?(:ticket_sub_type)

      self.invoice_flag = attributes[:invoice_flag] if attributes.key?(:invoice_flag)

      self.extended_invoice_amount = attributes[:extended_invoice_amount] if attributes.key?(:extended_invoice_amount)

      self.location_name = attributes[:location_name] if attributes.key?(:location_name)

      self.tax_code = attributes[:tax_code] if attributes.key?(:tax_code)

      if attributes.key?(:_info) && (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end

      return unless attributes.key?(:custom_fields)

      if (value = attributes[:custom_fields]).is_a?(Array)
        self.custom_fields = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "time_start", time_start cannot be nil.') if @time_start.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @time_start.nil?

      charge_to_type_validator = EnumAttributeValidator.new('String',
                                                            %w[Company ServiceTicket ProjectTicket ChargeCode
                                                               Activity])
      return false unless charge_to_type_validator.valid?(@charge_to_type)

      billable_option_validator = EnumAttributeValidator.new('String',
                                                             %w[Billable DoNotBill NoCharge NoDefault])
      return false unless billable_option_validator.valid?(@billable_option)

      status_validator = EnumAttributeValidator.new('String',
                                                    %w[Open Rejected PendingApproval ErrorsCorrected PendingProjectApproval ApprovedByTierOne
                                                       RejectBySecondTier ApprovedByTierTwo ReadyToBill Billed WrittenOff BilledAgreement])
      return false unless status_validator.valid?(@status)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] time_start Value to be assigned
    def time_start=(time_start)
      raise ArgumentError, 'time_start cannot be nil' if time_start.nil?

      @time_start = time_start
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] charge_to_type Object to be assigned
    def charge_to_type=(charge_to_type)
      validator = EnumAttributeValidator.new('String',
                                             %w[Company ServiceTicket ProjectTicket ChargeCode Activity])
      unless validator.valid?(charge_to_type)
        raise ArgumentError, "invalid value for \"charge_to_type\", must be one of #{validator.allowable_values}."
      end

      @charge_to_type = charge_to_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billable_option Object to be assigned
    def billable_option=(billable_option)
      validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      unless validator.valid?(billable_option)
        raise ArgumentError, "invalid value for \"billable_option\", must be one of #{validator.allowable_values}."
      end

      @billable_option = billable_option
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String',
                                             %w[Open Rejected PendingApproval ErrorsCorrected PendingProjectApproval ApprovedByTierOne
                                                RejectBySecondTier ApprovedByTierTwo ReadyToBill Billed WrittenOff BilledAgreement])
      unless validator.valid?(status)
        raise ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end

      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        time_start == other.time_start &&
        id == other.id &&
        company == other.company &&
        company_type == other.company_type &&
        charge_to_id == other.charge_to_id &&
        charge_to_type == other.charge_to_type &&
        member == other.member &&
        location_id == other.location_id &&
        business_unit_id == other.business_unit_id &&
        business_group_desc == other.business_group_desc &&
        location == other.location &&
        department == other.department &&
        work_type == other.work_type &&
        work_role == other.work_role &&
        agreement == other.agreement &&
        agreement_type == other.agreement_type &&
        activity == other.activity &&
        opportunity_recid == other.opportunity_recid &&
        project_activity == other.project_activity &&
        territory == other.territory &&
        time_end == other.time_end &&
        hours_deduct == other.hours_deduct &&
        actual_hours == other.actual_hours &&
        billable_option == other.billable_option &&
        notes == other.notes &&
        internal_notes == other.internal_notes &&
        add_to_detail_description_flag == other.add_to_detail_description_flag &&
        add_to_internal_analysis_flag == other.add_to_internal_analysis_flag &&
        add_to_resolution_flag == other.add_to_resolution_flag &&
        email_resource_flag == other.email_resource_flag &&
        email_contact_flag == other.email_contact_flag &&
        email_cc_flag == other.email_cc_flag &&
        email_cc == other.email_cc &&
        hours_billed == other.hours_billed &&
        invoice_hours == other.invoice_hours &&
        hourly_cost == other.hourly_cost &&
        entered_by == other.entered_by &&
        date_entered == other.date_entered &&
        invoice == other.invoice &&
        mobile_guid == other.mobile_guid &&
        hourly_rate == other.hourly_rate &&
        overage_rate == other.overage_rate &&
        agreement_hours == other.agreement_hours &&
        agreement_amount == other.agreement_amount &&
        agreement_adjustment == other.agreement_adjustment &&
        adjustment == other.adjustment &&
        invoice_ready == other.invoice_ready &&
        time_sheet == other.time_sheet &&
        status == other.status &&
        ticket == other.ticket &&
        project == other.project &&
        phase == other.phase &&
        ticket_board == other.ticket_board &&
        ticket_status == other.ticket_status &&
        ticket_type == other.ticket_type &&
        ticket_sub_type == other.ticket_sub_type &&
        invoice_flag == other.invoice_flag &&
        extended_invoice_amount == other.extended_invoice_amount &&
        location_name == other.location_name &&
        tax_code == other.tax_code &&
        _info == other._info &&
        custom_fields == other.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [time_start, id, company, company_type, charge_to_id, charge_to_type, member, location_id, business_unit_id,
       business_group_desc, location, department, work_type, work_role, agreement, agreement_type, activity, opportunity_recid, project_activity, territory, time_end, hours_deduct, actual_hours, billable_option, notes, internal_notes, add_to_detail_description_flag, add_to_internal_analysis_flag, add_to_resolution_flag, email_resource_flag, email_contact_flag, email_cc_flag, email_cc, hours_billed, invoice_hours, hourly_cost, entered_by, date_entered, invoice, mobile_guid, hourly_rate, overage_rate, agreement_hours, agreement_amount, agreement_adjustment, adjustment, invoice_ready, time_sheet, status, ticket, project, phase, ticket_board, ticket_status, ticket_type, ticket_sub_type, invoice_flag, extended_invoice_amount, location_name, tax_code, _info, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
