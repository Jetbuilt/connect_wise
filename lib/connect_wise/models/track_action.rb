# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class TrackAction
    attr_accessor :notify_type, :id, :service_template, :specific_member_to, :specific_member_from, :notes, :activity_type, :activity_status, :company_status, :track, :attached_track, :group, :cc_contact, :bcc_contact, :days_to_execute, :notify_who, :notify_from, :_info

    #  Max length: 250;
    attr_accessor :email_recipient

    #  Max length: 250;
    attr_accessor :email_from

    #  Max length: 100;
    attr_accessor :subject

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        notify_type: :notifyType,
        id: :id,
        service_template: :serviceTemplate,
        specific_member_to: :specificMemberTo,
        email_recipient: :emailRecipient,
        specific_member_from: :specificMemberFrom,
        email_from: :emailFrom,
        subject: :subject,
        notes: :notes,
        activity_type: :activityType,
        activity_status: :activityStatus,
        company_status: :companyStatus,
        track: :track,
        attached_track: :attachedTrack,
        group: :group,
        cc_contact: :ccContact,
        bcc_contact: :bccContact,
        days_to_execute: :daysToExecute,
        notify_who: :notifyWho,
        notify_from: :notifyFrom,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        notify_type: :String,
        id: :Integer,
        service_template: :ServiceTemplateReference,
        specific_member_to: :MemberReference,
        email_recipient: :String,
        specific_member_from: :MemberReference,
        email_from: :String,
        subject: :String,
        notes: :String,
        activity_type: :ActivityTypeReference,
        activity_status: :ActivityStatusReference,
        company_status: :CompanyStatusReference,
        track: :TrackReference,
        attached_track: :TrackReference,
        group: :GroupReference,
        cc_contact: :ContactReference,
        bcc_contact: :ContactReference,
        days_to_execute: :Integer,
        notify_who: :NotificationRecipientReference,
        notify_from: :NotificationRecipientReference,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
                :days_to_execute
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::TrackAction` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::TrackAction`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.notify_type = (attributes[:notify_type] if attributes.key?(:notify_type))

      self.id = attributes[:id] if attributes.key?(:id)

      self.service_template = attributes[:service_template] if attributes.key?(:service_template)

      self.specific_member_to = attributes[:specific_member_to] if attributes.key?(:specific_member_to)

      self.email_recipient = attributes[:email_recipient] if attributes.key?(:email_recipient)

      self.specific_member_from = attributes[:specific_member_from] if attributes.key?(:specific_member_from)

      self.email_from = attributes[:email_from] if attributes.key?(:email_from)

      self.subject = attributes[:subject] if attributes.key?(:subject)

      self.notes = attributes[:notes] if attributes.key?(:notes)

      self.activity_type = attributes[:activity_type] if attributes.key?(:activity_type)

      self.activity_status = attributes[:activity_status] if attributes.key?(:activity_status)

      self.company_status = attributes[:company_status] if attributes.key?(:company_status)

      self.track = attributes[:track] if attributes.key?(:track)

      self.attached_track = attributes[:attached_track] if attributes.key?(:attached_track)

      self.group = attributes[:group] if attributes.key?(:group)

      self.cc_contact = attributes[:cc_contact] if attributes.key?(:cc_contact)

      self.bcc_contact = attributes[:bcc_contact] if attributes.key?(:bcc_contact)

      self.days_to_execute = attributes[:days_to_execute] if attributes.key?(:days_to_execute)

      self.notify_who = attributes[:notify_who] if attributes.key?(:notify_who)

      self.notify_from = attributes[:notify_from] if attributes.key?(:notify_from)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "notify_type", notify_type cannot be nil.') if @notify_type.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @notify_type.nil?

      notify_type_validator = EnumAttributeValidator.new('String', %w[CreateActivity SendEmail AddToGroup AttachTrack ChangeCompanyStatus CreateServiceTicket])
      return false unless notify_type_validator.valid?(@notify_type)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] notify_type Object to be assigned
    def notify_type=(notify_type)
      validator = EnumAttributeValidator.new('String', %w[CreateActivity SendEmail AddToGroup AttachTrack ChangeCompanyStatus CreateServiceTicket])
      raise ArgumentError, "invalid value for \"notify_type\", must be one of #{validator.allowable_values}." unless validator.valid?(notify_type)

      @notify_type = notify_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        notify_type == other.notify_type &&
        id == other.id &&
        service_template == other.service_template &&
        specific_member_to == other.specific_member_to &&
        email_recipient == other.email_recipient &&
        specific_member_from == other.specific_member_from &&
        email_from == other.email_from &&
        subject == other.subject &&
        notes == other.notes &&
        activity_type == other.activity_type &&
        activity_status == other.activity_status &&
        company_status == other.company_status &&
        track == other.track &&
        attached_track == other.attached_track &&
        group == other.group &&
        cc_contact == other.cc_contact &&
        bcc_contact == other.bcc_contact &&
        days_to_execute == other.days_to_execute &&
        notify_who == other.notify_who &&
        notify_from == other.notify_from &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [notify_type, id, service_template, specific_member_to, email_recipient, specific_member_from, email_from, subject, notes, activity_type, activity_status, company_status, track, attached_track, group, cc_contact, bcc_contact, days_to_execute, notify_who, notify_from, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
