=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class PortalConfigurationOpportunitySetup
    attr_accessor :id

    attr_accessor :opportunity_status_rec_ids

    attr_accessor :add_all_opportunity_statuses

    attr_accessor :remove_all_opportunity_statuses

    attr_accessor :opportunity_type_rec_ids

    attr_accessor :add_all_opportunity_types

    attr_accessor :remove_all_opportunity_types

    attr_accessor :restrict_view_by_opportunity_status_flag

    attr_accessor :restrict_view_by_opportunity_type_flag

    attr_accessor :acceptance_change_status_flag

    attr_accessor :acceptance_create_activity_flag

    attr_accessor :acceptance_opportunity_status

    attr_accessor :acceptance_send_email_flag

    attr_accessor :acceptance_email_from_first_name

    attr_accessor :acceptance_email_from_last_name

    attr_accessor :acceptance_email_subject

    attr_accessor :acceptance_email_body

    # Required when acceptanceSendEmailFlag is true
    attr_accessor :acceptance_from_email

    attr_accessor :acceptance_email_activity_type

    attr_accessor :acceptance_email_assigned_by_member

    attr_accessor :rejection_change_status_flag

    attr_accessor :rejection_create_activity_flag

    attr_accessor :rejection_opportunity_status

    attr_accessor :rejection_send_email_flag

    attr_accessor :rejection_email_from_first_name

    attr_accessor :rejection_email_from_last_name

    # Required when rejectionSendEmailFlag is true
    attr_accessor :rejection_from_email

    attr_accessor :rejection_email_subject

    attr_accessor :rejection_email_body

    attr_accessor :rejection_email_activity_type

    attr_accessor :rejection_email_assigned_by_member

    attr_accessor :confirmation_send_email_flag

    attr_accessor :confirmation_email_use_default_company_email_address_flag

    attr_accessor :confirmation_email_from_first_name

    attr_accessor :confirmation_email_from_last_name

    # Required when confirmationSendEmailFlag is true
    attr_accessor :confirmation_from_email

    attr_accessor :confirmation_email_subject

    attr_accessor :confirmation_email_body

    attr_accessor :_info

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'opportunity_status_rec_ids' => :'opportunityStatusRecIDs',
        :'add_all_opportunity_statuses' => :'addAllOpportunityStatuses',
        :'remove_all_opportunity_statuses' => :'removeAllOpportunityStatuses',
        :'opportunity_type_rec_ids' => :'opportunityTypeRecIDs',
        :'add_all_opportunity_types' => :'addAllOpportunityTypes',
        :'remove_all_opportunity_types' => :'removeAllOpportunityTypes',
        :'restrict_view_by_opportunity_status_flag' => :'restrictViewByOpportunityStatusFlag',
        :'restrict_view_by_opportunity_type_flag' => :'restrictViewByOpportunityTypeFlag',
        :'acceptance_change_status_flag' => :'acceptanceChangeStatusFlag',
        :'acceptance_create_activity_flag' => :'acceptanceCreateActivityFlag',
        :'acceptance_opportunity_status' => :'acceptanceOpportunityStatus',
        :'acceptance_send_email_flag' => :'acceptanceSendEmailFlag',
        :'acceptance_email_from_first_name' => :'acceptanceEmailFromFirstName',
        :'acceptance_email_from_last_name' => :'acceptanceEmailFromLastName',
        :'acceptance_email_subject' => :'acceptanceEmailSubject',
        :'acceptance_email_body' => :'acceptanceEmailBody',
        :'acceptance_from_email' => :'acceptanceFromEmail',
        :'acceptance_email_activity_type' => :'acceptanceEmailActivityType',
        :'acceptance_email_assigned_by_member' => :'acceptanceEmailAssignedByMember',
        :'rejection_change_status_flag' => :'rejectionChangeStatusFlag',
        :'rejection_create_activity_flag' => :'rejectionCreateActivityFlag',
        :'rejection_opportunity_status' => :'rejectionOpportunityStatus',
        :'rejection_send_email_flag' => :'rejectionSendEmailFlag',
        :'rejection_email_from_first_name' => :'rejectionEmailFromFirstName',
        :'rejection_email_from_last_name' => :'rejectionEmailFromLastName',
        :'rejection_from_email' => :'rejectionFromEmail',
        :'rejection_email_subject' => :'rejectionEmailSubject',
        :'rejection_email_body' => :'rejectionEmailBody',
        :'rejection_email_activity_type' => :'rejectionEmailActivityType',
        :'rejection_email_assigned_by_member' => :'rejectionEmailAssignedByMember',
        :'confirmation_send_email_flag' => :'confirmationSendEmailFlag',
        :'confirmation_email_use_default_company_email_address_flag' => :'confirmationEmailUseDefaultCompanyEmailAddressFlag',
        :'confirmation_email_from_first_name' => :'confirmationEmailFromFirstName',
        :'confirmation_email_from_last_name' => :'confirmationEmailFromLastName',
        :'confirmation_from_email' => :'confirmationFromEmail',
        :'confirmation_email_subject' => :'confirmationEmailSubject',
        :'confirmation_email_body' => :'confirmationEmailBody',
        :'_info' => :'_info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'opportunity_status_rec_ids' => :'Array<Integer>',
        :'add_all_opportunity_statuses' => :'Boolean',
        :'remove_all_opportunity_statuses' => :'Boolean',
        :'opportunity_type_rec_ids' => :'Array<Integer>',
        :'add_all_opportunity_types' => :'Boolean',
        :'remove_all_opportunity_types' => :'Boolean',
        :'restrict_view_by_opportunity_status_flag' => :'Boolean',
        :'restrict_view_by_opportunity_type_flag' => :'Boolean',
        :'acceptance_change_status_flag' => :'Boolean',
        :'acceptance_create_activity_flag' => :'Boolean',
        :'acceptance_opportunity_status' => :'OpportunityStatusReference',
        :'acceptance_send_email_flag' => :'Boolean',
        :'acceptance_email_from_first_name' => :'String',
        :'acceptance_email_from_last_name' => :'String',
        :'acceptance_email_subject' => :'String',
        :'acceptance_email_body' => :'String',
        :'acceptance_from_email' => :'String',
        :'acceptance_email_activity_type' => :'ActivityTypeReference',
        :'acceptance_email_assigned_by_member' => :'MemberReference',
        :'rejection_change_status_flag' => :'Boolean',
        :'rejection_create_activity_flag' => :'Boolean',
        :'rejection_opportunity_status' => :'OpportunityStatusReference',
        :'rejection_send_email_flag' => :'Boolean',
        :'rejection_email_from_first_name' => :'String',
        :'rejection_email_from_last_name' => :'String',
        :'rejection_from_email' => :'String',
        :'rejection_email_subject' => :'String',
        :'rejection_email_body' => :'String',
        :'rejection_email_activity_type' => :'ActivityTypeReference',
        :'rejection_email_assigned_by_member' => :'MemberReference',
        :'confirmation_send_email_flag' => :'Boolean',
        :'confirmation_email_use_default_company_email_address_flag' => :'Boolean',
        :'confirmation_email_from_first_name' => :'String',
        :'confirmation_email_from_last_name' => :'String',
        :'confirmation_from_email' => :'String',
        :'confirmation_email_subject' => :'String',
        :'confirmation_email_body' => :'String',
        :'_info' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'add_all_opportunity_statuses',
        :'remove_all_opportunity_statuses',
        :'add_all_opportunity_types',
        :'remove_all_opportunity_types',
        :'restrict_view_by_opportunity_status_flag',
        :'restrict_view_by_opportunity_type_flag',
        :'acceptance_change_status_flag',
        :'acceptance_create_activity_flag',
        :'acceptance_send_email_flag',
        :'rejection_change_status_flag',
        :'rejection_create_activity_flag',
        :'rejection_send_email_flag',
        :'confirmation_send_email_flag',
        :'confirmation_email_use_default_company_email_address_flag',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::PortalConfigurationOpportunitySetup` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::PortalConfigurationOpportunitySetup`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'opportunity_status_rec_ids')
        if (value = attributes[:'opportunity_status_rec_ids']).is_a?(Array)
          self.opportunity_status_rec_ids = value
        end
      end

      if attributes.key?(:'add_all_opportunity_statuses')
        self.add_all_opportunity_statuses = attributes[:'add_all_opportunity_statuses']
      end

      if attributes.key?(:'remove_all_opportunity_statuses')
        self.remove_all_opportunity_statuses = attributes[:'remove_all_opportunity_statuses']
      end

      if attributes.key?(:'opportunity_type_rec_ids')
        if (value = attributes[:'opportunity_type_rec_ids']).is_a?(Array)
          self.opportunity_type_rec_ids = value
        end
      end

      if attributes.key?(:'add_all_opportunity_types')
        self.add_all_opportunity_types = attributes[:'add_all_opportunity_types']
      end

      if attributes.key?(:'remove_all_opportunity_types')
        self.remove_all_opportunity_types = attributes[:'remove_all_opportunity_types']
      end

      if attributes.key?(:'restrict_view_by_opportunity_status_flag')
        self.restrict_view_by_opportunity_status_flag = attributes[:'restrict_view_by_opportunity_status_flag']
      end

      if attributes.key?(:'restrict_view_by_opportunity_type_flag')
        self.restrict_view_by_opportunity_type_flag = attributes[:'restrict_view_by_opportunity_type_flag']
      end

      if attributes.key?(:'acceptance_change_status_flag')
        self.acceptance_change_status_flag = attributes[:'acceptance_change_status_flag']
      end

      if attributes.key?(:'acceptance_create_activity_flag')
        self.acceptance_create_activity_flag = attributes[:'acceptance_create_activity_flag']
      end

      if attributes.key?(:'acceptance_opportunity_status')
        self.acceptance_opportunity_status = attributes[:'acceptance_opportunity_status']
      end

      if attributes.key?(:'acceptance_send_email_flag')
        self.acceptance_send_email_flag = attributes[:'acceptance_send_email_flag']
      end

      if attributes.key?(:'acceptance_email_from_first_name')
        self.acceptance_email_from_first_name = attributes[:'acceptance_email_from_first_name']
      end

      if attributes.key?(:'acceptance_email_from_last_name')
        self.acceptance_email_from_last_name = attributes[:'acceptance_email_from_last_name']
      end

      if attributes.key?(:'acceptance_email_subject')
        self.acceptance_email_subject = attributes[:'acceptance_email_subject']
      end

      if attributes.key?(:'acceptance_email_body')
        self.acceptance_email_body = attributes[:'acceptance_email_body']
      end

      if attributes.key?(:'acceptance_from_email')
        self.acceptance_from_email = attributes[:'acceptance_from_email']
      end

      if attributes.key?(:'acceptance_email_activity_type')
        self.acceptance_email_activity_type = attributes[:'acceptance_email_activity_type']
      end

      if attributes.key?(:'acceptance_email_assigned_by_member')
        self.acceptance_email_assigned_by_member = attributes[:'acceptance_email_assigned_by_member']
      end

      if attributes.key?(:'rejection_change_status_flag')
        self.rejection_change_status_flag = attributes[:'rejection_change_status_flag']
      end

      if attributes.key?(:'rejection_create_activity_flag')
        self.rejection_create_activity_flag = attributes[:'rejection_create_activity_flag']
      end

      if attributes.key?(:'rejection_opportunity_status')
        self.rejection_opportunity_status = attributes[:'rejection_opportunity_status']
      end

      if attributes.key?(:'rejection_send_email_flag')
        self.rejection_send_email_flag = attributes[:'rejection_send_email_flag']
      end

      if attributes.key?(:'rejection_email_from_first_name')
        self.rejection_email_from_first_name = attributes[:'rejection_email_from_first_name']
      end

      if attributes.key?(:'rejection_email_from_last_name')
        self.rejection_email_from_last_name = attributes[:'rejection_email_from_last_name']
      end

      if attributes.key?(:'rejection_from_email')
        self.rejection_from_email = attributes[:'rejection_from_email']
      end

      if attributes.key?(:'rejection_email_subject')
        self.rejection_email_subject = attributes[:'rejection_email_subject']
      end

      if attributes.key?(:'rejection_email_body')
        self.rejection_email_body = attributes[:'rejection_email_body']
      end

      if attributes.key?(:'rejection_email_activity_type')
        self.rejection_email_activity_type = attributes[:'rejection_email_activity_type']
      end

      if attributes.key?(:'rejection_email_assigned_by_member')
        self.rejection_email_assigned_by_member = attributes[:'rejection_email_assigned_by_member']
      end

      if attributes.key?(:'confirmation_send_email_flag')
        self.confirmation_send_email_flag = attributes[:'confirmation_send_email_flag']
      end

      if attributes.key?(:'confirmation_email_use_default_company_email_address_flag')
        self.confirmation_email_use_default_company_email_address_flag = attributes[:'confirmation_email_use_default_company_email_address_flag']
      end

      if attributes.key?(:'confirmation_email_from_first_name')
        self.confirmation_email_from_first_name = attributes[:'confirmation_email_from_first_name']
      end

      if attributes.key?(:'confirmation_email_from_last_name')
        self.confirmation_email_from_last_name = attributes[:'confirmation_email_from_last_name']
      end

      if attributes.key?(:'confirmation_from_email')
        self.confirmation_from_email = attributes[:'confirmation_from_email']
      end

      if attributes.key?(:'confirmation_email_subject')
        self.confirmation_email_subject = attributes[:'confirmation_email_subject']
      end

      if attributes.key?(:'confirmation_email_body')
        self.confirmation_email_body = attributes[:'confirmation_email_body']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          opportunity_status_rec_ids == o.opportunity_status_rec_ids &&
          add_all_opportunity_statuses == o.add_all_opportunity_statuses &&
          remove_all_opportunity_statuses == o.remove_all_opportunity_statuses &&
          opportunity_type_rec_ids == o.opportunity_type_rec_ids &&
          add_all_opportunity_types == o.add_all_opportunity_types &&
          remove_all_opportunity_types == o.remove_all_opportunity_types &&
          restrict_view_by_opportunity_status_flag == o.restrict_view_by_opportunity_status_flag &&
          restrict_view_by_opportunity_type_flag == o.restrict_view_by_opportunity_type_flag &&
          acceptance_change_status_flag == o.acceptance_change_status_flag &&
          acceptance_create_activity_flag == o.acceptance_create_activity_flag &&
          acceptance_opportunity_status == o.acceptance_opportunity_status &&
          acceptance_send_email_flag == o.acceptance_send_email_flag &&
          acceptance_email_from_first_name == o.acceptance_email_from_first_name &&
          acceptance_email_from_last_name == o.acceptance_email_from_last_name &&
          acceptance_email_subject == o.acceptance_email_subject &&
          acceptance_email_body == o.acceptance_email_body &&
          acceptance_from_email == o.acceptance_from_email &&
          acceptance_email_activity_type == o.acceptance_email_activity_type &&
          acceptance_email_assigned_by_member == o.acceptance_email_assigned_by_member &&
          rejection_change_status_flag == o.rejection_change_status_flag &&
          rejection_create_activity_flag == o.rejection_create_activity_flag &&
          rejection_opportunity_status == o.rejection_opportunity_status &&
          rejection_send_email_flag == o.rejection_send_email_flag &&
          rejection_email_from_first_name == o.rejection_email_from_first_name &&
          rejection_email_from_last_name == o.rejection_email_from_last_name &&
          rejection_from_email == o.rejection_from_email &&
          rejection_email_subject == o.rejection_email_subject &&
          rejection_email_body == o.rejection_email_body &&
          rejection_email_activity_type == o.rejection_email_activity_type &&
          rejection_email_assigned_by_member == o.rejection_email_assigned_by_member &&
          confirmation_send_email_flag == o.confirmation_send_email_flag &&
          confirmation_email_use_default_company_email_address_flag == o.confirmation_email_use_default_company_email_address_flag &&
          confirmation_email_from_first_name == o.confirmation_email_from_first_name &&
          confirmation_email_from_last_name == o.confirmation_email_from_last_name &&
          confirmation_from_email == o.confirmation_from_email &&
          confirmation_email_subject == o.confirmation_email_subject &&
          confirmation_email_body == o.confirmation_email_body &&
          _info == o._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, opportunity_status_rec_ids, add_all_opportunity_statuses, remove_all_opportunity_statuses, opportunity_type_rec_ids, add_all_opportunity_types, remove_all_opportunity_types, restrict_view_by_opportunity_status_flag, restrict_view_by_opportunity_type_flag, acceptance_change_status_flag, acceptance_create_activity_flag, acceptance_opportunity_status, acceptance_send_email_flag, acceptance_email_from_first_name, acceptance_email_from_last_name, acceptance_email_subject, acceptance_email_body, acceptance_from_email, acceptance_email_activity_type, acceptance_email_assigned_by_member, rejection_change_status_flag, rejection_create_activity_flag, rejection_opportunity_status, rejection_send_email_flag, rejection_email_from_first_name, rejection_email_from_last_name, rejection_from_email, rejection_email_subject, rejection_email_body, rejection_email_activity_type, rejection_email_assigned_by_member, confirmation_send_email_flag, confirmation_email_use_default_company_email_address_flag, confirmation_email_from_first_name, confirmation_email_from_last_name, confirmation_from_email, confirmation_email_subject, confirmation_email_body, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
