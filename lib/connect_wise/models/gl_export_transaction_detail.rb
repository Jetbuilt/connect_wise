# #Connectwise Manage All Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2022.1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.1
#

require 'date'
require 'time'

module ConnectWise
  class GLExportTransactionDetail
    attr_accessor :id, :document_date, :document_type, :account_number, :gl_class, :gl_type_id, :gl_item_id, :invoice_summary_option, :cost, :sales_code, :memo, :description, :quantity, :total, :currency, :time_entry, :cost_account_number, :inventory_account_number, :product_account_number, :tax_code, :tax_code_xref, :tax_agency_xref, :tax_note, :tax_rate, :tax_rate_percent, :taxable_flag, :taxable2_flag, :taxable3_flag, :taxable4_flag, :taxable5_flag, :item, :product, :item_taxable_flag, :item_price, :item_cost, :item_description, :sales_description, :unit_of_measure, :sub_category, :serialized_flag, :serial_numbers, :warehouse_site, :warehouse_bin, :shipment_method, :drop_shipped_flag, :item_type_xref, :inventory_xref, :cogs_xref, :uom_schedule_xref, :price_level_xref, :location_xref, :tax_levels

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        document_date: :documentDate,
        document_type: :documentType,
        account_number: :accountNumber,
        gl_class: :glClass,
        gl_type_id: :glTypeId,
        gl_item_id: :glItemId,
        invoice_summary_option: :invoiceSummaryOption,
        cost: :cost,
        sales_code: :salesCode,
        memo: :memo,
        description: :description,
        quantity: :quantity,
        total: :total,
        currency: :currency,
        time_entry: :timeEntry,
        cost_account_number: :costAccountNumber,
        inventory_account_number: :inventoryAccountNumber,
        product_account_number: :productAccountNumber,
        tax_code: :taxCode,
        tax_code_xref: :taxCodeXref,
        tax_agency_xref: :taxAgencyXref,
        tax_note: :taxNote,
        tax_rate: :taxRate,
        tax_rate_percent: :taxRatePercent,
        taxable_flag: :taxableFlag,
        taxable2_flag: :taxable2Flag,
        taxable3_flag: :taxable3Flag,
        taxable4_flag: :taxable4Flag,
        taxable5_flag: :taxable5Flag,
        item: :item,
        product: :product,
        item_taxable_flag: :itemTaxableFlag,
        item_price: :itemPrice,
        item_cost: :itemCost,
        item_description: :itemDescription,
        sales_description: :salesDescription,
        unit_of_measure: :unitOfMeasure,
        sub_category: :subCategory,
        serialized_flag: :serializedFlag,
        serial_numbers: :serialNumbers,
        warehouse_site: :warehouseSite,
        warehouse_bin: :warehouseBin,
        shipment_method: :shipmentMethod,
        drop_shipped_flag: :dropShippedFlag,
        item_type_xref: :itemTypeXref,
        inventory_xref: :inventoryXref,
        cogs_xref: :cogsXref,
        uom_schedule_xref: :uomScheduleXref,
        price_level_xref: :priceLevelXref,
        location_xref: :locationXref,
        tax_levels: :taxLevels
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        document_date: :String,
        document_type: :String,
        account_number: :String,
        gl_class: :String,
        gl_type_id: :String,
        gl_item_id: :String,
        invoice_summary_option: :String,
        cost: :Float,
        sales_code: :String,
        memo: :String,
        description: :String,
        quantity: :Float,
        total: :Float,
        currency: :CurrencyReference,
        time_entry: :TimeEntryReference,
        cost_account_number: :String,
        inventory_account_number: :String,
        product_account_number: :String,
        tax_code: :TaxCodeReference,
        tax_code_xref: :String,
        tax_agency_xref: :String,
        tax_note: :String,
        tax_rate: :Float,
        tax_rate_percent: :Float,
        taxable_flag: :Boolean,
        taxable2_flag: :Boolean,
        taxable3_flag: :Boolean,
        taxable4_flag: :Boolean,
        taxable5_flag: :Boolean,
        item: :IvItemReference,
        product: :ProductReference,
        item_taxable_flag: :Boolean,
        item_price: :Float,
        item_cost: :Float,
        item_description: :String,
        sales_description: :String,
        unit_of_measure: :UnitOfMeasureReference,
        sub_category: :ProductSubCategoryReference,
        serialized_flag: :Boolean,
        serial_numbers: :String,
        warehouse_site: :SiteReference,
        warehouse_bin: :WarehouseBinReference,
        shipment_method: :ShipmentMethodReference,
        drop_shipped_flag: :Boolean,
        item_type_xref: :String,
        inventory_xref: :String,
        cogs_xref: :String,
        uom_schedule_xref: :String,
        price_level_xref: :String,
        location_xref: :String,
        tax_levels: :'Array<GLExportTransactionDetailTaxLevel>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                id
                cost
                quantity
                total
                tax_rate
                tax_rate_percent
                taxable_flag
                taxable2_flag
                taxable3_flag
                taxable4_flag
                taxable5_flag
                item_taxable_flag
                item_price
                item_cost
                serialized_flag
                drop_shipped_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::GLExportTransactionDetail` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::GLExportTransactionDetail`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.document_date = attributes[:document_date] if attributes.key?(:document_date)

      self.document_type = attributes[:document_type] if attributes.key?(:document_type)

      self.account_number = attributes[:account_number] if attributes.key?(:account_number)

      self.gl_class = attributes[:gl_class] if attributes.key?(:gl_class)

      self.gl_type_id = attributes[:gl_type_id] if attributes.key?(:gl_type_id)

      self.gl_item_id = attributes[:gl_item_id] if attributes.key?(:gl_item_id)

      self.invoice_summary_option = attributes[:invoice_summary_option] if attributes.key?(:invoice_summary_option)

      self.cost = attributes[:cost] if attributes.key?(:cost)

      self.sales_code = attributes[:sales_code] if attributes.key?(:sales_code)

      self.memo = attributes[:memo] if attributes.key?(:memo)

      self.description = attributes[:description] if attributes.key?(:description)

      self.quantity = attributes[:quantity] if attributes.key?(:quantity)

      self.total = attributes[:total] if attributes.key?(:total)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      self.time_entry = attributes[:time_entry] if attributes.key?(:time_entry)

      self.cost_account_number = attributes[:cost_account_number] if attributes.key?(:cost_account_number)

      self.inventory_account_number = attributes[:inventory_account_number] if attributes.key?(:inventory_account_number)

      self.product_account_number = attributes[:product_account_number] if attributes.key?(:product_account_number)

      self.tax_code = attributes[:tax_code] if attributes.key?(:tax_code)

      self.tax_code_xref = attributes[:tax_code_xref] if attributes.key?(:tax_code_xref)

      self.tax_agency_xref = attributes[:tax_agency_xref] if attributes.key?(:tax_agency_xref)

      self.tax_note = attributes[:tax_note] if attributes.key?(:tax_note)

      self.tax_rate = attributes[:tax_rate] if attributes.key?(:tax_rate)

      self.tax_rate_percent = attributes[:tax_rate_percent] if attributes.key?(:tax_rate_percent)

      self.taxable_flag = attributes[:taxable_flag] if attributes.key?(:taxable_flag)

      self.taxable2_flag = attributes[:taxable2_flag] if attributes.key?(:taxable2_flag)

      self.taxable3_flag = attributes[:taxable3_flag] if attributes.key?(:taxable3_flag)

      self.taxable4_flag = attributes[:taxable4_flag] if attributes.key?(:taxable4_flag)

      self.taxable5_flag = attributes[:taxable5_flag] if attributes.key?(:taxable5_flag)

      self.item = attributes[:item] if attributes.key?(:item)

      self.product = attributes[:product] if attributes.key?(:product)

      self.item_taxable_flag = attributes[:item_taxable_flag] if attributes.key?(:item_taxable_flag)

      self.item_price = attributes[:item_price] if attributes.key?(:item_price)

      self.item_cost = attributes[:item_cost] if attributes.key?(:item_cost)

      self.item_description = attributes[:item_description] if attributes.key?(:item_description)

      self.sales_description = attributes[:sales_description] if attributes.key?(:sales_description)

      self.unit_of_measure = attributes[:unit_of_measure] if attributes.key?(:unit_of_measure)

      self.sub_category = attributes[:sub_category] if attributes.key?(:sub_category)

      self.serialized_flag = attributes[:serialized_flag] if attributes.key?(:serialized_flag)

      self.serial_numbers = attributes[:serial_numbers] if attributes.key?(:serial_numbers)

      self.warehouse_site = attributes[:warehouse_site] if attributes.key?(:warehouse_site)

      self.warehouse_bin = attributes[:warehouse_bin] if attributes.key?(:warehouse_bin)

      self.shipment_method = attributes[:shipment_method] if attributes.key?(:shipment_method)

      self.drop_shipped_flag = attributes[:drop_shipped_flag] if attributes.key?(:drop_shipped_flag)

      self.item_type_xref = attributes[:item_type_xref] if attributes.key?(:item_type_xref)

      self.inventory_xref = attributes[:inventory_xref] if attributes.key?(:inventory_xref)

      self.cogs_xref = attributes[:cogs_xref] if attributes.key?(:cogs_xref)

      self.uom_schedule_xref = attributes[:uom_schedule_xref] if attributes.key?(:uom_schedule_xref)

      self.price_level_xref = attributes[:price_level_xref] if attributes.key?(:price_level_xref)

      self.location_xref = attributes[:location_xref] if attributes.key?(:location_xref)

      return unless attributes.key?(:tax_levels)
      return unless (value = attributes[:tax_levels]).is_a?(Array)

      self.tax_levels = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        document_date == other.document_date &&
        document_type == other.document_type &&
        account_number == other.account_number &&
        gl_class == other.gl_class &&
        gl_type_id == other.gl_type_id &&
        gl_item_id == other.gl_item_id &&
        invoice_summary_option == other.invoice_summary_option &&
        cost == other.cost &&
        sales_code == other.sales_code &&
        memo == other.memo &&
        description == other.description &&
        quantity == other.quantity &&
        total == other.total &&
        currency == other.currency &&
        time_entry == other.time_entry &&
        cost_account_number == other.cost_account_number &&
        inventory_account_number == other.inventory_account_number &&
        product_account_number == other.product_account_number &&
        tax_code == other.tax_code &&
        tax_code_xref == other.tax_code_xref &&
        tax_agency_xref == other.tax_agency_xref &&
        tax_note == other.tax_note &&
        tax_rate == other.tax_rate &&
        tax_rate_percent == other.tax_rate_percent &&
        taxable_flag == other.taxable_flag &&
        taxable2_flag == other.taxable2_flag &&
        taxable3_flag == other.taxable3_flag &&
        taxable4_flag == other.taxable4_flag &&
        taxable5_flag == other.taxable5_flag &&
        item == other.item &&
        product == other.product &&
        item_taxable_flag == other.item_taxable_flag &&
        item_price == other.item_price &&
        item_cost == other.item_cost &&
        item_description == other.item_description &&
        sales_description == other.sales_description &&
        unit_of_measure == other.unit_of_measure &&
        sub_category == other.sub_category &&
        serialized_flag == other.serialized_flag &&
        serial_numbers == other.serial_numbers &&
        warehouse_site == other.warehouse_site &&
        warehouse_bin == other.warehouse_bin &&
        shipment_method == other.shipment_method &&
        drop_shipped_flag == other.drop_shipped_flag &&
        item_type_xref == other.item_type_xref &&
        inventory_xref == other.inventory_xref &&
        cogs_xref == other.cogs_xref &&
        uom_schedule_xref == other.uom_schedule_xref &&
        price_level_xref == other.price_level_xref &&
        location_xref == other.location_xref &&
        tax_levels == other.tax_levels
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, document_date, document_type, account_number, gl_class, gl_type_id, gl_item_id, invoice_summary_option, cost, sales_code, memo, description, quantity, total, currency, time_entry, cost_account_number, inventory_account_number, product_account_number, tax_code, tax_code_xref, tax_agency_xref, tax_note, tax_rate, tax_rate_percent, taxable_flag, taxable2_flag, taxable3_flag, taxable4_flag, taxable5_flag, item, product, item_taxable_flag, item_price, item_cost, item_description, sales_description, unit_of_measure, sub_category, serialized_flag, serial_numbers, warehouse_site, warehouse_bin, shipment_method, drop_shipped_flag, item_type_xref, inventory_xref, cogs_xref, uom_schedule_xref, price_level_xref, location_xref, tax_levels].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
