# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class AgreementRecurringParameters
    attr_accessor :billing_cycle, :cycle_base, :a_gr_amount, :taxable, :children_amount, :additions_amount, :total_amount, :a_gr_prorate, :bill_start_date, :tax_code, :terms, :prorate_flag, :invoice_prorated_additions_flag, :restrict_downpayment, :currency, :auto_invoice_flag, :user_defined_field_values

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        billing_cycle: :billingCycle,
        cycle_base: :cycleBase,
        a_gr_amount: :aGRAmount,
        taxable: :taxable,
        children_amount: :childrenAmount,
        additions_amount: :additionsAmount,
        total_amount: :totalAmount,
        a_gr_prorate: :aGRProrate,
        bill_start_date: :billStartDate,
        tax_code: :taxCode,
        terms: :terms,
        prorate_flag: :prorateFlag,
        invoice_prorated_additions_flag: :invoiceProratedAdditionsFlag,
        restrict_downpayment: :restrictDownpayment,
        currency: :currency,
        auto_invoice_flag: :autoInvoiceFlag,
        user_defined_field_values: :userDefinedFieldValues
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        billing_cycle: :GenericNameIdDTO,
        cycle_base: :GenericNameIdDTO,
        a_gr_amount: :Float,
        taxable: :Boolean,
        children_amount: :Float,
        additions_amount: :Float,
        total_amount: :Float,
        a_gr_prorate: :Float,
        bill_start_date: :String,
        tax_code: :GenericNameIdDTO,
        terms: :GenericNameIdDTO,
        prorate_flag: :Boolean,
        invoice_prorated_additions_flag: :Boolean,
        restrict_downpayment: :Boolean,
        currency: :GenericNameIdDTO,
        auto_invoice_flag: :Boolean,
        user_defined_field_values: :'Array<UserDefinedFieldValueModel>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                a_gr_amount
                a_gr_prorate
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::AgreementRecurringParameters` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::AgreementRecurringParameters`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.billing_cycle = attributes[:billing_cycle] if attributes.key?(:billing_cycle)

      self.cycle_base = attributes[:cycle_base] if attributes.key?(:cycle_base)

      self.a_gr_amount = attributes[:a_gr_amount] if attributes.key?(:a_gr_amount)

      self.taxable = attributes[:taxable] if attributes.key?(:taxable)

      self.children_amount = attributes[:children_amount] if attributes.key?(:children_amount)

      self.additions_amount = attributes[:additions_amount] if attributes.key?(:additions_amount)

      self.total_amount = attributes[:total_amount] if attributes.key?(:total_amount)

      self.a_gr_prorate = attributes[:a_gr_prorate] if attributes.key?(:a_gr_prorate)

      self.bill_start_date = attributes[:bill_start_date] if attributes.key?(:bill_start_date)

      self.tax_code = attributes[:tax_code] if attributes.key?(:tax_code)

      self.terms = attributes[:terms] if attributes.key?(:terms)

      self.prorate_flag = attributes[:prorate_flag] if attributes.key?(:prorate_flag)

      self.invoice_prorated_additions_flag = attributes[:invoice_prorated_additions_flag] if attributes.key?(:invoice_prorated_additions_flag)

      self.restrict_downpayment = attributes[:restrict_downpayment] if attributes.key?(:restrict_downpayment)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      self.auto_invoice_flag = attributes[:auto_invoice_flag] if attributes.key?(:auto_invoice_flag)

      return unless attributes.key?(:user_defined_field_values)

      if (value = attributes[:user_defined_field_values]).is_a?(Array)
        self.user_defined_field_values = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        billing_cycle == other.billing_cycle &&
        cycle_base == other.cycle_base &&
        a_gr_amount == other.a_gr_amount &&
        taxable == other.taxable &&
        children_amount == other.children_amount &&
        additions_amount == other.additions_amount &&
        total_amount == other.total_amount &&
        a_gr_prorate == other.a_gr_prorate &&
        bill_start_date == other.bill_start_date &&
        tax_code == other.tax_code &&
        terms == other.terms &&
        prorate_flag == other.prorate_flag &&
        invoice_prorated_additions_flag == other.invoice_prorated_additions_flag &&
        restrict_downpayment == other.restrict_downpayment &&
        currency == other.currency &&
        auto_invoice_flag == other.auto_invoice_flag &&
        user_defined_field_values == other.user_defined_field_values
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [billing_cycle, cycle_base, a_gr_amount, taxable, children_amount, additions_amount, total_amount, a_gr_prorate, bill_start_date, tax_code, terms, prorate_flag, invoice_prorated_additions_flag, restrict_downpayment, currency, auto_invoice_flag, user_defined_field_values].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
