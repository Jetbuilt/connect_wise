# #Connectwise Manage All Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2022.1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.1
#

require 'date'
require 'time'

module ConnectWise
  class CustomReport
    attr_accessor :report_link, :id, :generated_flag, :location_flag, :location_default_flag, :location_override, :department_flag, :department_default_flag, :department_override, :territory_flag, :territory_default_flag, :territory_override, :company_flag, :company_override, :member_flag, :member_override, :start_date_flag, :start_date_override, :end_date_flag, :end_date_override, :opp_type_flag, :opp_type_override, :opportunity_flag, :opportunity_override, :marketing_campaign_flag, :marketing_campaign_override, :service_board_flag, :service_board_default_flag, :service_board_override, :service_type_flag, :service_type_override, :service_status_flag, :service_status_override, :agreement_type_flag, :agreement_type_override, :agreement_flag, :agreement_override, :project_type_flag, :project_type_override, :project_flag, :project_override, :work_role_flag, :work_role_override, :work_type_flag, :work_type_override, :invoice_flag, :invoice_override, :_info

    #  Max length: 100;
    attr_accessor :name

    # The Module Name
    attr_accessor :_module

    #  Max length: 150;
    attr_accessor :description

    #  Max length: 50;
    attr_accessor :parameter_prefix

    #  Max length: 50;
    attr_accessor :parameter_separator

    #  Max length: 50;
    attr_accessor :parameter_name_separator

    #  Max length: 50;
    attr_accessor :parameter_suffix

    # Parameter unique identifier for the Custom Report's Location parameter
    attr_accessor :location_param_id

    # Parameter unique identifier for the Custom Report's Department parameter
    attr_accessor :department_param_id

    # Parameter unique identifier for the Custom Report's Terriroty parameter
    attr_accessor :territory_param_id

    # Parameter unique identifier for the Custom Report's Company parameter
    attr_accessor :company_param_id

    # Parameter unique identifier for the Custom Report's Member parameter
    attr_accessor :member_param_id

    # Parameter unique identifier for the Custom Report's Start Date parameter
    attr_accessor :start_date_param_id

    # Parameter unique identifier for the Custom Report's End Date parameter
    attr_accessor :end_date_param_id

    # Parameter unique identifier for the Custom Report's Opportunity Type parameter
    attr_accessor :opp_type_param_id

    # Parameter unique identifier for the Custom Report's Opportunity parameter
    attr_accessor :opportunity_param_id

    # Parameter unique identifier for the Custom Report's Marketing Campaign parameter
    attr_accessor :marketing_campaign_param_id

    # Parameter unique identifier for the Custom Report's Service Board parameter
    attr_accessor :service_board_param_id

    # Parameter unique identifier for the Custom Report's Service Type parameter
    attr_accessor :service_type_param_id

    # Parameter unique identifier for the Custom Report's Service Status parameter
    attr_accessor :service_status_param_id

    # Parameter unique identifier for the Custom Report's Agreement Type parameter
    attr_accessor :agreement_type_param_id

    # Parameter unique identifier for the Custom Report's Agreement parameter
    attr_accessor :agreement_param_id

    # Parameter unique identifier for the Custom Report's Project Type parameter
    attr_accessor :project_type_param_id

    # Parameter unique identifier for the Custom Report's Project parameter
    attr_accessor :project_param_id

    # Parameter unique identifier for the Custom Report's Work Role parameter
    attr_accessor :work_role_param_id

    # Parameter unique identifier for the Custom Report's Work Type parameter
    attr_accessor :work_type_param_id

    # Parameter unique identifier for the Custom Report's Invoice Type parameter
    attr_accessor :invoice_param_id

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        report_link: :reportLink,
        name: :name,
        _module: :module,
        description: :description,
        id: :id,
        generated_flag: :generatedFlag,
        parameter_prefix: :parameterPrefix,
        parameter_separator: :parameterSeparator,
        parameter_name_separator: :parameterNameSeparator,
        parameter_suffix: :parameterSuffix,
        location_flag: :locationFlag,
        location_param_id: :locationParamId,
        location_default_flag: :locationDefaultFlag,
        location_override: :locationOverride,
        department_flag: :departmentFlag,
        department_param_id: :departmentParamId,
        department_default_flag: :departmentDefaultFlag,
        department_override: :departmentOverride,
        territory_flag: :territoryFlag,
        territory_param_id: :territoryParamId,
        territory_default_flag: :territoryDefaultFlag,
        territory_override: :territoryOverride,
        company_flag: :companyFlag,
        company_param_id: :companyParamId,
        company_override: :companyOverride,
        member_flag: :memberFlag,
        member_param_id: :memberParamId,
        member_override: :memberOverride,
        start_date_flag: :startDateFlag,
        start_date_param_id: :startDateParamId,
        start_date_override: :startDateOverride,
        end_date_flag: :endDateFlag,
        end_date_param_id: :endDateParamId,
        end_date_override: :endDateOverride,
        opp_type_flag: :oppTypeFlag,
        opp_type_param_id: :oppTypeParamId,
        opp_type_override: :oppTypeOverride,
        opportunity_flag: :opportunityFlag,
        opportunity_param_id: :opportunityParamId,
        opportunity_override: :opportunityOverride,
        marketing_campaign_flag: :marketingCampaignFlag,
        marketing_campaign_param_id: :marketingCampaignParamId,
        marketing_campaign_override: :marketingCampaignOverride,
        service_board_flag: :serviceBoardFlag,
        service_board_param_id: :serviceBoardParamId,
        service_board_default_flag: :serviceBoardDefaultFlag,
        service_board_override: :serviceBoardOverride,
        service_type_flag: :serviceTypeFlag,
        service_type_param_id: :serviceTypeParamId,
        service_type_override: :serviceTypeOverride,
        service_status_flag: :serviceStatusFlag,
        service_status_param_id: :serviceStatusParamId,
        service_status_override: :serviceStatusOverride,
        agreement_type_flag: :agreementTypeFlag,
        agreement_type_param_id: :agreementTypeParamId,
        agreement_type_override: :agreementTypeOverride,
        agreement_flag: :agreementFlag,
        agreement_param_id: :agreementParamId,
        agreement_override: :agreementOverride,
        project_type_flag: :projectTypeFlag,
        project_type_param_id: :projectTypeParamId,
        project_type_override: :projectTypeOverride,
        project_flag: :projectFlag,
        project_param_id: :projectParamId,
        project_override: :projectOverride,
        work_role_flag: :workRoleFlag,
        work_role_param_id: :workRoleParamId,
        work_role_override: :workRoleOverride,
        work_type_flag: :workTypeFlag,
        work_type_param_id: :workTypeParamId,
        work_type_override: :workTypeOverride,
        invoice_flag: :invoiceFlag,
        invoice_param_id: :invoiceParamId,
        invoice_override: :invoiceOverride,
        _info: :_info
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        report_link: :String,
        name: :String,
        _module: :String,
        description: :String,
        id: :Integer,
        generated_flag: :Boolean,
        parameter_prefix: :String,
        parameter_separator: :String,
        parameter_name_separator: :String,
        parameter_suffix: :String,
        location_flag: :Boolean,
        location_param_id: :Integer,
        location_default_flag: :Boolean,
        location_override: :String,
        department_flag: :Boolean,
        department_param_id: :Integer,
        department_default_flag: :Boolean,
        department_override: :String,
        territory_flag: :Boolean,
        territory_param_id: :Integer,
        territory_default_flag: :Boolean,
        territory_override: :String,
        company_flag: :Boolean,
        company_param_id: :Integer,
        company_override: :String,
        member_flag: :Boolean,
        member_param_id: :Integer,
        member_override: :String,
        start_date_flag: :Boolean,
        start_date_param_id: :Integer,
        start_date_override: :String,
        end_date_flag: :Boolean,
        end_date_param_id: :Integer,
        end_date_override: :String,
        opp_type_flag: :Boolean,
        opp_type_param_id: :Integer,
        opp_type_override: :String,
        opportunity_flag: :Boolean,
        opportunity_param_id: :Integer,
        opportunity_override: :String,
        marketing_campaign_flag: :Boolean,
        marketing_campaign_param_id: :Integer,
        marketing_campaign_override: :String,
        service_board_flag: :Boolean,
        service_board_param_id: :Integer,
        service_board_default_flag: :Boolean,
        service_board_override: :String,
        service_type_flag: :Boolean,
        service_type_param_id: :Integer,
        service_type_override: :String,
        service_status_flag: :Boolean,
        service_status_param_id: :Integer,
        service_status_override: :String,
        agreement_type_flag: :Boolean,
        agreement_type_param_id: :Integer,
        agreement_type_override: :String,
        agreement_flag: :Boolean,
        agreement_param_id: :Integer,
        agreement_override: :String,
        project_type_flag: :Boolean,
        project_type_param_id: :Integer,
        project_type_override: :String,
        project_flag: :Boolean,
        project_param_id: :Integer,
        project_override: :String,
        work_role_flag: :Boolean,
        work_role_param_id: :Integer,
        work_role_override: :String,
        work_type_flag: :Boolean,
        work_type_param_id: :Integer,
        work_type_override: :String,
        invoice_flag: :Boolean,
        invoice_param_id: :Integer,
        invoice_override: :String,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                _module
                generated_flag
                location_flag
                location_param_id
                location_default_flag
                department_flag
                department_param_id
                department_default_flag
                territory_flag
                territory_param_id
                territory_default_flag
                company_flag
                company_param_id
                member_flag
                member_param_id
                start_date_flag
                start_date_param_id
                end_date_flag
                end_date_param_id
                opp_type_flag
                opp_type_param_id
                opportunity_flag
                opportunity_param_id
                marketing_campaign_flag
                marketing_campaign_param_id
                service_board_flag
                service_board_param_id
                service_board_default_flag
                service_type_flag
                service_type_param_id
                service_status_flag
                service_status_param_id
                agreement_type_flag
                agreement_type_param_id
                agreement_flag
                agreement_param_id
                project_type_flag
                project_type_param_id
                project_flag
                project_param_id
                work_role_flag
                work_role_param_id
                work_type_flag
                work_type_param_id
                invoice_flag
                invoice_param_id
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::CustomReport` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::CustomReport`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.report_link = attributes[:report_link] if attributes.key?(:report_link)

      self.name = attributes[:name] if attributes.key?(:name)

      self._module = attributes[:_module] if attributes.key?(:_module)

      self.description = attributes[:description] if attributes.key?(:description)

      self.id = attributes[:id] if attributes.key?(:id)

      self.generated_flag = attributes[:generated_flag] if attributes.key?(:generated_flag)

      self.parameter_prefix = attributes[:parameter_prefix] if attributes.key?(:parameter_prefix)

      self.parameter_separator = attributes[:parameter_separator] if attributes.key?(:parameter_separator)

      self.parameter_name_separator = attributes[:parameter_name_separator] if attributes.key?(:parameter_name_separator)

      self.parameter_suffix = attributes[:parameter_suffix] if attributes.key?(:parameter_suffix)

      self.location_flag = attributes[:location_flag] if attributes.key?(:location_flag)

      self.location_param_id = attributes[:location_param_id] if attributes.key?(:location_param_id)

      self.location_default_flag = attributes[:location_default_flag] if attributes.key?(:location_default_flag)

      self.location_override = attributes[:location_override] if attributes.key?(:location_override)

      self.department_flag = attributes[:department_flag] if attributes.key?(:department_flag)

      self.department_param_id = attributes[:department_param_id] if attributes.key?(:department_param_id)

      self.department_default_flag = attributes[:department_default_flag] if attributes.key?(:department_default_flag)

      self.department_override = attributes[:department_override] if attributes.key?(:department_override)

      self.territory_flag = attributes[:territory_flag] if attributes.key?(:territory_flag)

      self.territory_param_id = attributes[:territory_param_id] if attributes.key?(:territory_param_id)

      self.territory_default_flag = attributes[:territory_default_flag] if attributes.key?(:territory_default_flag)

      self.territory_override = attributes[:territory_override] if attributes.key?(:territory_override)

      self.company_flag = attributes[:company_flag] if attributes.key?(:company_flag)

      self.company_param_id = attributes[:company_param_id] if attributes.key?(:company_param_id)

      self.company_override = attributes[:company_override] if attributes.key?(:company_override)

      self.member_flag = attributes[:member_flag] if attributes.key?(:member_flag)

      self.member_param_id = attributes[:member_param_id] if attributes.key?(:member_param_id)

      self.member_override = attributes[:member_override] if attributes.key?(:member_override)

      self.start_date_flag = attributes[:start_date_flag] if attributes.key?(:start_date_flag)

      self.start_date_param_id = attributes[:start_date_param_id] if attributes.key?(:start_date_param_id)

      self.start_date_override = attributes[:start_date_override] if attributes.key?(:start_date_override)

      self.end_date_flag = attributes[:end_date_flag] if attributes.key?(:end_date_flag)

      self.end_date_param_id = attributes[:end_date_param_id] if attributes.key?(:end_date_param_id)

      self.end_date_override = attributes[:end_date_override] if attributes.key?(:end_date_override)

      self.opp_type_flag = attributes[:opp_type_flag] if attributes.key?(:opp_type_flag)

      self.opp_type_param_id = attributes[:opp_type_param_id] if attributes.key?(:opp_type_param_id)

      self.opp_type_override = attributes[:opp_type_override] if attributes.key?(:opp_type_override)

      self.opportunity_flag = attributes[:opportunity_flag] if attributes.key?(:opportunity_flag)

      self.opportunity_param_id = attributes[:opportunity_param_id] if attributes.key?(:opportunity_param_id)

      self.opportunity_override = attributes[:opportunity_override] if attributes.key?(:opportunity_override)

      self.marketing_campaign_flag = attributes[:marketing_campaign_flag] if attributes.key?(:marketing_campaign_flag)

      self.marketing_campaign_param_id = attributes[:marketing_campaign_param_id] if attributes.key?(:marketing_campaign_param_id)

      self.marketing_campaign_override = attributes[:marketing_campaign_override] if attributes.key?(:marketing_campaign_override)

      self.service_board_flag = attributes[:service_board_flag] if attributes.key?(:service_board_flag)

      self.service_board_param_id = attributes[:service_board_param_id] if attributes.key?(:service_board_param_id)

      self.service_board_default_flag = attributes[:service_board_default_flag] if attributes.key?(:service_board_default_flag)

      self.service_board_override = attributes[:service_board_override] if attributes.key?(:service_board_override)

      self.service_type_flag = attributes[:service_type_flag] if attributes.key?(:service_type_flag)

      self.service_type_param_id = attributes[:service_type_param_id] if attributes.key?(:service_type_param_id)

      self.service_type_override = attributes[:service_type_override] if attributes.key?(:service_type_override)

      self.service_status_flag = attributes[:service_status_flag] if attributes.key?(:service_status_flag)

      self.service_status_param_id = attributes[:service_status_param_id] if attributes.key?(:service_status_param_id)

      self.service_status_override = attributes[:service_status_override] if attributes.key?(:service_status_override)

      self.agreement_type_flag = attributes[:agreement_type_flag] if attributes.key?(:agreement_type_flag)

      self.agreement_type_param_id = attributes[:agreement_type_param_id] if attributes.key?(:agreement_type_param_id)

      self.agreement_type_override = attributes[:agreement_type_override] if attributes.key?(:agreement_type_override)

      self.agreement_flag = attributes[:agreement_flag] if attributes.key?(:agreement_flag)

      self.agreement_param_id = attributes[:agreement_param_id] if attributes.key?(:agreement_param_id)

      self.agreement_override = attributes[:agreement_override] if attributes.key?(:agreement_override)

      self.project_type_flag = attributes[:project_type_flag] if attributes.key?(:project_type_flag)

      self.project_type_param_id = attributes[:project_type_param_id] if attributes.key?(:project_type_param_id)

      self.project_type_override = attributes[:project_type_override] if attributes.key?(:project_type_override)

      self.project_flag = attributes[:project_flag] if attributes.key?(:project_flag)

      self.project_param_id = attributes[:project_param_id] if attributes.key?(:project_param_id)

      self.project_override = attributes[:project_override] if attributes.key?(:project_override)

      self.work_role_flag = attributes[:work_role_flag] if attributes.key?(:work_role_flag)

      self.work_role_param_id = attributes[:work_role_param_id] if attributes.key?(:work_role_param_id)

      self.work_role_override = attributes[:work_role_override] if attributes.key?(:work_role_override)

      self.work_type_flag = attributes[:work_type_flag] if attributes.key?(:work_type_flag)

      self.work_type_param_id = attributes[:work_type_param_id] if attributes.key?(:work_type_param_id)

      self.work_type_override = attributes[:work_type_override] if attributes.key?(:work_type_override)

      self.invoice_flag = attributes[:invoice_flag] if attributes.key?(:invoice_flag)

      self.invoice_param_id = attributes[:invoice_param_id] if attributes.key?(:invoice_param_id)

      self.invoice_override = attributes[:invoice_override] if attributes.key?(:invoice_override)

      return unless attributes.key?(:_info)
      return unless (value = attributes[:_info]).is_a?(Hash)

      self._info = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      invalid_properties.push('invalid value for "report_link", report_link cannot be nil.') if @report_link.nil?

      invalid_properties.push('invalid value for "name", name cannot be nil.') if @name.nil?

      invalid_properties.push('invalid value for "description", description cannot be nil.') if @description.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @report_link.nil?
      return false if @name.nil?

      _module_validator = EnumAttributeValidator.new('String', %w[Companies Finance Marketing Procurement Project Sales ServiceDesk TimeExpense])
      return false unless _module_validator.valid?(@_module)
      return false if @description.nil?

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] _module Object to be assigned
    def _module=(_module)
      validator = EnumAttributeValidator.new('String', %w[Companies Finance Marketing Procurement Project Sales ServiceDesk TimeExpense])
      raise ArgumentError, "invalid value for \"_module\", must be one of #{validator.allowable_values}." unless validator.valid?(_module)

      @_module = _module
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        report_link == other.report_link &&
        name == other.name &&
        _module == other._module &&
        description == other.description &&
        id == other.id &&
        generated_flag == other.generated_flag &&
        parameter_prefix == other.parameter_prefix &&
        parameter_separator == other.parameter_separator &&
        parameter_name_separator == other.parameter_name_separator &&
        parameter_suffix == other.parameter_suffix &&
        location_flag == other.location_flag &&
        location_param_id == other.location_param_id &&
        location_default_flag == other.location_default_flag &&
        location_override == other.location_override &&
        department_flag == other.department_flag &&
        department_param_id == other.department_param_id &&
        department_default_flag == other.department_default_flag &&
        department_override == other.department_override &&
        territory_flag == other.territory_flag &&
        territory_param_id == other.territory_param_id &&
        territory_default_flag == other.territory_default_flag &&
        territory_override == other.territory_override &&
        company_flag == other.company_flag &&
        company_param_id == other.company_param_id &&
        company_override == other.company_override &&
        member_flag == other.member_flag &&
        member_param_id == other.member_param_id &&
        member_override == other.member_override &&
        start_date_flag == other.start_date_flag &&
        start_date_param_id == other.start_date_param_id &&
        start_date_override == other.start_date_override &&
        end_date_flag == other.end_date_flag &&
        end_date_param_id == other.end_date_param_id &&
        end_date_override == other.end_date_override &&
        opp_type_flag == other.opp_type_flag &&
        opp_type_param_id == other.opp_type_param_id &&
        opp_type_override == other.opp_type_override &&
        opportunity_flag == other.opportunity_flag &&
        opportunity_param_id == other.opportunity_param_id &&
        opportunity_override == other.opportunity_override &&
        marketing_campaign_flag == other.marketing_campaign_flag &&
        marketing_campaign_param_id == other.marketing_campaign_param_id &&
        marketing_campaign_override == other.marketing_campaign_override &&
        service_board_flag == other.service_board_flag &&
        service_board_param_id == other.service_board_param_id &&
        service_board_default_flag == other.service_board_default_flag &&
        service_board_override == other.service_board_override &&
        service_type_flag == other.service_type_flag &&
        service_type_param_id == other.service_type_param_id &&
        service_type_override == other.service_type_override &&
        service_status_flag == other.service_status_flag &&
        service_status_param_id == other.service_status_param_id &&
        service_status_override == other.service_status_override &&
        agreement_type_flag == other.agreement_type_flag &&
        agreement_type_param_id == other.agreement_type_param_id &&
        agreement_type_override == other.agreement_type_override &&
        agreement_flag == other.agreement_flag &&
        agreement_param_id == other.agreement_param_id &&
        agreement_override == other.agreement_override &&
        project_type_flag == other.project_type_flag &&
        project_type_param_id == other.project_type_param_id &&
        project_type_override == other.project_type_override &&
        project_flag == other.project_flag &&
        project_param_id == other.project_param_id &&
        project_override == other.project_override &&
        work_role_flag == other.work_role_flag &&
        work_role_param_id == other.work_role_param_id &&
        work_role_override == other.work_role_override &&
        work_type_flag == other.work_type_flag &&
        work_type_param_id == other.work_type_param_id &&
        work_type_override == other.work_type_override &&
        invoice_flag == other.invoice_flag &&
        invoice_param_id == other.invoice_param_id &&
        invoice_override == other.invoice_override &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [report_link, name, _module, description, id, generated_flag, parameter_prefix, parameter_separator, parameter_name_separator, parameter_suffix, location_flag, location_param_id, location_default_flag, location_override, department_flag, department_param_id, department_default_flag, department_override, territory_flag, territory_param_id, territory_default_flag, territory_override, company_flag, company_param_id, company_override, member_flag, member_param_id, member_override, start_date_flag, start_date_param_id, start_date_override, end_date_flag, end_date_param_id, end_date_override, opp_type_flag, opp_type_param_id, opp_type_override, opportunity_flag, opportunity_param_id, opportunity_override, marketing_campaign_flag, marketing_campaign_param_id, marketing_campaign_override, service_board_flag, service_board_param_id, service_board_default_flag, service_board_override, service_type_flag, service_type_param_id, service_type_override, service_status_flag, service_status_param_id, service_status_override, agreement_type_flag, agreement_type_param_id, agreement_type_override, agreement_flag, agreement_param_id, agreement_override, project_type_flag, project_type_param_id, project_type_override, project_flag, project_param_id, project_override, work_role_flag, work_role_param_id, work_role_override, work_type_flag, work_type_param_id, work_type_override, invoice_flag, invoice_param_id, invoice_override, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
