=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class Location
    #  Max length: 50;
    attr_accessor :name

    attr_accessor :id

    attr_accessor :owner_level_id

    attr_accessor :structure_level

    attr_accessor :manager

    attr_accessor :reports_to

    #  Max length: 50;
    attr_accessor :sales_rep

    attr_accessor :time_zone_setup

    attr_accessor :calendar

    #  Max length: 50;
    attr_accessor :override_address_line1

    #  Max length: 50;
    attr_accessor :override_address_line2

    #  Max length: 50;
    attr_accessor :override_city

    #  Max length: 50;
    attr_accessor :override_state

    #  Max length: 12;
    attr_accessor :override_zip

    attr_accessor :override_country

    #  Max length: 15;
    attr_accessor :override_phone_number

    #  Max length: 15;
    attr_accessor :override_fax_number

    #  Max length: 100;
    attr_accessor :owa_url

    #  Max length: 10;
    attr_accessor :payroll_xref

    attr_accessor :location_flag

    attr_accessor :client_flag

    attr_accessor :work_role_ids

    attr_accessor :department_ids

    attr_accessor :_info

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'id' => :'id',
        :'owner_level_id' => :'ownerLevelId',
        :'structure_level' => :'structureLevel',
        :'manager' => :'manager',
        :'reports_to' => :'reportsTo',
        :'sales_rep' => :'salesRep',
        :'time_zone_setup' => :'timeZoneSetup',
        :'calendar' => :'calendar',
        :'override_address_line1' => :'overrideAddressLine1',
        :'override_address_line2' => :'overrideAddressLine2',
        :'override_city' => :'overrideCity',
        :'override_state' => :'overrideState',
        :'override_zip' => :'overrideZip',
        :'override_country' => :'overrideCountry',
        :'override_phone_number' => :'overridePhoneNumber',
        :'override_fax_number' => :'overrideFaxNumber',
        :'owa_url' => :'owaUrl',
        :'payroll_xref' => :'payrollXref',
        :'location_flag' => :'locationFlag',
        :'client_flag' => :'clientFlag',
        :'work_role_ids' => :'workRoleIds',
        :'department_ids' => :'departmentIds',
        :'_info' => :'_info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'id' => :'Integer',
        :'owner_level_id' => :'Integer',
        :'structure_level' => :'CorporateStructureLevelReference',
        :'manager' => :'MemberReference',
        :'reports_to' => :'SystemLocationReference',
        :'sales_rep' => :'String',
        :'time_zone_setup' => :'TimeZoneSetupReference',
        :'calendar' => :'CalendarReference',
        :'override_address_line1' => :'String',
        :'override_address_line2' => :'String',
        :'override_city' => :'String',
        :'override_state' => :'String',
        :'override_zip' => :'String',
        :'override_country' => :'CountryReference',
        :'override_phone_number' => :'String',
        :'override_fax_number' => :'String',
        :'owa_url' => :'String',
        :'payroll_xref' => :'String',
        :'location_flag' => :'Boolean',
        :'client_flag' => :'Boolean',
        :'work_role_ids' => :'Array<Integer>',
        :'department_ids' => :'Array<Integer>',
        :'_info' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'owner_level_id',
        :'location_flag',
        :'client_flag',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::Location` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::Location`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'owner_level_id')
        self.owner_level_id = attributes[:'owner_level_id']
      end

      if attributes.key?(:'structure_level')
        self.structure_level = attributes[:'structure_level']
      end

      if attributes.key?(:'manager')
        self.manager = attributes[:'manager']
      end

      if attributes.key?(:'reports_to')
        self.reports_to = attributes[:'reports_to']
      end

      if attributes.key?(:'sales_rep')
        self.sales_rep = attributes[:'sales_rep']
      end

      if attributes.key?(:'time_zone_setup')
        self.time_zone_setup = attributes[:'time_zone_setup']
      end

      if attributes.key?(:'calendar')
        self.calendar = attributes[:'calendar']
      end

      if attributes.key?(:'override_address_line1')
        self.override_address_line1 = attributes[:'override_address_line1']
      end

      if attributes.key?(:'override_address_line2')
        self.override_address_line2 = attributes[:'override_address_line2']
      end

      if attributes.key?(:'override_city')
        self.override_city = attributes[:'override_city']
      end

      if attributes.key?(:'override_state')
        self.override_state = attributes[:'override_state']
      end

      if attributes.key?(:'override_zip')
        self.override_zip = attributes[:'override_zip']
      end

      if attributes.key?(:'override_country')
        self.override_country = attributes[:'override_country']
      end

      if attributes.key?(:'override_phone_number')
        self.override_phone_number = attributes[:'override_phone_number']
      end

      if attributes.key?(:'override_fax_number')
        self.override_fax_number = attributes[:'override_fax_number']
      end

      if attributes.key?(:'owa_url')
        self.owa_url = attributes[:'owa_url']
      end

      if attributes.key?(:'payroll_xref')
        self.payroll_xref = attributes[:'payroll_xref']
      end

      if attributes.key?(:'location_flag')
        self.location_flag = attributes[:'location_flag']
      end

      if attributes.key?(:'client_flag')
        self.client_flag = attributes[:'client_flag']
      end

      if attributes.key?(:'work_role_ids')
        if (value = attributes[:'work_role_ids']).is_a?(Array)
          self.work_role_ids = value
        end
      end

      if attributes.key?(:'department_ids')
        if (value = attributes[:'department_ids']).is_a?(Array)
          self.department_ids = value
        end
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          id == o.id &&
          owner_level_id == o.owner_level_id &&
          structure_level == o.structure_level &&
          manager == o.manager &&
          reports_to == o.reports_to &&
          sales_rep == o.sales_rep &&
          time_zone_setup == o.time_zone_setup &&
          calendar == o.calendar &&
          override_address_line1 == o.override_address_line1 &&
          override_address_line2 == o.override_address_line2 &&
          override_city == o.override_city &&
          override_state == o.override_state &&
          override_zip == o.override_zip &&
          override_country == o.override_country &&
          override_phone_number == o.override_phone_number &&
          override_fax_number == o.override_fax_number &&
          owa_url == o.owa_url &&
          payroll_xref == o.payroll_xref &&
          location_flag == o.location_flag &&
          client_flag == o.client_flag &&
          work_role_ids == o.work_role_ids &&
          department_ids == o.department_ids &&
          _info == o._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, id, owner_level_id, structure_level, manager, reports_to, sales_rep, time_zone_setup, calendar, override_address_line1, override_address_line2, override_city, override_state, override_zip, override_country, override_phone_number, override_fax_number, owa_url, payroll_xref, location_flag, client_flag, work_role_ids, department_ids, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
