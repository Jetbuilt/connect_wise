# #Connectwise Manage All Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2022.1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.1
#

require 'date'
require 'time'

module ConnectWise
  class Location
    #  Max length: 50;
    attr_accessor :name

    attr_accessor :id, :owner_level_id, :structure_level, :manager, :reports_to, :time_zone_setup, :calendar, :override_country, :location_flag, :client_flag, :work_role_ids, :department_ids, :_info

    #  Max length: 50;
    attr_accessor :sales_rep

    #  Max length: 50;
    attr_accessor :override_address_line1

    #  Max length: 50;
    attr_accessor :override_address_line2

    #  Max length: 50;
    attr_accessor :override_city

    #  Max length: 50;
    attr_accessor :override_state

    #  Max length: 12;
    attr_accessor :override_zip

    #  Max length: 15;
    attr_accessor :override_phone_number

    #  Max length: 15;
    attr_accessor :override_fax_number

    #  Max length: 100;
    attr_accessor :owa_url

    #  Max length: 10;
    attr_accessor :payroll_xref

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        name: :name,
        id: :id,
        owner_level_id: :ownerLevelId,
        structure_level: :structureLevel,
        manager: :manager,
        reports_to: :reportsTo,
        sales_rep: :salesRep,
        time_zone_setup: :timeZoneSetup,
        calendar: :calendar,
        override_address_line1: :overrideAddressLine1,
        override_address_line2: :overrideAddressLine2,
        override_city: :overrideCity,
        override_state: :overrideState,
        override_zip: :overrideZip,
        override_country: :overrideCountry,
        override_phone_number: :overridePhoneNumber,
        override_fax_number: :overrideFaxNumber,
        owa_url: :owaUrl,
        payroll_xref: :payrollXref,
        location_flag: :locationFlag,
        client_flag: :clientFlag,
        work_role_ids: :workRoleIds,
        department_ids: :departmentIds,
        _info: :_info
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        name: :String,
        id: :Integer,
        owner_level_id: :Integer,
        structure_level: :CorporateStructureLevelReference,
        manager: :MemberReference,
        reports_to: :SystemLocationReference,
        sales_rep: :String,
        time_zone_setup: :TimeZoneSetupReference,
        calendar: :CalendarReference,
        override_address_line1: :String,
        override_address_line2: :String,
        override_city: :String,
        override_state: :String,
        override_zip: :String,
        override_country: :CountryReference,
        override_phone_number: :String,
        override_fax_number: :String,
        owa_url: :String,
        payroll_xref: :String,
        location_flag: :Boolean,
        client_flag: :Boolean,
        work_role_ids: :'Array<Integer>',
        department_ids: :'Array<Integer>',
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                owner_level_id
                location_flag
                client_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::Location` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::Location`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.name = attributes[:name] if attributes.key?(:name)

      self.id = attributes[:id] if attributes.key?(:id)

      self.owner_level_id = attributes[:owner_level_id] if attributes.key?(:owner_level_id)

      self.structure_level = attributes[:structure_level] if attributes.key?(:structure_level)

      self.manager = attributes[:manager] if attributes.key?(:manager)

      self.reports_to = attributes[:reports_to] if attributes.key?(:reports_to)

      self.sales_rep = attributes[:sales_rep] if attributes.key?(:sales_rep)

      self.time_zone_setup = attributes[:time_zone_setup] if attributes.key?(:time_zone_setup)

      self.calendar = attributes[:calendar] if attributes.key?(:calendar)

      self.override_address_line1 = attributes[:override_address_line1] if attributes.key?(:override_address_line1)

      self.override_address_line2 = attributes[:override_address_line2] if attributes.key?(:override_address_line2)

      self.override_city = attributes[:override_city] if attributes.key?(:override_city)

      self.override_state = attributes[:override_state] if attributes.key?(:override_state)

      self.override_zip = attributes[:override_zip] if attributes.key?(:override_zip)

      self.override_country = attributes[:override_country] if attributes.key?(:override_country)

      self.override_phone_number = attributes[:override_phone_number] if attributes.key?(:override_phone_number)

      self.override_fax_number = attributes[:override_fax_number] if attributes.key?(:override_fax_number)

      self.owa_url = attributes[:owa_url] if attributes.key?(:owa_url)

      self.payroll_xref = attributes[:payroll_xref] if attributes.key?(:payroll_xref)

      self.location_flag = attributes[:location_flag] if attributes.key?(:location_flag)

      self.client_flag = attributes[:client_flag] if attributes.key?(:client_flag)

      if attributes.key?(:work_role_ids) && (value = attributes[:work_role_ids]).is_a?(Array)
        self.work_role_ids = value
      end

      if attributes.key?(:department_ids) && (value = attributes[:department_ids]).is_a?(Array)
        self.department_ids = value
      end

      return unless attributes.key?(:_info)
      return unless (value = attributes[:_info]).is_a?(Hash)

      self._info = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      invalid_properties.push('invalid value for "name", name cannot be nil.') if @name.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?

      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        id == other.id &&
        owner_level_id == other.owner_level_id &&
        structure_level == other.structure_level &&
        manager == other.manager &&
        reports_to == other.reports_to &&
        sales_rep == other.sales_rep &&
        time_zone_setup == other.time_zone_setup &&
        calendar == other.calendar &&
        override_address_line1 == other.override_address_line1 &&
        override_address_line2 == other.override_address_line2 &&
        override_city == other.override_city &&
        override_state == other.override_state &&
        override_zip == other.override_zip &&
        override_country == other.override_country &&
        override_phone_number == other.override_phone_number &&
        override_fax_number == other.override_fax_number &&
        owa_url == other.owa_url &&
        payroll_xref == other.payroll_xref &&
        location_flag == other.location_flag &&
        client_flag == other.client_flag &&
        work_role_ids == other.work_role_ids &&
        department_ids == other.department_ids &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, id, owner_level_id, structure_level, manager, reports_to, sales_rep, time_zone_setup, calendar, override_address_line1, override_address_line2, override_city, override_state, override_zip, override_country, override_phone_number, override_fax_number, owa_url, payroll_xref, location_flag, client_flag, work_role_ids, department_ids, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
