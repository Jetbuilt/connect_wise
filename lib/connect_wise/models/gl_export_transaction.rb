# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class GLExportTransaction
    attr_accessor :id, :gl_class, :gl_type_id, :document_date, :document_number, :document_type, :memo, :description,
                  :attention, :sales_territory, :company, :company_type, :company_account_number, :site, :billing_terms, :billing_terms_xref, :due_days, :due_date, :email_delivery_flag, :print_delivery_flag, :agreement_pre_payment_flag, :account_number, :billing_type, :gl_entry_ids, :purchase_order, :project, :currency, :total, :sales_rep_id, :sales_rep_name, :taxable, :taxable_total, :tax_code, :tax_group_rate, :piggy_back_flag, :tax_account_number, :sales_tax, :state_tax, :county_tax, :city_tax, :taxable_amount1, :taxable_amount2, :taxable_amount3, :taxable_amount4, :taxable_amount5, :tax_agency_xref, :state_tax_xref, :county_tax_xref, :tax_id, :tax_dp_applied_flag, :use_avalara_flag, :send_avalara_tax_flag, :ship_to_company, :ship_to_company_account_number, :ship_to_company_type, :ship_to_tax_id, :ship_site, :ship_contact, :detail, :tax_levels

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        gl_class: :glClass,
        gl_type_id: :glTypeId,
        document_date: :documentDate,
        document_number: :documentNumber,
        document_type: :documentType,
        memo: :memo,
        description: :description,
        attention: :attention,
        sales_territory: :salesTerritory,
        company: :company,
        company_type: :companyType,
        company_account_number: :companyAccountNumber,
        site: :site,
        billing_terms: :billingTerms,
        billing_terms_xref: :billingTermsXref,
        due_days: :dueDays,
        due_date: :dueDate,
        email_delivery_flag: :emailDeliveryFlag,
        print_delivery_flag: :printDeliveryFlag,
        agreement_pre_payment_flag: :agreementPrePaymentFlag,
        account_number: :accountNumber,
        billing_type: :billingType,
        gl_entry_ids: :glEntryIds,
        purchase_order: :purchaseOrder,
        project: :project,
        currency: :currency,
        total: :total,
        sales_rep_id: :salesRepId,
        sales_rep_name: :salesRepName,
        taxable: :taxable,
        taxable_total: :taxableTotal,
        tax_code: :taxCode,
        tax_group_rate: :taxGroupRate,
        piggy_back_flag: :piggyBackFlag,
        tax_account_number: :taxAccountNumber,
        sales_tax: :salesTax,
        state_tax: :stateTax,
        county_tax: :countyTax,
        city_tax: :cityTax,
        taxable_amount1: :taxableAmount1,
        taxable_amount2: :taxableAmount2,
        taxable_amount3: :taxableAmount3,
        taxable_amount4: :taxableAmount4,
        taxable_amount5: :taxableAmount5,
        tax_agency_xref: :taxAgencyXref,
        state_tax_xref: :stateTaxXref,
        county_tax_xref: :countyTaxXref,
        tax_id: :taxId,
        tax_dp_applied_flag: :taxDpAppliedFlag,
        use_avalara_flag: :useAvalaraFlag,
        send_avalara_tax_flag: :sendAvalaraTaxFlag,
        ship_to_company: :shipToCompany,
        ship_to_company_account_number: :shipToCompanyAccountNumber,
        ship_to_company_type: :shipToCompanyType,
        ship_to_tax_id: :shipToTaxId,
        ship_site: :shipSite,
        ship_contact: :shipContact,
        detail: :detail,
        tax_levels: :taxLevels
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        gl_class: :String,
        gl_type_id: :String,
        document_date: :String,
        document_number: :String,
        document_type: :String,
        memo: :String,
        description: :String,
        attention: :String,
        sales_territory: :String,
        company: :CompanyReference,
        company_type: :CompanyTypeReference,
        company_account_number: :String,
        site: :SiteReference,
        billing_terms: :BillingTermsReference,
        billing_terms_xref: :String,
        due_days: :Integer,
        due_date: :String,
        email_delivery_flag: :Boolean,
        print_delivery_flag: :Boolean,
        agreement_pre_payment_flag: :Boolean,
        account_number: :String,
        billing_type: :String,
        gl_entry_ids: :String,
        purchase_order: :PurchaseOrderReference,
        project: :ProjectReference,
        currency: :CurrencyReference,
        total: :Float,
        sales_rep_id: :String,
        sales_rep_name: :String,
        taxable: :Boolean,
        taxable_total: :Float,
        tax_code: :TaxCodeReference,
        tax_group_rate: :Float,
        piggy_back_flag: :Boolean,
        tax_account_number: :String,
        sales_tax: :Float,
        state_tax: :Float,
        county_tax: :Float,
        city_tax: :Float,
        taxable_amount1: :Float,
        taxable_amount2: :Float,
        taxable_amount3: :Float,
        taxable_amount4: :Float,
        taxable_amount5: :Float,
        tax_agency_xref: :String,
        state_tax_xref: :String,
        county_tax_xref: :String,
        tax_id: :String,
        tax_dp_applied_flag: :Boolean,
        use_avalara_flag: :Boolean,
        send_avalara_tax_flag: :Boolean,
        ship_to_company: :CompanyReference,
        ship_to_company_account_number: :String,
        ship_to_company_type: :CompanyTypeReference,
        ship_to_tax_id: :String,
        ship_site: :SiteReference,
        ship_contact: :String,
        detail: :'Array<GLExportTransactionDetail>',
        tax_levels: :'Array<GLExportTransactionTaxLevel>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                id
                due_days
                email_delivery_flag
                print_delivery_flag
                agreement_pre_payment_flag
                total
                taxable
                taxable_total
                tax_group_rate
                piggy_back_flag
                sales_tax
                state_tax
                county_tax
                city_tax
                taxable_amount1
                taxable_amount2
                taxable_amount3
                taxable_amount4
                taxable_amount5
                tax_dp_applied_flag
                use_avalara_flag
                send_avalara_tax_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `ConnectWise::GLExportTransaction` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless acceptable_attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `ConnectWise::GLExportTransaction`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.gl_class = attributes[:gl_class] if attributes.key?(:gl_class)

      self.gl_type_id = attributes[:gl_type_id] if attributes.key?(:gl_type_id)

      self.document_date = attributes[:document_date] if attributes.key?(:document_date)

      self.document_number = attributes[:document_number] if attributes.key?(:document_number)

      self.document_type = attributes[:document_type] if attributes.key?(:document_type)

      self.memo = attributes[:memo] if attributes.key?(:memo)

      self.description = attributes[:description] if attributes.key?(:description)

      self.attention = attributes[:attention] if attributes.key?(:attention)

      self.sales_territory = attributes[:sales_territory] if attributes.key?(:sales_territory)

      self.company = attributes[:company] if attributes.key?(:company)

      self.company_type = attributes[:company_type] if attributes.key?(:company_type)

      self.company_account_number = attributes[:company_account_number] if attributes.key?(:company_account_number)

      self.site = attributes[:site] if attributes.key?(:site)

      self.billing_terms = attributes[:billing_terms] if attributes.key?(:billing_terms)

      self.billing_terms_xref = attributes[:billing_terms_xref] if attributes.key?(:billing_terms_xref)

      self.due_days = attributes[:due_days] if attributes.key?(:due_days)

      self.due_date = attributes[:due_date] if attributes.key?(:due_date)

      self.email_delivery_flag = attributes[:email_delivery_flag] if attributes.key?(:email_delivery_flag)

      self.print_delivery_flag = attributes[:print_delivery_flag] if attributes.key?(:print_delivery_flag)

      if attributes.key?(:agreement_pre_payment_flag)
        self.agreement_pre_payment_flag = attributes[:agreement_pre_payment_flag]
      end

      self.account_number = attributes[:account_number] if attributes.key?(:account_number)

      self.billing_type = attributes[:billing_type] if attributes.key?(:billing_type)

      self.gl_entry_ids = attributes[:gl_entry_ids] if attributes.key?(:gl_entry_ids)

      self.purchase_order = attributes[:purchase_order] if attributes.key?(:purchase_order)

      self.project = attributes[:project] if attributes.key?(:project)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      self.total = attributes[:total] if attributes.key?(:total)

      self.sales_rep_id = attributes[:sales_rep_id] if attributes.key?(:sales_rep_id)

      self.sales_rep_name = attributes[:sales_rep_name] if attributes.key?(:sales_rep_name)

      self.taxable = attributes[:taxable] if attributes.key?(:taxable)

      self.taxable_total = attributes[:taxable_total] if attributes.key?(:taxable_total)

      self.tax_code = attributes[:tax_code] if attributes.key?(:tax_code)

      self.tax_group_rate = attributes[:tax_group_rate] if attributes.key?(:tax_group_rate)

      self.piggy_back_flag = attributes[:piggy_back_flag] if attributes.key?(:piggy_back_flag)

      self.tax_account_number = attributes[:tax_account_number] if attributes.key?(:tax_account_number)

      self.sales_tax = attributes[:sales_tax] if attributes.key?(:sales_tax)

      self.state_tax = attributes[:state_tax] if attributes.key?(:state_tax)

      self.county_tax = attributes[:county_tax] if attributes.key?(:county_tax)

      self.city_tax = attributes[:city_tax] if attributes.key?(:city_tax)

      self.taxable_amount1 = attributes[:taxable_amount1] if attributes.key?(:taxable_amount1)

      self.taxable_amount2 = attributes[:taxable_amount2] if attributes.key?(:taxable_amount2)

      self.taxable_amount3 = attributes[:taxable_amount3] if attributes.key?(:taxable_amount3)

      self.taxable_amount4 = attributes[:taxable_amount4] if attributes.key?(:taxable_amount4)

      self.taxable_amount5 = attributes[:taxable_amount5] if attributes.key?(:taxable_amount5)

      self.tax_agency_xref = attributes[:tax_agency_xref] if attributes.key?(:tax_agency_xref)

      self.state_tax_xref = attributes[:state_tax_xref] if attributes.key?(:state_tax_xref)

      self.county_tax_xref = attributes[:county_tax_xref] if attributes.key?(:county_tax_xref)

      self.tax_id = attributes[:tax_id] if attributes.key?(:tax_id)

      self.tax_dp_applied_flag = attributes[:tax_dp_applied_flag] if attributes.key?(:tax_dp_applied_flag)

      self.use_avalara_flag = attributes[:use_avalara_flag] if attributes.key?(:use_avalara_flag)

      self.send_avalara_tax_flag = attributes[:send_avalara_tax_flag] if attributes.key?(:send_avalara_tax_flag)

      self.ship_to_company = attributes[:ship_to_company] if attributes.key?(:ship_to_company)

      if attributes.key?(:ship_to_company_account_number)
        self.ship_to_company_account_number = attributes[:ship_to_company_account_number]
      end

      self.ship_to_company_type = attributes[:ship_to_company_type] if attributes.key?(:ship_to_company_type)

      self.ship_to_tax_id = attributes[:ship_to_tax_id] if attributes.key?(:ship_to_tax_id)

      self.ship_site = attributes[:ship_site] if attributes.key?(:ship_site)

      self.ship_contact = attributes[:ship_contact] if attributes.key?(:ship_contact)

      if attributes.key?(:detail) && (value = attributes[:detail]).is_a?(Array)
        self.detail = value
      end

      return unless attributes.key?(:tax_levels)

      if (value = attributes[:tax_levels]).is_a?(Array)
        self.tax_levels = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        gl_class == other.gl_class &&
        gl_type_id == other.gl_type_id &&
        document_date == other.document_date &&
        document_number == other.document_number &&
        document_type == other.document_type &&
        memo == other.memo &&
        description == other.description &&
        attention == other.attention &&
        sales_territory == other.sales_territory &&
        company == other.company &&
        company_type == other.company_type &&
        company_account_number == other.company_account_number &&
        site == other.site &&
        billing_terms == other.billing_terms &&
        billing_terms_xref == other.billing_terms_xref &&
        due_days == other.due_days &&
        due_date == other.due_date &&
        email_delivery_flag == other.email_delivery_flag &&
        print_delivery_flag == other.print_delivery_flag &&
        agreement_pre_payment_flag == other.agreement_pre_payment_flag &&
        account_number == other.account_number &&
        billing_type == other.billing_type &&
        gl_entry_ids == other.gl_entry_ids &&
        purchase_order == other.purchase_order &&
        project == other.project &&
        currency == other.currency &&
        total == other.total &&
        sales_rep_id == other.sales_rep_id &&
        sales_rep_name == other.sales_rep_name &&
        taxable == other.taxable &&
        taxable_total == other.taxable_total &&
        tax_code == other.tax_code &&
        tax_group_rate == other.tax_group_rate &&
        piggy_back_flag == other.piggy_back_flag &&
        tax_account_number == other.tax_account_number &&
        sales_tax == other.sales_tax &&
        state_tax == other.state_tax &&
        county_tax == other.county_tax &&
        city_tax == other.city_tax &&
        taxable_amount1 == other.taxable_amount1 &&
        taxable_amount2 == other.taxable_amount2 &&
        taxable_amount3 == other.taxable_amount3 &&
        taxable_amount4 == other.taxable_amount4 &&
        taxable_amount5 == other.taxable_amount5 &&
        tax_agency_xref == other.tax_agency_xref &&
        state_tax_xref == other.state_tax_xref &&
        county_tax_xref == other.county_tax_xref &&
        tax_id == other.tax_id &&
        tax_dp_applied_flag == other.tax_dp_applied_flag &&
        use_avalara_flag == other.use_avalara_flag &&
        send_avalara_tax_flag == other.send_avalara_tax_flag &&
        ship_to_company == other.ship_to_company &&
        ship_to_company_account_number == other.ship_to_company_account_number &&
        ship_to_company_type == other.ship_to_company_type &&
        ship_to_tax_id == other.ship_to_tax_id &&
        ship_site == other.ship_site &&
        ship_contact == other.ship_contact &&
        detail == other.detail &&
        tax_levels == other.tax_levels
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, gl_class, gl_type_id, document_date, document_number, document_type, memo, description, attention,
       sales_territory, company, company_type, company_account_number, site, billing_terms, billing_terms_xref, due_days, due_date, email_delivery_flag, print_delivery_flag, agreement_pre_payment_flag, account_number, billing_type, gl_entry_ids, purchase_order, project, currency, total, sales_rep_id, sales_rep_name, taxable, taxable_total, tax_code, tax_group_rate, piggy_back_flag, tax_account_number, sales_tax, state_tax, county_tax, city_tax, taxable_amount1, taxable_amount2, taxable_amount3, taxable_amount4, taxable_amount5, tax_agency_xref, state_tax_xref, county_tax_xref, tax_id, tax_dp_applied_flag, use_avalara_flag, send_avalara_tax_flag, ship_to_company, ship_to_company_account_number, ship_to_company_type, ship_to_tax_id, ship_site, ship_contact, detail, tax_levels].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
