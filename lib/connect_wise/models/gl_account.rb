=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class GLAccount
    attr_accessor :gl_type

    attr_accessor :mapped_type

    attr_accessor :mapped_record

    attr_accessor :id

    #  Max length: 255;
    attr_accessor :segment1

    #  Max length: 255;
    attr_accessor :segment2

    #  Max length: 255;
    attr_accessor :segment3

    #  Max length: 255;
    attr_accessor :segment4

    #  Max length: 255;
    attr_accessor :segment5

    #  Max length: 255;
    attr_accessor :segment6

    #  Max length: 255;
    attr_accessor :segment7

    #  Max length: 255;
    attr_accessor :segment8

    #  Max length: 255;
    attr_accessor :segment9

    #  Max length: 255;
    attr_accessor :segment10

    #  Max length: 255;
    attr_accessor :cogs1

    #  Max length: 255;
    attr_accessor :cogs2

    #  Max length: 255;
    attr_accessor :cogs3

    #  Max length: 255;
    attr_accessor :cogs4

    #  Max length: 255;
    attr_accessor :cogs5

    #  Max length: 255;
    attr_accessor :cogs6

    #  Max length: 255;
    attr_accessor :cogs7

    #  Max length: 255;
    attr_accessor :cogs8

    #  Max length: 255;
    attr_accessor :cogs9

    #  Max length: 255;
    attr_accessor :cogs10

    #  Max length: 255;
    attr_accessor :product_id

    #  Max length: 255;
    attr_accessor :inventory

    #  Max length: 255;
    attr_accessor :sales_code

    attr_accessor :_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'gl_type' => :'glType',
        :'mapped_type' => :'mappedType',
        :'mapped_record' => :'mappedRecord',
        :'id' => :'id',
        :'segment1' => :'segment1',
        :'segment2' => :'segment2',
        :'segment3' => :'segment3',
        :'segment4' => :'segment4',
        :'segment5' => :'segment5',
        :'segment6' => :'segment6',
        :'segment7' => :'segment7',
        :'segment8' => :'segment8',
        :'segment9' => :'segment9',
        :'segment10' => :'segment10',
        :'cogs1' => :'cogs1',
        :'cogs2' => :'cogs2',
        :'cogs3' => :'cogs3',
        :'cogs4' => :'cogs4',
        :'cogs5' => :'cogs5',
        :'cogs6' => :'cogs6',
        :'cogs7' => :'cogs7',
        :'cogs8' => :'cogs8',
        :'cogs9' => :'cogs9',
        :'cogs10' => :'cogs10',
        :'product_id' => :'productId',
        :'inventory' => :'inventory',
        :'sales_code' => :'salesCode',
        :'_info' => :'_info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'gl_type' => :'String',
        :'mapped_type' => :'MappedTypeReference',
        :'mapped_record' => :'MappedRecordReference',
        :'id' => :'Integer',
        :'segment1' => :'String',
        :'segment2' => :'String',
        :'segment3' => :'String',
        :'segment4' => :'String',
        :'segment5' => :'String',
        :'segment6' => :'String',
        :'segment7' => :'String',
        :'segment8' => :'String',
        :'segment9' => :'String',
        :'segment10' => :'String',
        :'cogs1' => :'String',
        :'cogs2' => :'String',
        :'cogs3' => :'String',
        :'cogs4' => :'String',
        :'cogs5' => :'String',
        :'cogs6' => :'String',
        :'cogs7' => :'String',
        :'cogs8' => :'String',
        :'cogs9' => :'String',
        :'cogs10' => :'String',
        :'product_id' => :'String',
        :'inventory' => :'String',
        :'sales_code' => :'String',
        :'_info' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'gl_type',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::GLAccount` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::GLAccount`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'gl_type')
        self.gl_type = attributes[:'gl_type']
      end

      if attributes.key?(:'mapped_type')
        self.mapped_type = attributes[:'mapped_type']
      end

      if attributes.key?(:'mapped_record')
        self.mapped_record = attributes[:'mapped_record']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'segment1')
        self.segment1 = attributes[:'segment1']
      end

      if attributes.key?(:'segment2')
        self.segment2 = attributes[:'segment2']
      end

      if attributes.key?(:'segment3')
        self.segment3 = attributes[:'segment3']
      end

      if attributes.key?(:'segment4')
        self.segment4 = attributes[:'segment4']
      end

      if attributes.key?(:'segment5')
        self.segment5 = attributes[:'segment5']
      end

      if attributes.key?(:'segment6')
        self.segment6 = attributes[:'segment6']
      end

      if attributes.key?(:'segment7')
        self.segment7 = attributes[:'segment7']
      end

      if attributes.key?(:'segment8')
        self.segment8 = attributes[:'segment8']
      end

      if attributes.key?(:'segment9')
        self.segment9 = attributes[:'segment9']
      end

      if attributes.key?(:'segment10')
        self.segment10 = attributes[:'segment10']
      end

      if attributes.key?(:'cogs1')
        self.cogs1 = attributes[:'cogs1']
      end

      if attributes.key?(:'cogs2')
        self.cogs2 = attributes[:'cogs2']
      end

      if attributes.key?(:'cogs3')
        self.cogs3 = attributes[:'cogs3']
      end

      if attributes.key?(:'cogs4')
        self.cogs4 = attributes[:'cogs4']
      end

      if attributes.key?(:'cogs5')
        self.cogs5 = attributes[:'cogs5']
      end

      if attributes.key?(:'cogs6')
        self.cogs6 = attributes[:'cogs6']
      end

      if attributes.key?(:'cogs7')
        self.cogs7 = attributes[:'cogs7']
      end

      if attributes.key?(:'cogs8')
        self.cogs8 = attributes[:'cogs8']
      end

      if attributes.key?(:'cogs9')
        self.cogs9 = attributes[:'cogs9']
      end

      if attributes.key?(:'cogs10')
        self.cogs10 = attributes[:'cogs10']
      end

      if attributes.key?(:'product_id')
        self.product_id = attributes[:'product_id']
      end

      if attributes.key?(:'inventory')
        self.inventory = attributes[:'inventory']
      end

      if attributes.key?(:'sales_code')
        self.sales_code = attributes[:'sales_code']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @mapped_type.nil?
        invalid_properties.push('invalid value for "mapped_type", mapped_type cannot be nil.')
      end

      if @mapped_record.nil?
        invalid_properties.push('invalid value for "mapped_record", mapped_record cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      gl_type_validator = EnumAttributeValidator.new('String', ["AP", "AR", "EE", "EI", "EO", "IA", "IT", "P", "PF", "R", "RA", "RD", "RE", "RP", "ST", "SD", "ET", "FT", "PT"])
      return false unless gl_type_validator.valid?(@gl_type)
      return false if @mapped_type.nil?
      return false if @mapped_record.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gl_type Object to be assigned
    def gl_type=(gl_type)
      validator = EnumAttributeValidator.new('String', ["AP", "AR", "EE", "EI", "EO", "IA", "IT", "P", "PF", "R", "RA", "RD", "RE", "RP", "ST", "SD", "ET", "FT", "PT"])
      unless validator.valid?(gl_type)
        fail ArgumentError, "invalid value for \"gl_type\", must be one of #{validator.allowable_values}."
      end
      @gl_type = gl_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          gl_type == o.gl_type &&
          mapped_type == o.mapped_type &&
          mapped_record == o.mapped_record &&
          id == o.id &&
          segment1 == o.segment1 &&
          segment2 == o.segment2 &&
          segment3 == o.segment3 &&
          segment4 == o.segment4 &&
          segment5 == o.segment5 &&
          segment6 == o.segment6 &&
          segment7 == o.segment7 &&
          segment8 == o.segment8 &&
          segment9 == o.segment9 &&
          segment10 == o.segment10 &&
          cogs1 == o.cogs1 &&
          cogs2 == o.cogs2 &&
          cogs3 == o.cogs3 &&
          cogs4 == o.cogs4 &&
          cogs5 == o.cogs5 &&
          cogs6 == o.cogs6 &&
          cogs7 == o.cogs7 &&
          cogs8 == o.cogs8 &&
          cogs9 == o.cogs9 &&
          cogs10 == o.cogs10 &&
          product_id == o.product_id &&
          inventory == o.inventory &&
          sales_code == o.sales_code &&
          _info == o._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [gl_type, mapped_type, mapped_record, id, segment1, segment2, segment3, segment4, segment5, segment6, segment7, segment8, segment9, segment10, cogs1, cogs2, cogs3, cogs4, cogs5, cogs6, cogs7, cogs8, cogs9, cogs10, product_id, inventory, sales_code, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
