=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class GLExport
    attr_accessor :export_settings

    attr_accessor :vendors

    attr_accessor :customers

    attr_accessor :transactions

    attr_accessor :expenses

    attr_accessor :expense_bills

    attr_accessor :purchase_transactions

    attr_accessor :adjustment_transactions

    attr_accessor :inventory_transfers

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'export_settings' => :'exportSettings',
        :'vendors' => :'vendors',
        :'customers' => :'customers',
        :'transactions' => :'transactions',
        :'expenses' => :'expenses',
        :'expense_bills' => :'expenseBills',
        :'purchase_transactions' => :'purchaseTransactions',
        :'adjustment_transactions' => :'adjustmentTransactions',
        :'inventory_transfers' => :'inventoryTransfers'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'export_settings' => :'Object',
        :'vendors' => :'Array<GLExportVendor>',
        :'customers' => :'Array<GLExportCustomer>',
        :'transactions' => :'Array<GLExportTransaction>',
        :'expenses' => :'Array<GLExportExpense>',
        :'expense_bills' => :'Array<GLExportExpenseBill>',
        :'purchase_transactions' => :'Array<GLExportPurchaseTransaction>',
        :'adjustment_transactions' => :'Array<GLExportAdjustmentTransaction>',
        :'inventory_transfers' => :'Array<GLExportInventoryTransfer>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::GLExport` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::GLExport`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'export_settings')
        self.export_settings = attributes[:'export_settings']
      end

      if attributes.key?(:'vendors')
        if (value = attributes[:'vendors']).is_a?(Array)
          self.vendors = value
        end
      end

      if attributes.key?(:'customers')
        if (value = attributes[:'customers']).is_a?(Array)
          self.customers = value
        end
      end

      if attributes.key?(:'transactions')
        if (value = attributes[:'transactions']).is_a?(Array)
          self.transactions = value
        end
      end

      if attributes.key?(:'expenses')
        if (value = attributes[:'expenses']).is_a?(Array)
          self.expenses = value
        end
      end

      if attributes.key?(:'expense_bills')
        if (value = attributes[:'expense_bills']).is_a?(Array)
          self.expense_bills = value
        end
      end

      if attributes.key?(:'purchase_transactions')
        if (value = attributes[:'purchase_transactions']).is_a?(Array)
          self.purchase_transactions = value
        end
      end

      if attributes.key?(:'adjustment_transactions')
        if (value = attributes[:'adjustment_transactions']).is_a?(Array)
          self.adjustment_transactions = value
        end
      end

      if attributes.key?(:'inventory_transfers')
        if (value = attributes[:'inventory_transfers']).is_a?(Array)
          self.inventory_transfers = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          export_settings == o.export_settings &&
          vendors == o.vendors &&
          customers == o.customers &&
          transactions == o.transactions &&
          expenses == o.expenses &&
          expense_bills == o.expense_bills &&
          purchase_transactions == o.purchase_transactions &&
          adjustment_transactions == o.adjustment_transactions &&
          inventory_transfers == o.inventory_transfers
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [export_settings, vendors, customers, transactions, expenses, expense_bills, purchase_transactions, adjustment_transactions, inventory_transfers].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
