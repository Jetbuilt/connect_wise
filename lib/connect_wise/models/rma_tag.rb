# #Connectwise Manage All Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2022.1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.1
#

require 'date'
require 'time'

module ConnectWise
  class RmaTag
    #  Max length: 200;
    attr_accessor :product_description

    attr_accessor :id, :service_ticket, :sales_order, :invoice, :project, :product, :iv_description, :serial_number, :status, :list_price, :unit_price, :location, :department, :returned_company, :returned_contact, :returned_contact_type, :returned_contact_phone, :returned_contact_extension, :returned_contact_email, :returned_contact_country, :rma_disposition, :returned_site, :purchased_company, :purchased_contact, :purchased_contact_type, :purchased_contact_phone, :purchased_contact_extension, :purchased_contact_email, :purchased_contact_country, :purchased_invoice_date, :purchased_vendor_action, :purchased_site, :warranty_company, :warranty_contact, :warranty_contact_type, :warranty_contact_phone, :warranty_contact_email, :warranty_contact_extension, :warranty_contact_country, :warranty_site, :repair_company, :repair_contact, :repair_contact_type, :repair_contact_phone, :repair_contact_extension, :repair_contact_email, :repair_contact_country, :repair_site, :drop_ship_flag, :ship_method, :shipping_date, :date_closed, :account_manager, :technical_contact, :currency, :closed_by, :_info, :custom_fields

    #  Max length: 150;
    attr_accessor :summary

    #  Max length: 100;
    attr_accessor :mfg_item_id

    #  Max length: 1000;
    attr_accessor :problem_description

    #  Max length: 50;
    attr_accessor :returned_contact_address_line1

    #  Max length: 50;
    attr_accessor :returned_contact_address_line2

    #  Max length: 50;
    attr_accessor :returned_contact_city

    #  Max length: 50;
    attr_accessor :returned_contact_state

    #  Max length: 12;
    attr_accessor :returned_contact_zip

    #  Max length: 50;
    attr_accessor :purchased_contact_address_line1

    #  Max length: 50;
    attr_accessor :purchased_contact_address_line2

    #  Max length: 50;
    attr_accessor :purchased_contact_city

    #  Max length: 50;
    attr_accessor :purchased_contact_state

    #  Max length: 12;
    attr_accessor :purchased_contact_zip

    #  Max length: 50;
    attr_accessor :purchased_invoice_number

    #  Max length: 50;
    attr_accessor :purchased_order_number

    #  Max length: 50;
    attr_accessor :purchased_vendor_rma_number

    #  Max length: 1000;
    attr_accessor :purchased_notes

    #  Max length: 50;
    attr_accessor :warranty_contact_address_line1

    #  Max length: 50;
    attr_accessor :warranty_contact_address_line2

    #  Max length: 50;
    attr_accessor :warranty_contact_city

    #  Max length: 50;
    attr_accessor :warranty_contact_state

    #  Max length: 12;
    attr_accessor :warranty_contact_zip

    #  Max length: 1000;
    attr_accessor :warranty_notes

    #  Max length: 50;
    attr_accessor :repair_contact_address_line1

    #  Max length: 50;
    attr_accessor :repair_contact_address_line2

    #  Max length: 50;
    attr_accessor :repair_contact_city

    #  Max length: 50;
    attr_accessor :repair_contact_state

    #  Max length: 12;
    attr_accessor :repair_contact_zip

    #  Max length: 50;
    attr_accessor :repair_order_number

    #  Max length: 1000;
    attr_accessor :repair_notes

    #  Max length: 50;
    attr_accessor :shipping_tracking_number

    #  Max length: 1000;
    attr_accessor :internal_notes

    #  Max length: 1000;
    attr_accessor :closing_notes

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        product_description: :productDescription,
        id: :id,
        service_ticket: :serviceTicket,
        sales_order: :salesOrder,
        invoice: :invoice,
        project: :project,
        summary: :summary,
        product: :product,
        iv_description: :ivDescription,
        serial_number: :serialNumber,
        mfg_item_id: :mfgItemID,
        status: :status,
        list_price: :listPrice,
        unit_price: :unitPrice,
        location: :location,
        department: :department,
        problem_description: :problemDescription,
        returned_company: :returnedCompany,
        returned_contact: :returnedContact,
        returned_contact_type: :returnedContactType,
        returned_contact_phone: :returnedContactPhone,
        returned_contact_extension: :returnedContactExtension,
        returned_contact_email: :returnedContactEmail,
        returned_contact_address_line1: :returnedContactAddressLine1,
        returned_contact_address_line2: :returnedContactAddressLine2,
        returned_contact_city: :returnedContactCity,
        returned_contact_state: :returnedContactState,
        returned_contact_zip: :returnedContactZip,
        returned_contact_country: :returnedContactCountry,
        rma_disposition: :rmaDisposition,
        returned_site: :returnedSite,
        purchased_company: :purchasedCompany,
        purchased_contact: :purchasedContact,
        purchased_contact_type: :purchasedContactType,
        purchased_contact_phone: :purchasedContactPhone,
        purchased_contact_extension: :purchasedContactExtension,
        purchased_contact_email: :purchasedContactEmail,
        purchased_contact_address_line1: :purchasedContactAddressLine1,
        purchased_contact_address_line2: :purchasedContactAddressLine2,
        purchased_contact_city: :purchasedContactCity,
        purchased_contact_state: :purchasedContactState,
        purchased_contact_zip: :purchasedContactZip,
        purchased_contact_country: :purchasedContactCountry,
        purchased_invoice_number: :purchasedInvoiceNumber,
        purchased_invoice_date: :purchasedInvoiceDate,
        purchased_order_number: :purchasedOrderNumber,
        purchased_vendor_action: :purchasedVendorAction,
        purchased_vendor_rma_number: :purchasedVendorRmaNumber,
        purchased_site: :purchasedSite,
        purchased_notes: :purchasedNotes,
        warranty_company: :warrantyCompany,
        warranty_contact: :warrantyContact,
        warranty_contact_type: :warrantyContactType,
        warranty_contact_phone: :warrantyContactPhone,
        warranty_contact_email: :warrantyContactEmail,
        warranty_contact_extension: :warrantyContactExtension,
        warranty_contact_address_line1: :warrantyContactAddressLine1,
        warranty_contact_address_line2: :warrantyContactAddressLine2,
        warranty_contact_city: :warrantyContactCity,
        warranty_contact_state: :warrantyContactState,
        warranty_contact_zip: :warrantyContactZip,
        warranty_contact_country: :warrantyContactCountry,
        warranty_site: :warrantySite,
        warranty_notes: :warrantyNotes,
        repair_company: :repairCompany,
        repair_contact: :repairContact,
        repair_contact_type: :repairContactType,
        repair_contact_phone: :repairContactPhone,
        repair_contact_extension: :repairContactExtension,
        repair_contact_email: :repairContactEmail,
        repair_contact_address_line1: :repairContactAddressLine1,
        repair_contact_address_line2: :repairContactAddressLine2,
        repair_contact_city: :repairContactCity,
        repair_contact_state: :repairContactState,
        repair_contact_zip: :repairContactZip,
        repair_contact_country: :repairContactCountry,
        repair_order_number: :repairOrderNumber,
        repair_site: :repairSite,
        repair_notes: :repairNotes,
        drop_ship_flag: :dropShipFlag,
        ship_method: :shipMethod,
        shipping_date: :shippingDate,
        shipping_tracking_number: :shippingTrackingNumber,
        internal_notes: :internalNotes,
        closing_notes: :closingNotes,
        date_closed: :dateClosed,
        account_manager: :accountManager,
        technical_contact: :technicalContact,
        currency: :currency,
        closed_by: :closedBy,
        _info: :_info,
        custom_fields: :customFields
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        product_description: :String,
        id: :Integer,
        service_ticket: :TicketReference,
        sales_order: :SalesOrderReference,
        invoice: :InvoiceReference,
        project: :ProjectReference,
        summary: :String,
        product: :IvItemReference,
        iv_description: :String,
        serial_number: :String,
        mfg_item_id: :String,
        status: :RmaStatusReference,
        list_price: :Float,
        unit_price: :Float,
        location: :SystemLocationReference,
        department: :SystemDepartmentReference,
        problem_description: :String,
        returned_company: :CompanyReference,
        returned_contact: :ContactReference,
        returned_contact_type: :String,
        returned_contact_phone: :String,
        returned_contact_extension: :String,
        returned_contact_email: :String,
        returned_contact_address_line1: :String,
        returned_contact_address_line2: :String,
        returned_contact_city: :String,
        returned_contact_state: :String,
        returned_contact_zip: :String,
        returned_contact_country: :CountryReference,
        rma_disposition: :RmaDispositionReference,
        returned_site: :SiteReference,
        purchased_company: :CompanyReference,
        purchased_contact: :ContactReference,
        purchased_contact_type: :String,
        purchased_contact_phone: :String,
        purchased_contact_extension: :String,
        purchased_contact_email: :String,
        purchased_contact_address_line1: :String,
        purchased_contact_address_line2: :String,
        purchased_contact_city: :String,
        purchased_contact_state: :String,
        purchased_contact_zip: :String,
        purchased_contact_country: :CountryReference,
        purchased_invoice_number: :String,
        purchased_invoice_date: :Date,
        purchased_order_number: :String,
        purchased_vendor_action: :RmaActionReference,
        purchased_vendor_rma_number: :String,
        purchased_site: :SiteReference,
        purchased_notes: :String,
        warranty_company: :CompanyReference,
        warranty_contact: :ContactReference,
        warranty_contact_type: :String,
        warranty_contact_phone: :String,
        warranty_contact_email: :String,
        warranty_contact_extension: :String,
        warranty_contact_address_line1: :String,
        warranty_contact_address_line2: :String,
        warranty_contact_city: :String,
        warranty_contact_state: :String,
        warranty_contact_zip: :String,
        warranty_contact_country: :CountryReference,
        warranty_site: :SiteReference,
        warranty_notes: :String,
        repair_company: :CompanyReference,
        repair_contact: :ContactReference,
        repair_contact_type: :String,
        repair_contact_phone: :String,
        repair_contact_extension: :String,
        repair_contact_email: :String,
        repair_contact_address_line1: :String,
        repair_contact_address_line2: :String,
        repair_contact_city: :String,
        repair_contact_state: :String,
        repair_contact_zip: :String,
        repair_contact_country: :CountryReference,
        repair_order_number: :String,
        repair_site: :SiteReference,
        repair_notes: :String,
        drop_ship_flag: :Boolean,
        ship_method: :ShipmentMethodReference,
        shipping_date: :Date,
        shipping_tracking_number: :String,
        internal_notes: :String,
        closing_notes: :String,
        date_closed: :String,
        account_manager: :MemberReference,
        technical_contact: :MemberReference,
        currency: :CurrencyReference,
        closed_by: :MemberReference,
        _info: :'Hash<String, String>',
        custom_fields: :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                unit_price
                drop_ship_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::RmaTag` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::RmaTag`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.product_description = attributes[:product_description] if attributes.key?(:product_description)

      self.id = attributes[:id] if attributes.key?(:id)

      self.service_ticket = attributes[:service_ticket] if attributes.key?(:service_ticket)

      self.sales_order = attributes[:sales_order] if attributes.key?(:sales_order)

      self.invoice = attributes[:invoice] if attributes.key?(:invoice)

      self.project = attributes[:project] if attributes.key?(:project)

      self.summary = attributes[:summary] if attributes.key?(:summary)

      self.product = attributes[:product] if attributes.key?(:product)

      self.iv_description = attributes[:iv_description] if attributes.key?(:iv_description)

      self.serial_number = attributes[:serial_number] if attributes.key?(:serial_number)

      self.mfg_item_id = attributes[:mfg_item_id] if attributes.key?(:mfg_item_id)

      self.status = attributes[:status] if attributes.key?(:status)

      self.list_price = attributes[:list_price] if attributes.key?(:list_price)

      self.unit_price = attributes[:unit_price] if attributes.key?(:unit_price)

      self.location = attributes[:location] if attributes.key?(:location)

      self.department = attributes[:department] if attributes.key?(:department)

      self.problem_description = attributes[:problem_description] if attributes.key?(:problem_description)

      self.returned_company = attributes[:returned_company] if attributes.key?(:returned_company)

      self.returned_contact = attributes[:returned_contact] if attributes.key?(:returned_contact)

      self.returned_contact_type = attributes[:returned_contact_type] if attributes.key?(:returned_contact_type)

      self.returned_contact_phone = attributes[:returned_contact_phone] if attributes.key?(:returned_contact_phone)

      self.returned_contact_extension = attributes[:returned_contact_extension] if attributes.key?(:returned_contact_extension)

      self.returned_contact_email = attributes[:returned_contact_email] if attributes.key?(:returned_contact_email)

      self.returned_contact_address_line1 = attributes[:returned_contact_address_line1] if attributes.key?(:returned_contact_address_line1)

      self.returned_contact_address_line2 = attributes[:returned_contact_address_line2] if attributes.key?(:returned_contact_address_line2)

      self.returned_contact_city = attributes[:returned_contact_city] if attributes.key?(:returned_contact_city)

      self.returned_contact_state = attributes[:returned_contact_state] if attributes.key?(:returned_contact_state)

      self.returned_contact_zip = attributes[:returned_contact_zip] if attributes.key?(:returned_contact_zip)

      self.returned_contact_country = attributes[:returned_contact_country] if attributes.key?(:returned_contact_country)

      self.rma_disposition = attributes[:rma_disposition] if attributes.key?(:rma_disposition)

      self.returned_site = attributes[:returned_site] if attributes.key?(:returned_site)

      self.purchased_company = attributes[:purchased_company] if attributes.key?(:purchased_company)

      self.purchased_contact = attributes[:purchased_contact] if attributes.key?(:purchased_contact)

      self.purchased_contact_type = attributes[:purchased_contact_type] if attributes.key?(:purchased_contact_type)

      self.purchased_contact_phone = attributes[:purchased_contact_phone] if attributes.key?(:purchased_contact_phone)

      self.purchased_contact_extension = attributes[:purchased_contact_extension] if attributes.key?(:purchased_contact_extension)

      self.purchased_contact_email = attributes[:purchased_contact_email] if attributes.key?(:purchased_contact_email)

      self.purchased_contact_address_line1 = attributes[:purchased_contact_address_line1] if attributes.key?(:purchased_contact_address_line1)

      self.purchased_contact_address_line2 = attributes[:purchased_contact_address_line2] if attributes.key?(:purchased_contact_address_line2)

      self.purchased_contact_city = attributes[:purchased_contact_city] if attributes.key?(:purchased_contact_city)

      self.purchased_contact_state = attributes[:purchased_contact_state] if attributes.key?(:purchased_contact_state)

      self.purchased_contact_zip = attributes[:purchased_contact_zip] if attributes.key?(:purchased_contact_zip)

      self.purchased_contact_country = attributes[:purchased_contact_country] if attributes.key?(:purchased_contact_country)

      self.purchased_invoice_number = attributes[:purchased_invoice_number] if attributes.key?(:purchased_invoice_number)

      self.purchased_invoice_date = attributes[:purchased_invoice_date] if attributes.key?(:purchased_invoice_date)

      self.purchased_order_number = attributes[:purchased_order_number] if attributes.key?(:purchased_order_number)

      self.purchased_vendor_action = attributes[:purchased_vendor_action] if attributes.key?(:purchased_vendor_action)

      self.purchased_vendor_rma_number = attributes[:purchased_vendor_rma_number] if attributes.key?(:purchased_vendor_rma_number)

      self.purchased_site = attributes[:purchased_site] if attributes.key?(:purchased_site)

      self.purchased_notes = attributes[:purchased_notes] if attributes.key?(:purchased_notes)

      self.warranty_company = attributes[:warranty_company] if attributes.key?(:warranty_company)

      self.warranty_contact = attributes[:warranty_contact] if attributes.key?(:warranty_contact)

      self.warranty_contact_type = attributes[:warranty_contact_type] if attributes.key?(:warranty_contact_type)

      self.warranty_contact_phone = attributes[:warranty_contact_phone] if attributes.key?(:warranty_contact_phone)

      self.warranty_contact_email = attributes[:warranty_contact_email] if attributes.key?(:warranty_contact_email)

      self.warranty_contact_extension = attributes[:warranty_contact_extension] if attributes.key?(:warranty_contact_extension)

      self.warranty_contact_address_line1 = attributes[:warranty_contact_address_line1] if attributes.key?(:warranty_contact_address_line1)

      self.warranty_contact_address_line2 = attributes[:warranty_contact_address_line2] if attributes.key?(:warranty_contact_address_line2)

      self.warranty_contact_city = attributes[:warranty_contact_city] if attributes.key?(:warranty_contact_city)

      self.warranty_contact_state = attributes[:warranty_contact_state] if attributes.key?(:warranty_contact_state)

      self.warranty_contact_zip = attributes[:warranty_contact_zip] if attributes.key?(:warranty_contact_zip)

      self.warranty_contact_country = attributes[:warranty_contact_country] if attributes.key?(:warranty_contact_country)

      self.warranty_site = attributes[:warranty_site] if attributes.key?(:warranty_site)

      self.warranty_notes = attributes[:warranty_notes] if attributes.key?(:warranty_notes)

      self.repair_company = attributes[:repair_company] if attributes.key?(:repair_company)

      self.repair_contact = attributes[:repair_contact] if attributes.key?(:repair_contact)

      self.repair_contact_type = attributes[:repair_contact_type] if attributes.key?(:repair_contact_type)

      self.repair_contact_phone = attributes[:repair_contact_phone] if attributes.key?(:repair_contact_phone)

      self.repair_contact_extension = attributes[:repair_contact_extension] if attributes.key?(:repair_contact_extension)

      self.repair_contact_email = attributes[:repair_contact_email] if attributes.key?(:repair_contact_email)

      self.repair_contact_address_line1 = attributes[:repair_contact_address_line1] if attributes.key?(:repair_contact_address_line1)

      self.repair_contact_address_line2 = attributes[:repair_contact_address_line2] if attributes.key?(:repair_contact_address_line2)

      self.repair_contact_city = attributes[:repair_contact_city] if attributes.key?(:repair_contact_city)

      self.repair_contact_state = attributes[:repair_contact_state] if attributes.key?(:repair_contact_state)

      self.repair_contact_zip = attributes[:repair_contact_zip] if attributes.key?(:repair_contact_zip)

      self.repair_contact_country = attributes[:repair_contact_country] if attributes.key?(:repair_contact_country)

      self.repair_order_number = attributes[:repair_order_number] if attributes.key?(:repair_order_number)

      self.repair_site = attributes[:repair_site] if attributes.key?(:repair_site)

      self.repair_notes = attributes[:repair_notes] if attributes.key?(:repair_notes)

      self.drop_ship_flag = attributes[:drop_ship_flag] if attributes.key?(:drop_ship_flag)

      self.ship_method = attributes[:ship_method] if attributes.key?(:ship_method)

      self.shipping_date = attributes[:shipping_date] if attributes.key?(:shipping_date)

      self.shipping_tracking_number = attributes[:shipping_tracking_number] if attributes.key?(:shipping_tracking_number)

      self.internal_notes = attributes[:internal_notes] if attributes.key?(:internal_notes)

      self.closing_notes = attributes[:closing_notes] if attributes.key?(:closing_notes)

      self.date_closed = attributes[:date_closed] if attributes.key?(:date_closed)

      self.account_manager = attributes[:account_manager] if attributes.key?(:account_manager)

      self.technical_contact = attributes[:technical_contact] if attributes.key?(:technical_contact)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      self.closed_by = attributes[:closed_by] if attributes.key?(:closed_by)

      if attributes.key?(:_info) && (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end

      return unless attributes.key?(:custom_fields)
      return unless (value = attributes[:custom_fields]).is_a?(Array)

      self.custom_fields = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      invalid_properties.push('invalid value for "product_description", product_description cannot be nil.') if @product_description.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @product_description.nil?

      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        product_description == other.product_description &&
        id == other.id &&
        service_ticket == other.service_ticket &&
        sales_order == other.sales_order &&
        invoice == other.invoice &&
        project == other.project &&
        summary == other.summary &&
        product == other.product &&
        iv_description == other.iv_description &&
        serial_number == other.serial_number &&
        mfg_item_id == other.mfg_item_id &&
        status == other.status &&
        list_price == other.list_price &&
        unit_price == other.unit_price &&
        location == other.location &&
        department == other.department &&
        problem_description == other.problem_description &&
        returned_company == other.returned_company &&
        returned_contact == other.returned_contact &&
        returned_contact_type == other.returned_contact_type &&
        returned_contact_phone == other.returned_contact_phone &&
        returned_contact_extension == other.returned_contact_extension &&
        returned_contact_email == other.returned_contact_email &&
        returned_contact_address_line1 == other.returned_contact_address_line1 &&
        returned_contact_address_line2 == other.returned_contact_address_line2 &&
        returned_contact_city == other.returned_contact_city &&
        returned_contact_state == other.returned_contact_state &&
        returned_contact_zip == other.returned_contact_zip &&
        returned_contact_country == other.returned_contact_country &&
        rma_disposition == other.rma_disposition &&
        returned_site == other.returned_site &&
        purchased_company == other.purchased_company &&
        purchased_contact == other.purchased_contact &&
        purchased_contact_type == other.purchased_contact_type &&
        purchased_contact_phone == other.purchased_contact_phone &&
        purchased_contact_extension == other.purchased_contact_extension &&
        purchased_contact_email == other.purchased_contact_email &&
        purchased_contact_address_line1 == other.purchased_contact_address_line1 &&
        purchased_contact_address_line2 == other.purchased_contact_address_line2 &&
        purchased_contact_city == other.purchased_contact_city &&
        purchased_contact_state == other.purchased_contact_state &&
        purchased_contact_zip == other.purchased_contact_zip &&
        purchased_contact_country == other.purchased_contact_country &&
        purchased_invoice_number == other.purchased_invoice_number &&
        purchased_invoice_date == other.purchased_invoice_date &&
        purchased_order_number == other.purchased_order_number &&
        purchased_vendor_action == other.purchased_vendor_action &&
        purchased_vendor_rma_number == other.purchased_vendor_rma_number &&
        purchased_site == other.purchased_site &&
        purchased_notes == other.purchased_notes &&
        warranty_company == other.warranty_company &&
        warranty_contact == other.warranty_contact &&
        warranty_contact_type == other.warranty_contact_type &&
        warranty_contact_phone == other.warranty_contact_phone &&
        warranty_contact_email == other.warranty_contact_email &&
        warranty_contact_extension == other.warranty_contact_extension &&
        warranty_contact_address_line1 == other.warranty_contact_address_line1 &&
        warranty_contact_address_line2 == other.warranty_contact_address_line2 &&
        warranty_contact_city == other.warranty_contact_city &&
        warranty_contact_state == other.warranty_contact_state &&
        warranty_contact_zip == other.warranty_contact_zip &&
        warranty_contact_country == other.warranty_contact_country &&
        warranty_site == other.warranty_site &&
        warranty_notes == other.warranty_notes &&
        repair_company == other.repair_company &&
        repair_contact == other.repair_contact &&
        repair_contact_type == other.repair_contact_type &&
        repair_contact_phone == other.repair_contact_phone &&
        repair_contact_extension == other.repair_contact_extension &&
        repair_contact_email == other.repair_contact_email &&
        repair_contact_address_line1 == other.repair_contact_address_line1 &&
        repair_contact_address_line2 == other.repair_contact_address_line2 &&
        repair_contact_city == other.repair_contact_city &&
        repair_contact_state == other.repair_contact_state &&
        repair_contact_zip == other.repair_contact_zip &&
        repair_contact_country == other.repair_contact_country &&
        repair_order_number == other.repair_order_number &&
        repair_site == other.repair_site &&
        repair_notes == other.repair_notes &&
        drop_ship_flag == other.drop_ship_flag &&
        ship_method == other.ship_method &&
        shipping_date == other.shipping_date &&
        shipping_tracking_number == other.shipping_tracking_number &&
        internal_notes == other.internal_notes &&
        closing_notes == other.closing_notes &&
        date_closed == other.date_closed &&
        account_manager == other.account_manager &&
        technical_contact == other.technical_contact &&
        currency == other.currency &&
        closed_by == other.closed_by &&
        _info == other._info &&
        custom_fields == other.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [product_description, id, service_ticket, sales_order, invoice, project, summary, product, iv_description, serial_number, mfg_item_id, status, list_price, unit_price, location, department, problem_description, returned_company, returned_contact, returned_contact_type, returned_contact_phone, returned_contact_extension, returned_contact_email, returned_contact_address_line1, returned_contact_address_line2, returned_contact_city, returned_contact_state, returned_contact_zip, returned_contact_country, rma_disposition, returned_site, purchased_company, purchased_contact, purchased_contact_type, purchased_contact_phone, purchased_contact_extension, purchased_contact_email, purchased_contact_address_line1, purchased_contact_address_line2, purchased_contact_city, purchased_contact_state, purchased_contact_zip, purchased_contact_country, purchased_invoice_number, purchased_invoice_date, purchased_order_number, purchased_vendor_action, purchased_vendor_rma_number, purchased_site, purchased_notes, warranty_company, warranty_contact, warranty_contact_type, warranty_contact_phone, warranty_contact_email, warranty_contact_extension, warranty_contact_address_line1, warranty_contact_address_line2, warranty_contact_city, warranty_contact_state, warranty_contact_zip, warranty_contact_country, warranty_site, warranty_notes, repair_company, repair_contact, repair_contact_type, repair_contact_phone, repair_contact_extension, repair_contact_email, repair_contact_address_line1, repair_contact_address_line2, repair_contact_city, repair_contact_state, repair_contact_zip, repair_contact_country, repair_order_number, repair_site, repair_notes, drop_ship_flag, ship_method, shipping_date, shipping_tracking_number, internal_notes, closing_notes, date_closed, account_manager, technical_contact, currency, closed_by, _info, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
