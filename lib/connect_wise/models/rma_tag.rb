=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class RmaTag
    #  Max length: 200;
    attr_accessor :product_description

    attr_accessor :id

    attr_accessor :service_ticket

    attr_accessor :sales_order

    attr_accessor :invoice

    attr_accessor :project

    #  Max length: 150;
    attr_accessor :summary

    attr_accessor :product

    attr_accessor :iv_description

    attr_accessor :serial_number

    #  Max length: 100;
    attr_accessor :mfg_item_id

    attr_accessor :status

    attr_accessor :list_price

    attr_accessor :unit_price

    attr_accessor :location

    attr_accessor :department

    #  Max length: 1000;
    attr_accessor :problem_description

    attr_accessor :returned_company

    attr_accessor :returned_contact

    attr_accessor :returned_contact_type

    attr_accessor :returned_contact_phone

    attr_accessor :returned_contact_extension

    attr_accessor :returned_contact_email

    #  Max length: 50;
    attr_accessor :returned_contact_address_line1

    #  Max length: 50;
    attr_accessor :returned_contact_address_line2

    #  Max length: 50;
    attr_accessor :returned_contact_city

    #  Max length: 50;
    attr_accessor :returned_contact_state

    #  Max length: 12;
    attr_accessor :returned_contact_zip

    attr_accessor :returned_contact_country

    attr_accessor :rma_disposition

    attr_accessor :returned_site

    attr_accessor :purchased_company

    attr_accessor :purchased_contact

    attr_accessor :purchased_contact_type

    attr_accessor :purchased_contact_phone

    attr_accessor :purchased_contact_extension

    attr_accessor :purchased_contact_email

    #  Max length: 50;
    attr_accessor :purchased_contact_address_line1

    #  Max length: 50;
    attr_accessor :purchased_contact_address_line2

    #  Max length: 50;
    attr_accessor :purchased_contact_city

    #  Max length: 50;
    attr_accessor :purchased_contact_state

    #  Max length: 12;
    attr_accessor :purchased_contact_zip

    attr_accessor :purchased_contact_country

    #  Max length: 50;
    attr_accessor :purchased_invoice_number

    attr_accessor :purchased_invoice_date

    #  Max length: 50;
    attr_accessor :purchased_order_number

    attr_accessor :purchased_vendor_action

    #  Max length: 50;
    attr_accessor :purchased_vendor_rma_number

    attr_accessor :purchased_site

    #  Max length: 1000;
    attr_accessor :purchased_notes

    attr_accessor :warranty_company

    attr_accessor :warranty_contact

    attr_accessor :warranty_contact_type

    attr_accessor :warranty_contact_phone

    attr_accessor :warranty_contact_email

    attr_accessor :warranty_contact_extension

    #  Max length: 50;
    attr_accessor :warranty_contact_address_line1

    #  Max length: 50;
    attr_accessor :warranty_contact_address_line2

    #  Max length: 50;
    attr_accessor :warranty_contact_city

    #  Max length: 50;
    attr_accessor :warranty_contact_state

    #  Max length: 12;
    attr_accessor :warranty_contact_zip

    attr_accessor :warranty_contact_country

    attr_accessor :warranty_site

    #  Max length: 1000;
    attr_accessor :warranty_notes

    attr_accessor :repair_company

    attr_accessor :repair_contact

    attr_accessor :repair_contact_type

    attr_accessor :repair_contact_phone

    attr_accessor :repair_contact_extension

    attr_accessor :repair_contact_email

    #  Max length: 50;
    attr_accessor :repair_contact_address_line1

    #  Max length: 50;
    attr_accessor :repair_contact_address_line2

    #  Max length: 50;
    attr_accessor :repair_contact_city

    #  Max length: 50;
    attr_accessor :repair_contact_state

    #  Max length: 12;
    attr_accessor :repair_contact_zip

    attr_accessor :repair_contact_country

    #  Max length: 50;
    attr_accessor :repair_order_number

    attr_accessor :repair_site

    #  Max length: 1000;
    attr_accessor :repair_notes

    attr_accessor :drop_ship_flag

    attr_accessor :ship_method

    attr_accessor :shipping_date

    #  Max length: 50;
    attr_accessor :shipping_tracking_number

    #  Max length: 1000;
    attr_accessor :internal_notes

    #  Max length: 1000;
    attr_accessor :closing_notes

    attr_accessor :date_closed

    attr_accessor :account_manager

    attr_accessor :technical_contact

    attr_accessor :currency

    attr_accessor :closed_by

    attr_accessor :_info

    attr_accessor :custom_fields

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'product_description' => :'productDescription',
        :'id' => :'id',
        :'service_ticket' => :'serviceTicket',
        :'sales_order' => :'salesOrder',
        :'invoice' => :'invoice',
        :'project' => :'project',
        :'summary' => :'summary',
        :'product' => :'product',
        :'iv_description' => :'ivDescription',
        :'serial_number' => :'serialNumber',
        :'mfg_item_id' => :'mfgItemID',
        :'status' => :'status',
        :'list_price' => :'listPrice',
        :'unit_price' => :'unitPrice',
        :'location' => :'location',
        :'department' => :'department',
        :'problem_description' => :'problemDescription',
        :'returned_company' => :'returnedCompany',
        :'returned_contact' => :'returnedContact',
        :'returned_contact_type' => :'returnedContactType',
        :'returned_contact_phone' => :'returnedContactPhone',
        :'returned_contact_extension' => :'returnedContactExtension',
        :'returned_contact_email' => :'returnedContactEmail',
        :'returned_contact_address_line1' => :'returnedContactAddressLine1',
        :'returned_contact_address_line2' => :'returnedContactAddressLine2',
        :'returned_contact_city' => :'returnedContactCity',
        :'returned_contact_state' => :'returnedContactState',
        :'returned_contact_zip' => :'returnedContactZip',
        :'returned_contact_country' => :'returnedContactCountry',
        :'rma_disposition' => :'rmaDisposition',
        :'returned_site' => :'returnedSite',
        :'purchased_company' => :'purchasedCompany',
        :'purchased_contact' => :'purchasedContact',
        :'purchased_contact_type' => :'purchasedContactType',
        :'purchased_contact_phone' => :'purchasedContactPhone',
        :'purchased_contact_extension' => :'purchasedContactExtension',
        :'purchased_contact_email' => :'purchasedContactEmail',
        :'purchased_contact_address_line1' => :'purchasedContactAddressLine1',
        :'purchased_contact_address_line2' => :'purchasedContactAddressLine2',
        :'purchased_contact_city' => :'purchasedContactCity',
        :'purchased_contact_state' => :'purchasedContactState',
        :'purchased_contact_zip' => :'purchasedContactZip',
        :'purchased_contact_country' => :'purchasedContactCountry',
        :'purchased_invoice_number' => :'purchasedInvoiceNumber',
        :'purchased_invoice_date' => :'purchasedInvoiceDate',
        :'purchased_order_number' => :'purchasedOrderNumber',
        :'purchased_vendor_action' => :'purchasedVendorAction',
        :'purchased_vendor_rma_number' => :'purchasedVendorRmaNumber',
        :'purchased_site' => :'purchasedSite',
        :'purchased_notes' => :'purchasedNotes',
        :'warranty_company' => :'warrantyCompany',
        :'warranty_contact' => :'warrantyContact',
        :'warranty_contact_type' => :'warrantyContactType',
        :'warranty_contact_phone' => :'warrantyContactPhone',
        :'warranty_contact_email' => :'warrantyContactEmail',
        :'warranty_contact_extension' => :'warrantyContactExtension',
        :'warranty_contact_address_line1' => :'warrantyContactAddressLine1',
        :'warranty_contact_address_line2' => :'warrantyContactAddressLine2',
        :'warranty_contact_city' => :'warrantyContactCity',
        :'warranty_contact_state' => :'warrantyContactState',
        :'warranty_contact_zip' => :'warrantyContactZip',
        :'warranty_contact_country' => :'warrantyContactCountry',
        :'warranty_site' => :'warrantySite',
        :'warranty_notes' => :'warrantyNotes',
        :'repair_company' => :'repairCompany',
        :'repair_contact' => :'repairContact',
        :'repair_contact_type' => :'repairContactType',
        :'repair_contact_phone' => :'repairContactPhone',
        :'repair_contact_extension' => :'repairContactExtension',
        :'repair_contact_email' => :'repairContactEmail',
        :'repair_contact_address_line1' => :'repairContactAddressLine1',
        :'repair_contact_address_line2' => :'repairContactAddressLine2',
        :'repair_contact_city' => :'repairContactCity',
        :'repair_contact_state' => :'repairContactState',
        :'repair_contact_zip' => :'repairContactZip',
        :'repair_contact_country' => :'repairContactCountry',
        :'repair_order_number' => :'repairOrderNumber',
        :'repair_site' => :'repairSite',
        :'repair_notes' => :'repairNotes',
        :'drop_ship_flag' => :'dropShipFlag',
        :'ship_method' => :'shipMethod',
        :'shipping_date' => :'shippingDate',
        :'shipping_tracking_number' => :'shippingTrackingNumber',
        :'internal_notes' => :'internalNotes',
        :'closing_notes' => :'closingNotes',
        :'date_closed' => :'dateClosed',
        :'account_manager' => :'accountManager',
        :'technical_contact' => :'technicalContact',
        :'currency' => :'currency',
        :'closed_by' => :'closedBy',
        :'_info' => :'_info',
        :'custom_fields' => :'customFields'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'product_description' => :'String',
        :'id' => :'Integer',
        :'service_ticket' => :'TicketReference',
        :'sales_order' => :'SalesOrderReference',
        :'invoice' => :'InvoiceReference',
        :'project' => :'ProjectReference',
        :'summary' => :'String',
        :'product' => :'IvItemReference',
        :'iv_description' => :'String',
        :'serial_number' => :'String',
        :'mfg_item_id' => :'String',
        :'status' => :'RmaStatusReference',
        :'list_price' => :'Float',
        :'unit_price' => :'Float',
        :'location' => :'SystemLocationReference',
        :'department' => :'SystemDepartmentReference',
        :'problem_description' => :'String',
        :'returned_company' => :'CompanyReference',
        :'returned_contact' => :'ContactReference',
        :'returned_contact_type' => :'String',
        :'returned_contact_phone' => :'String',
        :'returned_contact_extension' => :'String',
        :'returned_contact_email' => :'String',
        :'returned_contact_address_line1' => :'String',
        :'returned_contact_address_line2' => :'String',
        :'returned_contact_city' => :'String',
        :'returned_contact_state' => :'String',
        :'returned_contact_zip' => :'String',
        :'returned_contact_country' => :'CountryReference',
        :'rma_disposition' => :'RmaDispositionReference',
        :'returned_site' => :'SiteReference',
        :'purchased_company' => :'CompanyReference',
        :'purchased_contact' => :'ContactReference',
        :'purchased_contact_type' => :'String',
        :'purchased_contact_phone' => :'String',
        :'purchased_contact_extension' => :'String',
        :'purchased_contact_email' => :'String',
        :'purchased_contact_address_line1' => :'String',
        :'purchased_contact_address_line2' => :'String',
        :'purchased_contact_city' => :'String',
        :'purchased_contact_state' => :'String',
        :'purchased_contact_zip' => :'String',
        :'purchased_contact_country' => :'CountryReference',
        :'purchased_invoice_number' => :'String',
        :'purchased_invoice_date' => :'Date',
        :'purchased_order_number' => :'String',
        :'purchased_vendor_action' => :'RmaActionReference',
        :'purchased_vendor_rma_number' => :'String',
        :'purchased_site' => :'SiteReference',
        :'purchased_notes' => :'String',
        :'warranty_company' => :'CompanyReference',
        :'warranty_contact' => :'ContactReference',
        :'warranty_contact_type' => :'String',
        :'warranty_contact_phone' => :'String',
        :'warranty_contact_email' => :'String',
        :'warranty_contact_extension' => :'String',
        :'warranty_contact_address_line1' => :'String',
        :'warranty_contact_address_line2' => :'String',
        :'warranty_contact_city' => :'String',
        :'warranty_contact_state' => :'String',
        :'warranty_contact_zip' => :'String',
        :'warranty_contact_country' => :'CountryReference',
        :'warranty_site' => :'SiteReference',
        :'warranty_notes' => :'String',
        :'repair_company' => :'CompanyReference',
        :'repair_contact' => :'ContactReference',
        :'repair_contact_type' => :'String',
        :'repair_contact_phone' => :'String',
        :'repair_contact_extension' => :'String',
        :'repair_contact_email' => :'String',
        :'repair_contact_address_line1' => :'String',
        :'repair_contact_address_line2' => :'String',
        :'repair_contact_city' => :'String',
        :'repair_contact_state' => :'String',
        :'repair_contact_zip' => :'String',
        :'repair_contact_country' => :'CountryReference',
        :'repair_order_number' => :'String',
        :'repair_site' => :'SiteReference',
        :'repair_notes' => :'String',
        :'drop_ship_flag' => :'Boolean',
        :'ship_method' => :'ShipmentMethodReference',
        :'shipping_date' => :'Date',
        :'shipping_tracking_number' => :'String',
        :'internal_notes' => :'String',
        :'closing_notes' => :'String',
        :'date_closed' => :'String',
        :'account_manager' => :'MemberReference',
        :'technical_contact' => :'MemberReference',
        :'currency' => :'CurrencyReference',
        :'closed_by' => :'MemberReference',
        :'_info' => :'Hash<String, String>',
        :'custom_fields' => :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'unit_price',
        :'drop_ship_flag',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::RmaTag` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::RmaTag`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'product_description')
        self.product_description = attributes[:'product_description']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'service_ticket')
        self.service_ticket = attributes[:'service_ticket']
      end

      if attributes.key?(:'sales_order')
        self.sales_order = attributes[:'sales_order']
      end

      if attributes.key?(:'invoice')
        self.invoice = attributes[:'invoice']
      end

      if attributes.key?(:'project')
        self.project = attributes[:'project']
      end

      if attributes.key?(:'summary')
        self.summary = attributes[:'summary']
      end

      if attributes.key?(:'product')
        self.product = attributes[:'product']
      end

      if attributes.key?(:'iv_description')
        self.iv_description = attributes[:'iv_description']
      end

      if attributes.key?(:'serial_number')
        self.serial_number = attributes[:'serial_number']
      end

      if attributes.key?(:'mfg_item_id')
        self.mfg_item_id = attributes[:'mfg_item_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'list_price')
        self.list_price = attributes[:'list_price']
      end

      if attributes.key?(:'unit_price')
        self.unit_price = attributes[:'unit_price']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'department')
        self.department = attributes[:'department']
      end

      if attributes.key?(:'problem_description')
        self.problem_description = attributes[:'problem_description']
      end

      if attributes.key?(:'returned_company')
        self.returned_company = attributes[:'returned_company']
      end

      if attributes.key?(:'returned_contact')
        self.returned_contact = attributes[:'returned_contact']
      end

      if attributes.key?(:'returned_contact_type')
        self.returned_contact_type = attributes[:'returned_contact_type']
      end

      if attributes.key?(:'returned_contact_phone')
        self.returned_contact_phone = attributes[:'returned_contact_phone']
      end

      if attributes.key?(:'returned_contact_extension')
        self.returned_contact_extension = attributes[:'returned_contact_extension']
      end

      if attributes.key?(:'returned_contact_email')
        self.returned_contact_email = attributes[:'returned_contact_email']
      end

      if attributes.key?(:'returned_contact_address_line1')
        self.returned_contact_address_line1 = attributes[:'returned_contact_address_line1']
      end

      if attributes.key?(:'returned_contact_address_line2')
        self.returned_contact_address_line2 = attributes[:'returned_contact_address_line2']
      end

      if attributes.key?(:'returned_contact_city')
        self.returned_contact_city = attributes[:'returned_contact_city']
      end

      if attributes.key?(:'returned_contact_state')
        self.returned_contact_state = attributes[:'returned_contact_state']
      end

      if attributes.key?(:'returned_contact_zip')
        self.returned_contact_zip = attributes[:'returned_contact_zip']
      end

      if attributes.key?(:'returned_contact_country')
        self.returned_contact_country = attributes[:'returned_contact_country']
      end

      if attributes.key?(:'rma_disposition')
        self.rma_disposition = attributes[:'rma_disposition']
      end

      if attributes.key?(:'returned_site')
        self.returned_site = attributes[:'returned_site']
      end

      if attributes.key?(:'purchased_company')
        self.purchased_company = attributes[:'purchased_company']
      end

      if attributes.key?(:'purchased_contact')
        self.purchased_contact = attributes[:'purchased_contact']
      end

      if attributes.key?(:'purchased_contact_type')
        self.purchased_contact_type = attributes[:'purchased_contact_type']
      end

      if attributes.key?(:'purchased_contact_phone')
        self.purchased_contact_phone = attributes[:'purchased_contact_phone']
      end

      if attributes.key?(:'purchased_contact_extension')
        self.purchased_contact_extension = attributes[:'purchased_contact_extension']
      end

      if attributes.key?(:'purchased_contact_email')
        self.purchased_contact_email = attributes[:'purchased_contact_email']
      end

      if attributes.key?(:'purchased_contact_address_line1')
        self.purchased_contact_address_line1 = attributes[:'purchased_contact_address_line1']
      end

      if attributes.key?(:'purchased_contact_address_line2')
        self.purchased_contact_address_line2 = attributes[:'purchased_contact_address_line2']
      end

      if attributes.key?(:'purchased_contact_city')
        self.purchased_contact_city = attributes[:'purchased_contact_city']
      end

      if attributes.key?(:'purchased_contact_state')
        self.purchased_contact_state = attributes[:'purchased_contact_state']
      end

      if attributes.key?(:'purchased_contact_zip')
        self.purchased_contact_zip = attributes[:'purchased_contact_zip']
      end

      if attributes.key?(:'purchased_contact_country')
        self.purchased_contact_country = attributes[:'purchased_contact_country']
      end

      if attributes.key?(:'purchased_invoice_number')
        self.purchased_invoice_number = attributes[:'purchased_invoice_number']
      end

      if attributes.key?(:'purchased_invoice_date')
        self.purchased_invoice_date = attributes[:'purchased_invoice_date']
      end

      if attributes.key?(:'purchased_order_number')
        self.purchased_order_number = attributes[:'purchased_order_number']
      end

      if attributes.key?(:'purchased_vendor_action')
        self.purchased_vendor_action = attributes[:'purchased_vendor_action']
      end

      if attributes.key?(:'purchased_vendor_rma_number')
        self.purchased_vendor_rma_number = attributes[:'purchased_vendor_rma_number']
      end

      if attributes.key?(:'purchased_site')
        self.purchased_site = attributes[:'purchased_site']
      end

      if attributes.key?(:'purchased_notes')
        self.purchased_notes = attributes[:'purchased_notes']
      end

      if attributes.key?(:'warranty_company')
        self.warranty_company = attributes[:'warranty_company']
      end

      if attributes.key?(:'warranty_contact')
        self.warranty_contact = attributes[:'warranty_contact']
      end

      if attributes.key?(:'warranty_contact_type')
        self.warranty_contact_type = attributes[:'warranty_contact_type']
      end

      if attributes.key?(:'warranty_contact_phone')
        self.warranty_contact_phone = attributes[:'warranty_contact_phone']
      end

      if attributes.key?(:'warranty_contact_email')
        self.warranty_contact_email = attributes[:'warranty_contact_email']
      end

      if attributes.key?(:'warranty_contact_extension')
        self.warranty_contact_extension = attributes[:'warranty_contact_extension']
      end

      if attributes.key?(:'warranty_contact_address_line1')
        self.warranty_contact_address_line1 = attributes[:'warranty_contact_address_line1']
      end

      if attributes.key?(:'warranty_contact_address_line2')
        self.warranty_contact_address_line2 = attributes[:'warranty_contact_address_line2']
      end

      if attributes.key?(:'warranty_contact_city')
        self.warranty_contact_city = attributes[:'warranty_contact_city']
      end

      if attributes.key?(:'warranty_contact_state')
        self.warranty_contact_state = attributes[:'warranty_contact_state']
      end

      if attributes.key?(:'warranty_contact_zip')
        self.warranty_contact_zip = attributes[:'warranty_contact_zip']
      end

      if attributes.key?(:'warranty_contact_country')
        self.warranty_contact_country = attributes[:'warranty_contact_country']
      end

      if attributes.key?(:'warranty_site')
        self.warranty_site = attributes[:'warranty_site']
      end

      if attributes.key?(:'warranty_notes')
        self.warranty_notes = attributes[:'warranty_notes']
      end

      if attributes.key?(:'repair_company')
        self.repair_company = attributes[:'repair_company']
      end

      if attributes.key?(:'repair_contact')
        self.repair_contact = attributes[:'repair_contact']
      end

      if attributes.key?(:'repair_contact_type')
        self.repair_contact_type = attributes[:'repair_contact_type']
      end

      if attributes.key?(:'repair_contact_phone')
        self.repair_contact_phone = attributes[:'repair_contact_phone']
      end

      if attributes.key?(:'repair_contact_extension')
        self.repair_contact_extension = attributes[:'repair_contact_extension']
      end

      if attributes.key?(:'repair_contact_email')
        self.repair_contact_email = attributes[:'repair_contact_email']
      end

      if attributes.key?(:'repair_contact_address_line1')
        self.repair_contact_address_line1 = attributes[:'repair_contact_address_line1']
      end

      if attributes.key?(:'repair_contact_address_line2')
        self.repair_contact_address_line2 = attributes[:'repair_contact_address_line2']
      end

      if attributes.key?(:'repair_contact_city')
        self.repair_contact_city = attributes[:'repair_contact_city']
      end

      if attributes.key?(:'repair_contact_state')
        self.repair_contact_state = attributes[:'repair_contact_state']
      end

      if attributes.key?(:'repair_contact_zip')
        self.repair_contact_zip = attributes[:'repair_contact_zip']
      end

      if attributes.key?(:'repair_contact_country')
        self.repair_contact_country = attributes[:'repair_contact_country']
      end

      if attributes.key?(:'repair_order_number')
        self.repair_order_number = attributes[:'repair_order_number']
      end

      if attributes.key?(:'repair_site')
        self.repair_site = attributes[:'repair_site']
      end

      if attributes.key?(:'repair_notes')
        self.repair_notes = attributes[:'repair_notes']
      end

      if attributes.key?(:'drop_ship_flag')
        self.drop_ship_flag = attributes[:'drop_ship_flag']
      end

      if attributes.key?(:'ship_method')
        self.ship_method = attributes[:'ship_method']
      end

      if attributes.key?(:'shipping_date')
        self.shipping_date = attributes[:'shipping_date']
      end

      if attributes.key?(:'shipping_tracking_number')
        self.shipping_tracking_number = attributes[:'shipping_tracking_number']
      end

      if attributes.key?(:'internal_notes')
        self.internal_notes = attributes[:'internal_notes']
      end

      if attributes.key?(:'closing_notes')
        self.closing_notes = attributes[:'closing_notes']
      end

      if attributes.key?(:'date_closed')
        self.date_closed = attributes[:'date_closed']
      end

      if attributes.key?(:'account_manager')
        self.account_manager = attributes[:'account_manager']
      end

      if attributes.key?(:'technical_contact')
        self.technical_contact = attributes[:'technical_contact']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'closed_by')
        self.closed_by = attributes[:'closed_by']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @product_description.nil?
        invalid_properties.push('invalid value for "product_description", product_description cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @product_description.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          product_description == o.product_description &&
          id == o.id &&
          service_ticket == o.service_ticket &&
          sales_order == o.sales_order &&
          invoice == o.invoice &&
          project == o.project &&
          summary == o.summary &&
          product == o.product &&
          iv_description == o.iv_description &&
          serial_number == o.serial_number &&
          mfg_item_id == o.mfg_item_id &&
          status == o.status &&
          list_price == o.list_price &&
          unit_price == o.unit_price &&
          location == o.location &&
          department == o.department &&
          problem_description == o.problem_description &&
          returned_company == o.returned_company &&
          returned_contact == o.returned_contact &&
          returned_contact_type == o.returned_contact_type &&
          returned_contact_phone == o.returned_contact_phone &&
          returned_contact_extension == o.returned_contact_extension &&
          returned_contact_email == o.returned_contact_email &&
          returned_contact_address_line1 == o.returned_contact_address_line1 &&
          returned_contact_address_line2 == o.returned_contact_address_line2 &&
          returned_contact_city == o.returned_contact_city &&
          returned_contact_state == o.returned_contact_state &&
          returned_contact_zip == o.returned_contact_zip &&
          returned_contact_country == o.returned_contact_country &&
          rma_disposition == o.rma_disposition &&
          returned_site == o.returned_site &&
          purchased_company == o.purchased_company &&
          purchased_contact == o.purchased_contact &&
          purchased_contact_type == o.purchased_contact_type &&
          purchased_contact_phone == o.purchased_contact_phone &&
          purchased_contact_extension == o.purchased_contact_extension &&
          purchased_contact_email == o.purchased_contact_email &&
          purchased_contact_address_line1 == o.purchased_contact_address_line1 &&
          purchased_contact_address_line2 == o.purchased_contact_address_line2 &&
          purchased_contact_city == o.purchased_contact_city &&
          purchased_contact_state == o.purchased_contact_state &&
          purchased_contact_zip == o.purchased_contact_zip &&
          purchased_contact_country == o.purchased_contact_country &&
          purchased_invoice_number == o.purchased_invoice_number &&
          purchased_invoice_date == o.purchased_invoice_date &&
          purchased_order_number == o.purchased_order_number &&
          purchased_vendor_action == o.purchased_vendor_action &&
          purchased_vendor_rma_number == o.purchased_vendor_rma_number &&
          purchased_site == o.purchased_site &&
          purchased_notes == o.purchased_notes &&
          warranty_company == o.warranty_company &&
          warranty_contact == o.warranty_contact &&
          warranty_contact_type == o.warranty_contact_type &&
          warranty_contact_phone == o.warranty_contact_phone &&
          warranty_contact_email == o.warranty_contact_email &&
          warranty_contact_extension == o.warranty_contact_extension &&
          warranty_contact_address_line1 == o.warranty_contact_address_line1 &&
          warranty_contact_address_line2 == o.warranty_contact_address_line2 &&
          warranty_contact_city == o.warranty_contact_city &&
          warranty_contact_state == o.warranty_contact_state &&
          warranty_contact_zip == o.warranty_contact_zip &&
          warranty_contact_country == o.warranty_contact_country &&
          warranty_site == o.warranty_site &&
          warranty_notes == o.warranty_notes &&
          repair_company == o.repair_company &&
          repair_contact == o.repair_contact &&
          repair_contact_type == o.repair_contact_type &&
          repair_contact_phone == o.repair_contact_phone &&
          repair_contact_extension == o.repair_contact_extension &&
          repair_contact_email == o.repair_contact_email &&
          repair_contact_address_line1 == o.repair_contact_address_line1 &&
          repair_contact_address_line2 == o.repair_contact_address_line2 &&
          repair_contact_city == o.repair_contact_city &&
          repair_contact_state == o.repair_contact_state &&
          repair_contact_zip == o.repair_contact_zip &&
          repair_contact_country == o.repair_contact_country &&
          repair_order_number == o.repair_order_number &&
          repair_site == o.repair_site &&
          repair_notes == o.repair_notes &&
          drop_ship_flag == o.drop_ship_flag &&
          ship_method == o.ship_method &&
          shipping_date == o.shipping_date &&
          shipping_tracking_number == o.shipping_tracking_number &&
          internal_notes == o.internal_notes &&
          closing_notes == o.closing_notes &&
          date_closed == o.date_closed &&
          account_manager == o.account_manager &&
          technical_contact == o.technical_contact &&
          currency == o.currency &&
          closed_by == o.closed_by &&
          _info == o._info &&
          custom_fields == o.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [product_description, id, service_ticket, sales_order, invoice, project, summary, product, iv_description, serial_number, mfg_item_id, status, list_price, unit_price, location, department, problem_description, returned_company, returned_contact, returned_contact_type, returned_contact_phone, returned_contact_extension, returned_contact_email, returned_contact_address_line1, returned_contact_address_line2, returned_contact_city, returned_contact_state, returned_contact_zip, returned_contact_country, rma_disposition, returned_site, purchased_company, purchased_contact, purchased_contact_type, purchased_contact_phone, purchased_contact_extension, purchased_contact_email, purchased_contact_address_line1, purchased_contact_address_line2, purchased_contact_city, purchased_contact_state, purchased_contact_zip, purchased_contact_country, purchased_invoice_number, purchased_invoice_date, purchased_order_number, purchased_vendor_action, purchased_vendor_rma_number, purchased_site, purchased_notes, warranty_company, warranty_contact, warranty_contact_type, warranty_contact_phone, warranty_contact_email, warranty_contact_extension, warranty_contact_address_line1, warranty_contact_address_line2, warranty_contact_city, warranty_contact_state, warranty_contact_zip, warranty_contact_country, warranty_site, warranty_notes, repair_company, repair_contact, repair_contact_type, repair_contact_phone, repair_contact_extension, repair_contact_email, repair_contact_address_line1, repair_contact_address_line2, repair_contact_city, repair_contact_state, repair_contact_zip, repair_contact_country, repair_order_number, repair_site, repair_notes, drop_ship_flag, ship_method, shipping_date, shipping_tracking_number, internal_notes, closing_notes, date_closed, account_manager, technical_contact, currency, closed_by, _info, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
