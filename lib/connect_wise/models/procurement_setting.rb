=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class ProcurementSetting
    attr_accessor :starting_purchase_order_num

    attr_accessor :costing_method

    attr_accessor :id

    #  Max length: 5;
    attr_accessor :purchase_order_prefix

    #  Max length: 5;
    attr_accessor :purchase_order_suffix

    attr_accessor :prefix_suffix_type

    attr_accessor :disable_cost_updates_flag

    attr_accessor :disable_negative_inventory_flag

    attr_accessor :auto_close_purchase_order_flag

    attr_accessor :auto_close_purchase_order_item_flag

    attr_accessor :auto_approve_purchase_order_flag

    attr_accessor :tax_purchase_order_flag

    attr_accessor :tax_freight_flag

    attr_accessor :use_vendor_tax_code_flag

    attr_accessor :num_decimal_places

    attr_accessor :disable_auto_pick_flag

    attr_accessor :default_product_taxable_flag

    #  Max length: 50;
    attr_accessor :eori_number

    attr_accessor :_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'starting_purchase_order_num' => :'startingPurchaseOrderNum',
        :'costing_method' => :'costingMethod',
        :'id' => :'id',
        :'purchase_order_prefix' => :'purchaseOrderPrefix',
        :'purchase_order_suffix' => :'purchaseOrderSuffix',
        :'prefix_suffix_type' => :'prefixSuffixType',
        :'disable_cost_updates_flag' => :'disableCostUpdatesFlag',
        :'disable_negative_inventory_flag' => :'disableNegativeInventoryFlag',
        :'auto_close_purchase_order_flag' => :'autoClosePurchaseOrderFlag',
        :'auto_close_purchase_order_item_flag' => :'autoClosePurchaseOrderItemFlag',
        :'auto_approve_purchase_order_flag' => :'autoApprovePurchaseOrderFlag',
        :'tax_purchase_order_flag' => :'taxPurchaseOrderFlag',
        :'tax_freight_flag' => :'taxFreightFlag',
        :'use_vendor_tax_code_flag' => :'useVendorTaxCodeFlag',
        :'num_decimal_places' => :'numDecimalPlaces',
        :'disable_auto_pick_flag' => :'disableAutoPickFlag',
        :'default_product_taxable_flag' => :'defaultProductTaxableFlag',
        :'eori_number' => :'eoriNumber',
        :'_info' => :'_info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'starting_purchase_order_num' => :'Integer',
        :'costing_method' => :'String',
        :'id' => :'Integer',
        :'purchase_order_prefix' => :'String',
        :'purchase_order_suffix' => :'String',
        :'prefix_suffix_type' => :'String',
        :'disable_cost_updates_flag' => :'Boolean',
        :'disable_negative_inventory_flag' => :'Boolean',
        :'auto_close_purchase_order_flag' => :'Boolean',
        :'auto_close_purchase_order_item_flag' => :'Boolean',
        :'auto_approve_purchase_order_flag' => :'Boolean',
        :'tax_purchase_order_flag' => :'Boolean',
        :'tax_freight_flag' => :'Boolean',
        :'use_vendor_tax_code_flag' => :'Boolean',
        :'num_decimal_places' => :'Integer',
        :'disable_auto_pick_flag' => :'Boolean',
        :'default_product_taxable_flag' => :'Boolean',
        :'eori_number' => :'String',
        :'_info' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'costing_method',
        :'prefix_suffix_type',
        :'disable_cost_updates_flag',
        :'disable_negative_inventory_flag',
        :'auto_close_purchase_order_flag',
        :'auto_close_purchase_order_item_flag',
        :'auto_approve_purchase_order_flag',
        :'tax_purchase_order_flag',
        :'tax_freight_flag',
        :'use_vendor_tax_code_flag',
        :'num_decimal_places',
        :'disable_auto_pick_flag',
        :'default_product_taxable_flag',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::ProcurementSetting` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::ProcurementSetting`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'starting_purchase_order_num')
        self.starting_purchase_order_num = attributes[:'starting_purchase_order_num']
      end

      if attributes.key?(:'costing_method')
        self.costing_method = attributes[:'costing_method']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'purchase_order_prefix')
        self.purchase_order_prefix = attributes[:'purchase_order_prefix']
      end

      if attributes.key?(:'purchase_order_suffix')
        self.purchase_order_suffix = attributes[:'purchase_order_suffix']
      end

      if attributes.key?(:'prefix_suffix_type')
        self.prefix_suffix_type = attributes[:'prefix_suffix_type']
      end

      if attributes.key?(:'disable_cost_updates_flag')
        self.disable_cost_updates_flag = attributes[:'disable_cost_updates_flag']
      end

      if attributes.key?(:'disable_negative_inventory_flag')
        self.disable_negative_inventory_flag = attributes[:'disable_negative_inventory_flag']
      end

      if attributes.key?(:'auto_close_purchase_order_flag')
        self.auto_close_purchase_order_flag = attributes[:'auto_close_purchase_order_flag']
      end

      if attributes.key?(:'auto_close_purchase_order_item_flag')
        self.auto_close_purchase_order_item_flag = attributes[:'auto_close_purchase_order_item_flag']
      end

      if attributes.key?(:'auto_approve_purchase_order_flag')
        self.auto_approve_purchase_order_flag = attributes[:'auto_approve_purchase_order_flag']
      end

      if attributes.key?(:'tax_purchase_order_flag')
        self.tax_purchase_order_flag = attributes[:'tax_purchase_order_flag']
      end

      if attributes.key?(:'tax_freight_flag')
        self.tax_freight_flag = attributes[:'tax_freight_flag']
      end

      if attributes.key?(:'use_vendor_tax_code_flag')
        self.use_vendor_tax_code_flag = attributes[:'use_vendor_tax_code_flag']
      end

      if attributes.key?(:'num_decimal_places')
        self.num_decimal_places = attributes[:'num_decimal_places']
      end

      if attributes.key?(:'disable_auto_pick_flag')
        self.disable_auto_pick_flag = attributes[:'disable_auto_pick_flag']
      end

      if attributes.key?(:'default_product_taxable_flag')
        self.default_product_taxable_flag = attributes[:'default_product_taxable_flag']
      end

      if attributes.key?(:'eori_number')
        self.eori_number = attributes[:'eori_number']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @starting_purchase_order_num.nil?
        invalid_properties.push('invalid value for "starting_purchase_order_num", starting_purchase_order_num cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @starting_purchase_order_num.nil?
      costing_method_validator = EnumAttributeValidator.new('String', ["FIFO", "LIFO", "AverageCosting"])
      return false unless costing_method_validator.valid?(@costing_method)
      prefix_suffix_type_validator = EnumAttributeValidator.new('String', ["Prefix", "Suffix"])
      return false unless prefix_suffix_type_validator.valid?(@prefix_suffix_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] costing_method Object to be assigned
    def costing_method=(costing_method)
      validator = EnumAttributeValidator.new('String', ["FIFO", "LIFO", "AverageCosting"])
      unless validator.valid?(costing_method)
        fail ArgumentError, "invalid value for \"costing_method\", must be one of #{validator.allowable_values}."
      end
      @costing_method = costing_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] prefix_suffix_type Object to be assigned
    def prefix_suffix_type=(prefix_suffix_type)
      validator = EnumAttributeValidator.new('String', ["Prefix", "Suffix"])
      unless validator.valid?(prefix_suffix_type)
        fail ArgumentError, "invalid value for \"prefix_suffix_type\", must be one of #{validator.allowable_values}."
      end
      @prefix_suffix_type = prefix_suffix_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          starting_purchase_order_num == o.starting_purchase_order_num &&
          costing_method == o.costing_method &&
          id == o.id &&
          purchase_order_prefix == o.purchase_order_prefix &&
          purchase_order_suffix == o.purchase_order_suffix &&
          prefix_suffix_type == o.prefix_suffix_type &&
          disable_cost_updates_flag == o.disable_cost_updates_flag &&
          disable_negative_inventory_flag == o.disable_negative_inventory_flag &&
          auto_close_purchase_order_flag == o.auto_close_purchase_order_flag &&
          auto_close_purchase_order_item_flag == o.auto_close_purchase_order_item_flag &&
          auto_approve_purchase_order_flag == o.auto_approve_purchase_order_flag &&
          tax_purchase_order_flag == o.tax_purchase_order_flag &&
          tax_freight_flag == o.tax_freight_flag &&
          use_vendor_tax_code_flag == o.use_vendor_tax_code_flag &&
          num_decimal_places == o.num_decimal_places &&
          disable_auto_pick_flag == o.disable_auto_pick_flag &&
          default_product_taxable_flag == o.default_product_taxable_flag &&
          eori_number == o.eori_number &&
          _info == o._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [starting_purchase_order_num, costing_method, id, purchase_order_prefix, purchase_order_suffix, prefix_suffix_type, disable_cost_updates_flag, disable_negative_inventory_flag, auto_close_purchase_order_flag, auto_close_purchase_order_item_flag, auto_approve_purchase_order_flag, tax_purchase_order_flag, tax_freight_flag, use_vendor_tax_code_flag, num_decimal_places, disable_auto_pick_flag, default_product_taxable_flag, eori_number, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
