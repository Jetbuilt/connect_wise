# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class CurrencyReference
    attr_accessor :id, :symbol, :currency_code, :decimal_separator, :number_of_decimals, :thousands_separator, :negative_parentheses_flag, :display_symbol_flag, :currency_identifier, :display_id_flag, :right_align, :name, :_info

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        symbol: :symbol,
        currency_code: :currencyCode,
        decimal_separator: :decimalSeparator,
        number_of_decimals: :numberOfDecimals,
        thousands_separator: :thousandsSeparator,
        negative_parentheses_flag: :negativeParenthesesFlag,
        display_symbol_flag: :displaySymbolFlag,
        currency_identifier: :currencyIdentifier,
        display_id_flag: :displayIdFlag,
        right_align: :rightAlign,
        name: :name,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        symbol: :String,
        currency_code: :String,
        decimal_separator: :String,
        number_of_decimals: :Integer,
        thousands_separator: :String,
        negative_parentheses_flag: :Boolean,
        display_symbol_flag: :Boolean,
        currency_identifier: :String,
        display_id_flag: :Boolean,
        right_align: :Boolean,
        name: :String,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
                :id
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::CurrencyReference` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::CurrencyReference`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.symbol = attributes[:symbol] if attributes.key?(:symbol)

      self.currency_code = attributes[:currency_code] if attributes.key?(:currency_code)

      self.decimal_separator = attributes[:decimal_separator] if attributes.key?(:decimal_separator)

      self.number_of_decimals = attributes[:number_of_decimals] if attributes.key?(:number_of_decimals)

      self.thousands_separator = attributes[:thousands_separator] if attributes.key?(:thousands_separator)

      self.negative_parentheses_flag = attributes[:negative_parentheses_flag] if attributes.key?(:negative_parentheses_flag)

      self.display_symbol_flag = attributes[:display_symbol_flag] if attributes.key?(:display_symbol_flag)

      self.currency_identifier = attributes[:currency_identifier] if attributes.key?(:currency_identifier)

      self.display_id_flag = attributes[:display_id_flag] if attributes.key?(:display_id_flag)

      self.right_align = attributes[:right_align] if attributes.key?(:right_align)

      self.name = attributes[:name] if attributes.key?(:name)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        symbol == other.symbol &&
        currency_code == other.currency_code &&
        decimal_separator == other.decimal_separator &&
        number_of_decimals == other.number_of_decimals &&
        thousands_separator == other.thousands_separator &&
        negative_parentheses_flag == other.negative_parentheses_flag &&
        display_symbol_flag == other.display_symbol_flag &&
        currency_identifier == other.currency_identifier &&
        display_id_flag == other.display_id_flag &&
        right_align == other.right_align &&
        name == other.name &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, symbol, currency_code, decimal_separator, number_of_decimals, thousands_separator, negative_parentheses_flag, display_symbol_flag, currency_identifier, display_id_flag, right_align, name, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
