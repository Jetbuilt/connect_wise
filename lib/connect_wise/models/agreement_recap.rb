# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class AgreementRecap
    attr_accessor :id, :adjustment_amount, :agreement_status, :name, :available_amount, :company_name, :is_unlimited, :last_invoice_amount, :last_invoice_date, :last_invoice_number, :next_invoice_amount, :next_invoice_date, :overrun_amount, :remaining_amount, :starting_amount, :unbilled_overage_amount, :unbilled_periods, :used_amount

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        adjustment_amount: :adjustmentAmount,
        agreement_status: :agreementStatus,
        name: :name,
        available_amount: :availableAmount,
        company_name: :companyName,
        is_unlimited: :isUnlimited,
        last_invoice_amount: :lastInvoiceAmount,
        last_invoice_date: :lastInvoiceDate,
        last_invoice_number: :lastInvoiceNumber,
        next_invoice_amount: :nextInvoiceAmount,
        next_invoice_date: :nextInvoiceDate,
        overrun_amount: :overrunAmount,
        remaining_amount: :remainingAmount,
        starting_amount: :startingAmount,
        unbilled_overage_amount: :unbilledOverageAmount,
        unbilled_periods: :unbilledPeriods,
        used_amount: :usedAmount
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        adjustment_amount: :Float,
        agreement_status: :String,
        name: :String,
        available_amount: :Float,
        company_name: :String,
        is_unlimited: :String,
        last_invoice_amount: :String,
        last_invoice_date: :String,
        last_invoice_number: :String,
        next_invoice_amount: :Float,
        next_invoice_date: :String,
        overrun_amount: :Float,
        remaining_amount: :Float,
        starting_amount: :Float,
        unbilled_overage_amount: :Float,
        unbilled_periods: :Integer,
        used_amount: :Float
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::AgreementRecap` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::AgreementRecap`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.adjustment_amount = attributes[:adjustment_amount] if attributes.key?(:adjustment_amount)

      self.agreement_status = attributes[:agreement_status] if attributes.key?(:agreement_status)

      self.name = attributes[:name] if attributes.key?(:name)

      self.available_amount = attributes[:available_amount] if attributes.key?(:available_amount)

      self.company_name = attributes[:company_name] if attributes.key?(:company_name)

      self.is_unlimited = attributes[:is_unlimited] if attributes.key?(:is_unlimited)

      self.last_invoice_amount = attributes[:last_invoice_amount] if attributes.key?(:last_invoice_amount)

      self.last_invoice_date = attributes[:last_invoice_date] if attributes.key?(:last_invoice_date)

      self.last_invoice_number = attributes[:last_invoice_number] if attributes.key?(:last_invoice_number)

      self.next_invoice_amount = attributes[:next_invoice_amount] if attributes.key?(:next_invoice_amount)

      self.next_invoice_date = attributes[:next_invoice_date] if attributes.key?(:next_invoice_date)

      self.overrun_amount = attributes[:overrun_amount] if attributes.key?(:overrun_amount)

      self.remaining_amount = attributes[:remaining_amount] if attributes.key?(:remaining_amount)

      self.starting_amount = attributes[:starting_amount] if attributes.key?(:starting_amount)

      self.unbilled_overage_amount = attributes[:unbilled_overage_amount] if attributes.key?(:unbilled_overage_amount)

      self.unbilled_periods = attributes[:unbilled_periods] if attributes.key?(:unbilled_periods)

      return unless attributes.key?(:used_amount)

      self.used_amount = attributes[:used_amount]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        adjustment_amount == other.adjustment_amount &&
        agreement_status == other.agreement_status &&
        name == other.name &&
        available_amount == other.available_amount &&
        company_name == other.company_name &&
        is_unlimited == other.is_unlimited &&
        last_invoice_amount == other.last_invoice_amount &&
        last_invoice_date == other.last_invoice_date &&
        last_invoice_number == other.last_invoice_number &&
        next_invoice_amount == other.next_invoice_amount &&
        next_invoice_date == other.next_invoice_date &&
        overrun_amount == other.overrun_amount &&
        remaining_amount == other.remaining_amount &&
        starting_amount == other.starting_amount &&
        unbilled_overage_amount == other.unbilled_overage_amount &&
        unbilled_periods == other.unbilled_periods &&
        used_amount == other.used_amount
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, adjustment_amount, agreement_status, name, available_amount, company_name, is_unlimited, last_invoice_amount, last_invoice_date, last_invoice_number, next_invoice_amount, next_invoice_date, overrun_amount, remaining_amount, starting_amount, unbilled_overage_amount, unbilled_periods, used_amount].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
