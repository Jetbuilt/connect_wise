=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class UserDefinedField
    # Id of the Pod where the custom field will be placed
    attr_accessor :pod_id

    # Field caption Max length: 25;
    attr_accessor :caption

    # Must be between 1 and 500.  This defines the order in which the custom fields will appear
    attr_accessor :sequence_number

    attr_accessor :field_type_identifier

    # ID of the custom user defined field
    attr_accessor :id

    # Help text to accompany the custom field Max length: 1000;
    attr_accessor :help_text

    # Only valid for Number or percent
    attr_accessor :number_decimals

    attr_accessor :entry_type_identifier

    attr_accessor :required_flag

    attr_accessor :display_on_screen_flag

    attr_accessor :read_only_flag

    # Denotes that this custom field is included on a list view
    attr_accessor :list_view_flag

    # Only available with Button Field Type. Required when entryTypeIdentifier is button Max length: 1000;
    attr_accessor :button_url

    attr_accessor :options

    attr_accessor :business_unit_ids

    attr_accessor :location_ids

    attr_accessor :add_all_business_units

    attr_accessor :remove_all_business_units

    attr_accessor :add_all_locations

    attr_accessor :remove_all_locations

    # Date in UTC the custom field was created
    attr_accessor :date_created

    attr_accessor :_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pod_id' => :'podId',
        :'caption' => :'caption',
        :'sequence_number' => :'sequenceNumber',
        :'field_type_identifier' => :'fieldTypeIdentifier',
        :'id' => :'id',
        :'help_text' => :'helpText',
        :'number_decimals' => :'numberDecimals',
        :'entry_type_identifier' => :'entryTypeIdentifier',
        :'required_flag' => :'requiredFlag',
        :'display_on_screen_flag' => :'displayOnScreenFlag',
        :'read_only_flag' => :'readOnlyFlag',
        :'list_view_flag' => :'listViewFlag',
        :'button_url' => :'buttonUrl',
        :'options' => :'options',
        :'business_unit_ids' => :'businessUnitIds',
        :'location_ids' => :'locationIds',
        :'add_all_business_units' => :'addAllBusinessUnits',
        :'remove_all_business_units' => :'removeAllBusinessUnits',
        :'add_all_locations' => :'addAllLocations',
        :'remove_all_locations' => :'removeAllLocations',
        :'date_created' => :'dateCreated',
        :'_info' => :'_info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'pod_id' => :'Integer',
        :'caption' => :'String',
        :'sequence_number' => :'Integer',
        :'field_type_identifier' => :'String',
        :'id' => :'Integer',
        :'help_text' => :'String',
        :'number_decimals' => :'Integer',
        :'entry_type_identifier' => :'String',
        :'required_flag' => :'Boolean',
        :'display_on_screen_flag' => :'Boolean',
        :'read_only_flag' => :'Boolean',
        :'list_view_flag' => :'Boolean',
        :'button_url' => :'String',
        :'options' => :'Array<UserDefinedFieldOption>',
        :'business_unit_ids' => :'Array<Integer>',
        :'location_ids' => :'Array<Integer>',
        :'add_all_business_units' => :'Boolean',
        :'remove_all_business_units' => :'Boolean',
        :'add_all_locations' => :'Boolean',
        :'remove_all_locations' => :'Boolean',
        :'date_created' => :'Time',
        :'_info' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'pod_id',
        :'sequence_number',
        :'field_type_identifier',
        :'number_decimals',
        :'entry_type_identifier',
        :'required_flag',
        :'display_on_screen_flag',
        :'read_only_flag',
        :'list_view_flag',
        :'add_all_business_units',
        :'remove_all_business_units',
        :'add_all_locations',
        :'remove_all_locations',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::UserDefinedField` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::UserDefinedField`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'pod_id')
        self.pod_id = attributes[:'pod_id']
      end

      if attributes.key?(:'caption')
        self.caption = attributes[:'caption']
      end

      if attributes.key?(:'sequence_number')
        self.sequence_number = attributes[:'sequence_number']
      end

      if attributes.key?(:'field_type_identifier')
        self.field_type_identifier = attributes[:'field_type_identifier']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'help_text')
        self.help_text = attributes[:'help_text']
      end

      if attributes.key?(:'number_decimals')
        self.number_decimals = attributes[:'number_decimals']
      end

      if attributes.key?(:'entry_type_identifier')
        self.entry_type_identifier = attributes[:'entry_type_identifier']
      end

      if attributes.key?(:'required_flag')
        self.required_flag = attributes[:'required_flag']
      end

      if attributes.key?(:'display_on_screen_flag')
        self.display_on_screen_flag = attributes[:'display_on_screen_flag']
      end

      if attributes.key?(:'read_only_flag')
        self.read_only_flag = attributes[:'read_only_flag']
      end

      if attributes.key?(:'list_view_flag')
        self.list_view_flag = attributes[:'list_view_flag']
      end

      if attributes.key?(:'button_url')
        self.button_url = attributes[:'button_url']
      end

      if attributes.key?(:'options')
        if (value = attributes[:'options']).is_a?(Array)
          self.options = value
        end
      end

      if attributes.key?(:'business_unit_ids')
        if (value = attributes[:'business_unit_ids']).is_a?(Array)
          self.business_unit_ids = value
        end
      end

      if attributes.key?(:'location_ids')
        if (value = attributes[:'location_ids']).is_a?(Array)
          self.location_ids = value
        end
      end

      if attributes.key?(:'add_all_business_units')
        self.add_all_business_units = attributes[:'add_all_business_units']
      end

      if attributes.key?(:'remove_all_business_units')
        self.remove_all_business_units = attributes[:'remove_all_business_units']
      end

      if attributes.key?(:'add_all_locations')
        self.add_all_locations = attributes[:'add_all_locations']
      end

      if attributes.key?(:'remove_all_locations')
        self.remove_all_locations = attributes[:'remove_all_locations']
      end

      if attributes.key?(:'date_created')
        self.date_created = attributes[:'date_created']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @caption.nil?
        invalid_properties.push('invalid value for "caption", caption cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @caption.nil?
      field_type_identifier_validator = EnumAttributeValidator.new('String', ["TextArea", "Button", "Currency", "Date", "Hyperlink", "IPAddress", "Checkbox", "Number", "Percent", "Text", "Password"])
      return false unless field_type_identifier_validator.valid?(@field_type_identifier)
      entry_type_identifier_validator = EnumAttributeValidator.new('String', ["Date", "EntryField", "List", "Option"])
      return false unless entry_type_identifier_validator.valid?(@entry_type_identifier)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] field_type_identifier Object to be assigned
    def field_type_identifier=(field_type_identifier)
      validator = EnumAttributeValidator.new('String', ["TextArea", "Button", "Currency", "Date", "Hyperlink", "IPAddress", "Checkbox", "Number", "Percent", "Text", "Password"])
      unless validator.valid?(field_type_identifier)
        fail ArgumentError, "invalid value for \"field_type_identifier\", must be one of #{validator.allowable_values}."
      end
      @field_type_identifier = field_type_identifier
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] entry_type_identifier Object to be assigned
    def entry_type_identifier=(entry_type_identifier)
      validator = EnumAttributeValidator.new('String', ["Date", "EntryField", "List", "Option"])
      unless validator.valid?(entry_type_identifier)
        fail ArgumentError, "invalid value for \"entry_type_identifier\", must be one of #{validator.allowable_values}."
      end
      @entry_type_identifier = entry_type_identifier
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pod_id == o.pod_id &&
          caption == o.caption &&
          sequence_number == o.sequence_number &&
          field_type_identifier == o.field_type_identifier &&
          id == o.id &&
          help_text == o.help_text &&
          number_decimals == o.number_decimals &&
          entry_type_identifier == o.entry_type_identifier &&
          required_flag == o.required_flag &&
          display_on_screen_flag == o.display_on_screen_flag &&
          read_only_flag == o.read_only_flag &&
          list_view_flag == o.list_view_flag &&
          button_url == o.button_url &&
          options == o.options &&
          business_unit_ids == o.business_unit_ids &&
          location_ids == o.location_ids &&
          add_all_business_units == o.add_all_business_units &&
          remove_all_business_units == o.remove_all_business_units &&
          add_all_locations == o.add_all_locations &&
          remove_all_locations == o.remove_all_locations &&
          date_created == o.date_created &&
          _info == o._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [pod_id, caption, sequence_number, field_type_identifier, id, help_text, number_decimals, entry_type_identifier, required_flag, display_on_screen_flag, read_only_flag, list_view_flag, button_url, options, business_unit_ids, location_ids, add_all_business_units, remove_all_business_units, add_all_locations, remove_all_locations, date_created, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
