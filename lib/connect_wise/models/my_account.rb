=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class MyAccount
    #  Max length: 15;
    attr_accessor :identifier

    #  Max length: 30;
    attr_accessor :first_name

    #  Max length: 30;
    attr_accessor :last_name

    # F = Full Member, A = API Member, C = StreamlineIT Member, X = Subcontractor Member
    attr_accessor :license_class

    attr_accessor :default_email

    attr_accessor :default_phone

    attr_accessor :hire_date

    attr_accessor :company_activity_tab_format

    attr_accessor :invoice_time_tab_format

    attr_accessor :invoice_screen_default_tab_format

    attr_accessor :invoicing_display_options

    attr_accessor :agreement_invoicing_display_options

    attr_accessor :id

    # ConditionallyRequired. API Member will get random password generated Max length: 60;
    attr_accessor :password

    #  Max length: 1;
    attr_accessor :middle_initial

    #  Max length: 50;
    attr_accessor :title

    attr_accessor :report_card

    attr_accessor :disable_online_flag

    attr_accessor :enable_mobile_flag

    attr_accessor :type

    #  Max length: 10;
    attr_accessor :employee_identifer

    attr_accessor :vendor_number

    attr_accessor :notes

    attr_accessor :time_zone

    attr_accessor :country

    attr_accessor :service_board_team_ids

    attr_accessor :enable_mobile_gps_flag

    attr_accessor :inactive_date

    attr_accessor :inactive_flag

    attr_accessor :last_login

    attr_accessor :photo

    attr_accessor :partner_portal_flag

    attr_accessor :client_id

    attr_accessor :sts_user_admin_url

    attr_accessor :token

    attr_accessor :toast_notification_flag

    attr_accessor :member_personas

    attr_accessor :office365

    #  Max length: 250;
    attr_accessor :office_email

    #  Max length: 15;
    attr_accessor :office_phone

    #  Max length: 10;
    attr_accessor :office_extension

    #  Max length: 250;
    attr_accessor :mobile_email

    #  Max length: 15;
    attr_accessor :mobile_phone

    #  Max length: 10;
    attr_accessor :mobile_extension

    #  Max length: 250;
    attr_accessor :home_email

    #  Max length: 15;
    attr_accessor :home_phone

    #  Max length: 10;
    attr_accessor :home_extension

    #  Max length: 250;
    attr_accessor :primary_email

    attr_accessor :default_location

    attr_accessor :default_department

    attr_accessor :reports_to

    attr_accessor :work_role

    attr_accessor :work_type

    attr_accessor :time_approver

    attr_accessor :expense_approver

    attr_accessor :billable_forecast

    attr_accessor :daily_capacity

    attr_accessor :include_in_utilization_reporting_flag

    attr_accessor :require_expense_entry_flag

    attr_accessor :require_time_sheet_entry_flag

    attr_accessor :require_start_and_end_time_on_time_entry_flag

    attr_accessor :allow_in_cell_entry_on_time_sheet

    attr_accessor :enter_time_against_company_flag

    attr_accessor :allow_expenses_entered_against_companies_flag

    attr_accessor :time_reminder_email_flag

    attr_accessor :days_tolerance

    attr_accessor :minimum_hours

    attr_accessor :time_sheet_start_date

    attr_accessor :service_default_location

    attr_accessor :service_default_department

    attr_accessor :service_default_board

    attr_accessor :project_default_location

    attr_accessor :project_default_department

    attr_accessor :project_default_board

    attr_accessor :schedule_default_location

    attr_accessor :schedule_default_department

    attr_accessor :schedule_capacity

    attr_accessor :service_location

    attr_accessor :hide_member_in_dispatch_portal_flag

    attr_accessor :calendar

    attr_accessor :sales_default_location

    attr_accessor :warehouse

    attr_accessor :warehouse_bin

    attr_accessor :mapi_name

    attr_accessor :calendar_sync_integration_flag

    attr_accessor :authentication_service_type

    attr_accessor :timebased_one_time_password_activated

    attr_accessor :auto_start_stopwatch

    attr_accessor :auto_popup_quick_notes_with_stopwatch

    attr_accessor :signature

    attr_accessor :global_search_default_ticket_filter

    attr_accessor :global_search_default_sort

    attr_accessor :phone_source

    attr_accessor :phone_integration_type

    attr_accessor :use_browser_language_flag

    attr_accessor :_info

    attr_accessor :copy_pod_layouts

    attr_accessor :copy_shared_default_views

    attr_accessor :copy_column_layouts_and_filters

    attr_accessor :from_member_rec_id

    attr_accessor :custom_fields

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'identifier' => :'identifier',
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'license_class' => :'licenseClass',
        :'default_email' => :'defaultEmail',
        :'default_phone' => :'defaultPhone',
        :'hire_date' => :'hireDate',
        :'company_activity_tab_format' => :'companyActivityTabFormat',
        :'invoice_time_tab_format' => :'invoiceTimeTabFormat',
        :'invoice_screen_default_tab_format' => :'invoiceScreenDefaultTabFormat',
        :'invoicing_display_options' => :'invoicingDisplayOptions',
        :'agreement_invoicing_display_options' => :'agreementInvoicingDisplayOptions',
        :'id' => :'id',
        :'password' => :'password',
        :'middle_initial' => :'middleInitial',
        :'title' => :'title',
        :'report_card' => :'reportCard',
        :'disable_online_flag' => :'disableOnlineFlag',
        :'enable_mobile_flag' => :'enableMobileFlag',
        :'type' => :'type',
        :'employee_identifer' => :'employeeIdentifer',
        :'vendor_number' => :'vendorNumber',
        :'notes' => :'notes',
        :'time_zone' => :'timeZone',
        :'country' => :'country',
        :'service_board_team_ids' => :'serviceBoardTeamIds',
        :'enable_mobile_gps_flag' => :'enableMobileGpsFlag',
        :'inactive_date' => :'inactiveDate',
        :'inactive_flag' => :'inactiveFlag',
        :'last_login' => :'lastLogin',
        :'photo' => :'photo',
        :'partner_portal_flag' => :'partnerPortalFlag',
        :'client_id' => :'clientId',
        :'sts_user_admin_url' => :'stsUserAdminUrl',
        :'token' => :'token',
        :'toast_notification_flag' => :'toastNotificationFlag',
        :'member_personas' => :'memberPersonas',
        :'office365' => :'office365',
        :'office_email' => :'officeEmail',
        :'office_phone' => :'officePhone',
        :'office_extension' => :'officeExtension',
        :'mobile_email' => :'mobileEmail',
        :'mobile_phone' => :'mobilePhone',
        :'mobile_extension' => :'mobileExtension',
        :'home_email' => :'homeEmail',
        :'home_phone' => :'homePhone',
        :'home_extension' => :'homeExtension',
        :'primary_email' => :'primaryEmail',
        :'default_location' => :'defaultLocation',
        :'default_department' => :'defaultDepartment',
        :'reports_to' => :'reportsTo',
        :'work_role' => :'workRole',
        :'work_type' => :'workType',
        :'time_approver' => :'timeApprover',
        :'expense_approver' => :'expenseApprover',
        :'billable_forecast' => :'billableForecast',
        :'daily_capacity' => :'dailyCapacity',
        :'include_in_utilization_reporting_flag' => :'includeInUtilizationReportingFlag',
        :'require_expense_entry_flag' => :'requireExpenseEntryFlag',
        :'require_time_sheet_entry_flag' => :'requireTimeSheetEntryFlag',
        :'require_start_and_end_time_on_time_entry_flag' => :'requireStartAndEndTimeOnTimeEntryFlag',
        :'allow_in_cell_entry_on_time_sheet' => :'allowInCellEntryOnTimeSheet',
        :'enter_time_against_company_flag' => :'enterTimeAgainstCompanyFlag',
        :'allow_expenses_entered_against_companies_flag' => :'allowExpensesEnteredAgainstCompaniesFlag',
        :'time_reminder_email_flag' => :'timeReminderEmailFlag',
        :'days_tolerance' => :'daysTolerance',
        :'minimum_hours' => :'minimumHours',
        :'time_sheet_start_date' => :'timeSheetStartDate',
        :'service_default_location' => :'serviceDefaultLocation',
        :'service_default_department' => :'serviceDefaultDepartment',
        :'service_default_board' => :'serviceDefaultBoard',
        :'project_default_location' => :'projectDefaultLocation',
        :'project_default_department' => :'projectDefaultDepartment',
        :'project_default_board' => :'projectDefaultBoard',
        :'schedule_default_location' => :'scheduleDefaultLocation',
        :'schedule_default_department' => :'scheduleDefaultDepartment',
        :'schedule_capacity' => :'scheduleCapacity',
        :'service_location' => :'serviceLocation',
        :'hide_member_in_dispatch_portal_flag' => :'hideMemberInDispatchPortalFlag',
        :'calendar' => :'calendar',
        :'sales_default_location' => :'salesDefaultLocation',
        :'warehouse' => :'warehouse',
        :'warehouse_bin' => :'warehouseBin',
        :'mapi_name' => :'mapiName',
        :'calendar_sync_integration_flag' => :'calendarSyncIntegrationFlag',
        :'authentication_service_type' => :'authenticationServiceType',
        :'timebased_one_time_password_activated' => :'timebasedOneTimePasswordActivated',
        :'auto_start_stopwatch' => :'autoStartStopwatch',
        :'auto_popup_quick_notes_with_stopwatch' => :'autoPopupQuickNotesWithStopwatch',
        :'signature' => :'signature',
        :'global_search_default_ticket_filter' => :'globalSearchDefaultTicketFilter',
        :'global_search_default_sort' => :'globalSearchDefaultSort',
        :'phone_source' => :'phoneSource',
        :'phone_integration_type' => :'phoneIntegrationType',
        :'use_browser_language_flag' => :'useBrowserLanguageFlag',
        :'_info' => :'_info',
        :'copy_pod_layouts' => :'copyPodLayouts',
        :'copy_shared_default_views' => :'copySharedDefaultViews',
        :'copy_column_layouts_and_filters' => :'copyColumnLayoutsAndFilters',
        :'from_member_rec_id' => :'fromMemberRecId',
        :'custom_fields' => :'customFields'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'identifier' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'license_class' => :'String',
        :'default_email' => :'String',
        :'default_phone' => :'String',
        :'hire_date' => :'Time',
        :'company_activity_tab_format' => :'String',
        :'invoice_time_tab_format' => :'String',
        :'invoice_screen_default_tab_format' => :'String',
        :'invoicing_display_options' => :'String',
        :'agreement_invoicing_display_options' => :'String',
        :'id' => :'Integer',
        :'password' => :'String',
        :'middle_initial' => :'String',
        :'title' => :'String',
        :'report_card' => :'ReportCardReference',
        :'disable_online_flag' => :'Boolean',
        :'enable_mobile_flag' => :'Boolean',
        :'type' => :'MemberTypeReference',
        :'employee_identifer' => :'String',
        :'vendor_number' => :'String',
        :'notes' => :'String',
        :'time_zone' => :'TimeZoneSetupReference',
        :'country' => :'CountryReference',
        :'service_board_team_ids' => :'Array<Integer>',
        :'enable_mobile_gps_flag' => :'Boolean',
        :'inactive_date' => :'Time',
        :'inactive_flag' => :'Boolean',
        :'last_login' => :'String',
        :'photo' => :'DocumentReference',
        :'partner_portal_flag' => :'Boolean',
        :'client_id' => :'String',
        :'sts_user_admin_url' => :'String',
        :'token' => :'String',
        :'toast_notification_flag' => :'Boolean',
        :'member_personas' => :'Array<Integer>',
        :'office365' => :'MemberOffice365',
        :'office_email' => :'String',
        :'office_phone' => :'String',
        :'office_extension' => :'String',
        :'mobile_email' => :'String',
        :'mobile_phone' => :'String',
        :'mobile_extension' => :'String',
        :'home_email' => :'String',
        :'home_phone' => :'String',
        :'home_extension' => :'String',
        :'primary_email' => :'String',
        :'default_location' => :'SystemLocationReference',
        :'default_department' => :'SystemDepartmentReference',
        :'reports_to' => :'MemberReference',
        :'work_role' => :'WorkRoleReference',
        :'work_type' => :'WorkTypeReference',
        :'time_approver' => :'MemberReference',
        :'expense_approver' => :'MemberReference',
        :'billable_forecast' => :'Float',
        :'daily_capacity' => :'Float',
        :'include_in_utilization_reporting_flag' => :'Boolean',
        :'require_expense_entry_flag' => :'Boolean',
        :'require_time_sheet_entry_flag' => :'Boolean',
        :'require_start_and_end_time_on_time_entry_flag' => :'Boolean',
        :'allow_in_cell_entry_on_time_sheet' => :'Boolean',
        :'enter_time_against_company_flag' => :'Boolean',
        :'allow_expenses_entered_against_companies_flag' => :'Boolean',
        :'time_reminder_email_flag' => :'Boolean',
        :'days_tolerance' => :'Integer',
        :'minimum_hours' => :'Float',
        :'time_sheet_start_date' => :'Time',
        :'service_default_location' => :'SystemLocationReference',
        :'service_default_department' => :'SystemDepartmentReference',
        :'service_default_board' => :'BoardReference',
        :'project_default_location' => :'SystemLocationReference',
        :'project_default_department' => :'SystemDepartmentReference',
        :'project_default_board' => :'ProjectBoardReference',
        :'schedule_default_location' => :'SystemLocationReference',
        :'schedule_default_department' => :'SystemDepartmentReference',
        :'schedule_capacity' => :'Float',
        :'service_location' => :'ServiceLocationReference',
        :'hide_member_in_dispatch_portal_flag' => :'Boolean',
        :'calendar' => :'CalendarReference',
        :'sales_default_location' => :'SystemLocationReference',
        :'warehouse' => :'WarehouseReference',
        :'warehouse_bin' => :'WarehouseBinReference',
        :'mapi_name' => :'String',
        :'calendar_sync_integration_flag' => :'Boolean',
        :'authentication_service_type' => :'String',
        :'timebased_one_time_password_activated' => :'Boolean',
        :'auto_start_stopwatch' => :'Boolean',
        :'auto_popup_quick_notes_with_stopwatch' => :'Boolean',
        :'signature' => :'String',
        :'global_search_default_ticket_filter' => :'String',
        :'global_search_default_sort' => :'String',
        :'phone_source' => :'String',
        :'phone_integration_type' => :'String',
        :'use_browser_language_flag' => :'Boolean',
        :'_info' => :'Hash<String, String>',
        :'copy_pod_layouts' => :'Boolean',
        :'copy_shared_default_views' => :'Boolean',
        :'copy_column_layouts_and_filters' => :'Boolean',
        :'from_member_rec_id' => :'Integer',
        :'custom_fields' => :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'license_class',
        :'default_email',
        :'default_phone',
        :'company_activity_tab_format',
        :'invoice_time_tab_format',
        :'invoice_screen_default_tab_format',
        :'invoicing_display_options',
        :'agreement_invoicing_display_options',
        :'disable_online_flag',
        :'enable_mobile_flag',
        :'enable_mobile_gps_flag',
        :'inactive_flag',
        :'partner_portal_flag',
        :'toast_notification_flag',
        :'billable_forecast',
        :'daily_capacity',
        :'include_in_utilization_reporting_flag',
        :'require_expense_entry_flag',
        :'require_time_sheet_entry_flag',
        :'require_start_and_end_time_on_time_entry_flag',
        :'allow_in_cell_entry_on_time_sheet',
        :'enter_time_against_company_flag',
        :'allow_expenses_entered_against_companies_flag',
        :'time_reminder_email_flag',
        :'days_tolerance',
        :'minimum_hours',
        :'schedule_capacity',
        :'hide_member_in_dispatch_portal_flag',
        :'calendar_sync_integration_flag',
        :'authentication_service_type',
        :'timebased_one_time_password_activated',
        :'auto_start_stopwatch',
        :'auto_popup_quick_notes_with_stopwatch',
        :'global_search_default_ticket_filter',
        :'global_search_default_sort',
        :'phone_integration_type',
        :'use_browser_language_flag',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::MyAccount` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::MyAccount`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'identifier')
        self.identifier = attributes[:'identifier']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'license_class')
        self.license_class = attributes[:'license_class']
      end

      if attributes.key?(:'default_email')
        self.default_email = attributes[:'default_email']
      end

      if attributes.key?(:'default_phone')
        self.default_phone = attributes[:'default_phone']
      end

      if attributes.key?(:'hire_date')
        self.hire_date = attributes[:'hire_date']
      end

      if attributes.key?(:'company_activity_tab_format')
        self.company_activity_tab_format = attributes[:'company_activity_tab_format']
      end

      if attributes.key?(:'invoice_time_tab_format')
        self.invoice_time_tab_format = attributes[:'invoice_time_tab_format']
      end

      if attributes.key?(:'invoice_screen_default_tab_format')
        self.invoice_screen_default_tab_format = attributes[:'invoice_screen_default_tab_format']
      end

      if attributes.key?(:'invoicing_display_options')
        self.invoicing_display_options = attributes[:'invoicing_display_options']
      end

      if attributes.key?(:'agreement_invoicing_display_options')
        self.agreement_invoicing_display_options = attributes[:'agreement_invoicing_display_options']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'middle_initial')
        self.middle_initial = attributes[:'middle_initial']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'report_card')
        self.report_card = attributes[:'report_card']
      end

      if attributes.key?(:'disable_online_flag')
        self.disable_online_flag = attributes[:'disable_online_flag']
      end

      if attributes.key?(:'enable_mobile_flag')
        self.enable_mobile_flag = attributes[:'enable_mobile_flag']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'employee_identifer')
        self.employee_identifer = attributes[:'employee_identifer']
      end

      if attributes.key?(:'vendor_number')
        self.vendor_number = attributes[:'vendor_number']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'time_zone')
        self.time_zone = attributes[:'time_zone']
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.key?(:'service_board_team_ids')
        if (value = attributes[:'service_board_team_ids']).is_a?(Array)
          self.service_board_team_ids = value
        end
      end

      if attributes.key?(:'enable_mobile_gps_flag')
        self.enable_mobile_gps_flag = attributes[:'enable_mobile_gps_flag']
      end

      if attributes.key?(:'inactive_date')
        self.inactive_date = attributes[:'inactive_date']
      end

      if attributes.key?(:'inactive_flag')
        self.inactive_flag = attributes[:'inactive_flag']
      end

      if attributes.key?(:'last_login')
        self.last_login = attributes[:'last_login']
      end

      if attributes.key?(:'photo')
        self.photo = attributes[:'photo']
      end

      if attributes.key?(:'partner_portal_flag')
        self.partner_portal_flag = attributes[:'partner_portal_flag']
      end

      if attributes.key?(:'client_id')
        self.client_id = attributes[:'client_id']
      end

      if attributes.key?(:'sts_user_admin_url')
        self.sts_user_admin_url = attributes[:'sts_user_admin_url']
      end

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'toast_notification_flag')
        self.toast_notification_flag = attributes[:'toast_notification_flag']
      end

      if attributes.key?(:'member_personas')
        if (value = attributes[:'member_personas']).is_a?(Array)
          self.member_personas = value
        end
      end

      if attributes.key?(:'office365')
        self.office365 = attributes[:'office365']
      end

      if attributes.key?(:'office_email')
        self.office_email = attributes[:'office_email']
      end

      if attributes.key?(:'office_phone')
        self.office_phone = attributes[:'office_phone']
      end

      if attributes.key?(:'office_extension')
        self.office_extension = attributes[:'office_extension']
      end

      if attributes.key?(:'mobile_email')
        self.mobile_email = attributes[:'mobile_email']
      end

      if attributes.key?(:'mobile_phone')
        self.mobile_phone = attributes[:'mobile_phone']
      end

      if attributes.key?(:'mobile_extension')
        self.mobile_extension = attributes[:'mobile_extension']
      end

      if attributes.key?(:'home_email')
        self.home_email = attributes[:'home_email']
      end

      if attributes.key?(:'home_phone')
        self.home_phone = attributes[:'home_phone']
      end

      if attributes.key?(:'home_extension')
        self.home_extension = attributes[:'home_extension']
      end

      if attributes.key?(:'primary_email')
        self.primary_email = attributes[:'primary_email']
      end

      if attributes.key?(:'default_location')
        self.default_location = attributes[:'default_location']
      end

      if attributes.key?(:'default_department')
        self.default_department = attributes[:'default_department']
      end

      if attributes.key?(:'reports_to')
        self.reports_to = attributes[:'reports_to']
      end

      if attributes.key?(:'work_role')
        self.work_role = attributes[:'work_role']
      end

      if attributes.key?(:'work_type')
        self.work_type = attributes[:'work_type']
      end

      if attributes.key?(:'time_approver')
        self.time_approver = attributes[:'time_approver']
      end

      if attributes.key?(:'expense_approver')
        self.expense_approver = attributes[:'expense_approver']
      end

      if attributes.key?(:'billable_forecast')
        self.billable_forecast = attributes[:'billable_forecast']
      end

      if attributes.key?(:'daily_capacity')
        self.daily_capacity = attributes[:'daily_capacity']
      end

      if attributes.key?(:'include_in_utilization_reporting_flag')
        self.include_in_utilization_reporting_flag = attributes[:'include_in_utilization_reporting_flag']
      end

      if attributes.key?(:'require_expense_entry_flag')
        self.require_expense_entry_flag = attributes[:'require_expense_entry_flag']
      end

      if attributes.key?(:'require_time_sheet_entry_flag')
        self.require_time_sheet_entry_flag = attributes[:'require_time_sheet_entry_flag']
      end

      if attributes.key?(:'require_start_and_end_time_on_time_entry_flag')
        self.require_start_and_end_time_on_time_entry_flag = attributes[:'require_start_and_end_time_on_time_entry_flag']
      end

      if attributes.key?(:'allow_in_cell_entry_on_time_sheet')
        self.allow_in_cell_entry_on_time_sheet = attributes[:'allow_in_cell_entry_on_time_sheet']
      end

      if attributes.key?(:'enter_time_against_company_flag')
        self.enter_time_against_company_flag = attributes[:'enter_time_against_company_flag']
      end

      if attributes.key?(:'allow_expenses_entered_against_companies_flag')
        self.allow_expenses_entered_against_companies_flag = attributes[:'allow_expenses_entered_against_companies_flag']
      end

      if attributes.key?(:'time_reminder_email_flag')
        self.time_reminder_email_flag = attributes[:'time_reminder_email_flag']
      end

      if attributes.key?(:'days_tolerance')
        self.days_tolerance = attributes[:'days_tolerance']
      end

      if attributes.key?(:'minimum_hours')
        self.minimum_hours = attributes[:'minimum_hours']
      end

      if attributes.key?(:'time_sheet_start_date')
        self.time_sheet_start_date = attributes[:'time_sheet_start_date']
      end

      if attributes.key?(:'service_default_location')
        self.service_default_location = attributes[:'service_default_location']
      end

      if attributes.key?(:'service_default_department')
        self.service_default_department = attributes[:'service_default_department']
      end

      if attributes.key?(:'service_default_board')
        self.service_default_board = attributes[:'service_default_board']
      end

      if attributes.key?(:'project_default_location')
        self.project_default_location = attributes[:'project_default_location']
      end

      if attributes.key?(:'project_default_department')
        self.project_default_department = attributes[:'project_default_department']
      end

      if attributes.key?(:'project_default_board')
        self.project_default_board = attributes[:'project_default_board']
      end

      if attributes.key?(:'schedule_default_location')
        self.schedule_default_location = attributes[:'schedule_default_location']
      end

      if attributes.key?(:'schedule_default_department')
        self.schedule_default_department = attributes[:'schedule_default_department']
      end

      if attributes.key?(:'schedule_capacity')
        self.schedule_capacity = attributes[:'schedule_capacity']
      end

      if attributes.key?(:'service_location')
        self.service_location = attributes[:'service_location']
      end

      if attributes.key?(:'hide_member_in_dispatch_portal_flag')
        self.hide_member_in_dispatch_portal_flag = attributes[:'hide_member_in_dispatch_portal_flag']
      end

      if attributes.key?(:'calendar')
        self.calendar = attributes[:'calendar']
      end

      if attributes.key?(:'sales_default_location')
        self.sales_default_location = attributes[:'sales_default_location']
      end

      if attributes.key?(:'warehouse')
        self.warehouse = attributes[:'warehouse']
      end

      if attributes.key?(:'warehouse_bin')
        self.warehouse_bin = attributes[:'warehouse_bin']
      end

      if attributes.key?(:'mapi_name')
        self.mapi_name = attributes[:'mapi_name']
      end

      if attributes.key?(:'calendar_sync_integration_flag')
        self.calendar_sync_integration_flag = attributes[:'calendar_sync_integration_flag']
      end

      if attributes.key?(:'authentication_service_type')
        self.authentication_service_type = attributes[:'authentication_service_type']
      end

      if attributes.key?(:'timebased_one_time_password_activated')
        self.timebased_one_time_password_activated = attributes[:'timebased_one_time_password_activated']
      end

      if attributes.key?(:'auto_start_stopwatch')
        self.auto_start_stopwatch = attributes[:'auto_start_stopwatch']
      end

      if attributes.key?(:'auto_popup_quick_notes_with_stopwatch')
        self.auto_popup_quick_notes_with_stopwatch = attributes[:'auto_popup_quick_notes_with_stopwatch']
      end

      if attributes.key?(:'signature')
        self.signature = attributes[:'signature']
      end

      if attributes.key?(:'global_search_default_ticket_filter')
        self.global_search_default_ticket_filter = attributes[:'global_search_default_ticket_filter']
      end

      if attributes.key?(:'global_search_default_sort')
        self.global_search_default_sort = attributes[:'global_search_default_sort']
      end

      if attributes.key?(:'phone_source')
        self.phone_source = attributes[:'phone_source']
      end

      if attributes.key?(:'phone_integration_type')
        self.phone_integration_type = attributes[:'phone_integration_type']
      end

      if attributes.key?(:'use_browser_language_flag')
        self.use_browser_language_flag = attributes[:'use_browser_language_flag']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end

      if attributes.key?(:'copy_pod_layouts')
        self.copy_pod_layouts = attributes[:'copy_pod_layouts']
      end

      if attributes.key?(:'copy_shared_default_views')
        self.copy_shared_default_views = attributes[:'copy_shared_default_views']
      end

      if attributes.key?(:'copy_column_layouts_and_filters')
        self.copy_column_layouts_and_filters = attributes[:'copy_column_layouts_and_filters']
      end

      if attributes.key?(:'from_member_rec_id')
        self.from_member_rec_id = attributes[:'from_member_rec_id']
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @identifier.nil?
        invalid_properties.push('invalid value for "identifier", identifier cannot be nil.')
      end

      if @first_name.nil?
        invalid_properties.push('invalid value for "first_name", first_name cannot be nil.')
      end

      if @last_name.nil?
        invalid_properties.push('invalid value for "last_name", last_name cannot be nil.')
      end

      if @hire_date.nil?
        invalid_properties.push('invalid value for "hire_date", hire_date cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @identifier.nil?
      return false if @first_name.nil?
      return false if @last_name.nil?
      license_class_validator = EnumAttributeValidator.new('String', ["A", "C", "F", "X"])
      return false unless license_class_validator.valid?(@license_class)
      default_email_validator = EnumAttributeValidator.new('String', ["Office", "Mobile", "Home"])
      return false unless default_email_validator.valid?(@default_email)
      default_phone_validator = EnumAttributeValidator.new('String', ["Office", "Mobile", "Home"])
      return false unless default_phone_validator.valid?(@default_phone)
      return false if @hire_date.nil?
      company_activity_tab_format_validator = EnumAttributeValidator.new('String', ["SummaryList", "DetailList"])
      return false unless company_activity_tab_format_validator.valid?(@company_activity_tab_format)
      invoice_time_tab_format_validator = EnumAttributeValidator.new('String', ["SummaryList", "DetailList"])
      return false unless invoice_time_tab_format_validator.valid?(@invoice_time_tab_format)
      invoice_screen_default_tab_format_validator = EnumAttributeValidator.new('String', ["ShowInvoicingTab", "ShowAgreementInvoicingTab"])
      return false unless invoice_screen_default_tab_format_validator.valid?(@invoice_screen_default_tab_format)
      invoicing_display_options_validator = EnumAttributeValidator.new('String', ["RemainOnInvoicingScreen", "ShowRecentInvoices"])
      return false unless invoicing_display_options_validator.valid?(@invoicing_display_options)
      agreement_invoicing_display_options_validator = EnumAttributeValidator.new('String', ["RemainOnInvoicingScreen", "ShowRecentInvoices"])
      return false unless agreement_invoicing_display_options_validator.valid?(@agreement_invoicing_display_options)
      authentication_service_type_validator = EnumAttributeValidator.new('String', ["AuthAnvil", "GoogleAuthenticator", "Email"])
      return false unless authentication_service_type_validator.valid?(@authentication_service_type)
      global_search_default_ticket_filter_validator = EnumAttributeValidator.new('String', ["OpenRecords", "ClosedRecords", "AllRecords"])
      return false unless global_search_default_ticket_filter_validator.valid?(@global_search_default_ticket_filter)
      global_search_default_sort_validator = EnumAttributeValidator.new('String', ["None", "LastUpdatedDesc", "LastUpdatedAsc", "CreatedDesc", "CreatedAsc"])
      return false unless global_search_default_sort_validator.valid?(@global_search_default_sort)
      phone_integration_type_validator = EnumAttributeValidator.new('String', ["TAPI", "SKYPE", "NONE"])
      return false unless phone_integration_type_validator.valid?(@phone_integration_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] license_class Object to be assigned
    def license_class=(license_class)
      validator = EnumAttributeValidator.new('String', ["A", "C", "F", "X"])
      unless validator.valid?(license_class)
        fail ArgumentError, "invalid value for \"license_class\", must be one of #{validator.allowable_values}."
      end
      @license_class = license_class
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_email Object to be assigned
    def default_email=(default_email)
      validator = EnumAttributeValidator.new('String', ["Office", "Mobile", "Home"])
      unless validator.valid?(default_email)
        fail ArgumentError, "invalid value for \"default_email\", must be one of #{validator.allowable_values}."
      end
      @default_email = default_email
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] default_phone Object to be assigned
    def default_phone=(default_phone)
      validator = EnumAttributeValidator.new('String', ["Office", "Mobile", "Home"])
      unless validator.valid?(default_phone)
        fail ArgumentError, "invalid value for \"default_phone\", must be one of #{validator.allowable_values}."
      end
      @default_phone = default_phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] company_activity_tab_format Object to be assigned
    def company_activity_tab_format=(company_activity_tab_format)
      validator = EnumAttributeValidator.new('String', ["SummaryList", "DetailList"])
      unless validator.valid?(company_activity_tab_format)
        fail ArgumentError, "invalid value for \"company_activity_tab_format\", must be one of #{validator.allowable_values}."
      end
      @company_activity_tab_format = company_activity_tab_format
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_time_tab_format Object to be assigned
    def invoice_time_tab_format=(invoice_time_tab_format)
      validator = EnumAttributeValidator.new('String', ["SummaryList", "DetailList"])
      unless validator.valid?(invoice_time_tab_format)
        fail ArgumentError, "invalid value for \"invoice_time_tab_format\", must be one of #{validator.allowable_values}."
      end
      @invoice_time_tab_format = invoice_time_tab_format
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_screen_default_tab_format Object to be assigned
    def invoice_screen_default_tab_format=(invoice_screen_default_tab_format)
      validator = EnumAttributeValidator.new('String', ["ShowInvoicingTab", "ShowAgreementInvoicingTab"])
      unless validator.valid?(invoice_screen_default_tab_format)
        fail ArgumentError, "invalid value for \"invoice_screen_default_tab_format\", must be one of #{validator.allowable_values}."
      end
      @invoice_screen_default_tab_format = invoice_screen_default_tab_format
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoicing_display_options Object to be assigned
    def invoicing_display_options=(invoicing_display_options)
      validator = EnumAttributeValidator.new('String', ["RemainOnInvoicingScreen", "ShowRecentInvoices"])
      unless validator.valid?(invoicing_display_options)
        fail ArgumentError, "invalid value for \"invoicing_display_options\", must be one of #{validator.allowable_values}."
      end
      @invoicing_display_options = invoicing_display_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] agreement_invoicing_display_options Object to be assigned
    def agreement_invoicing_display_options=(agreement_invoicing_display_options)
      validator = EnumAttributeValidator.new('String', ["RemainOnInvoicingScreen", "ShowRecentInvoices"])
      unless validator.valid?(agreement_invoicing_display_options)
        fail ArgumentError, "invalid value for \"agreement_invoicing_display_options\", must be one of #{validator.allowable_values}."
      end
      @agreement_invoicing_display_options = agreement_invoicing_display_options
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] authentication_service_type Object to be assigned
    def authentication_service_type=(authentication_service_type)
      validator = EnumAttributeValidator.new('String', ["AuthAnvil", "GoogleAuthenticator", "Email"])
      unless validator.valid?(authentication_service_type)
        fail ArgumentError, "invalid value for \"authentication_service_type\", must be one of #{validator.allowable_values}."
      end
      @authentication_service_type = authentication_service_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] global_search_default_ticket_filter Object to be assigned
    def global_search_default_ticket_filter=(global_search_default_ticket_filter)
      validator = EnumAttributeValidator.new('String', ["OpenRecords", "ClosedRecords", "AllRecords"])
      unless validator.valid?(global_search_default_ticket_filter)
        fail ArgumentError, "invalid value for \"global_search_default_ticket_filter\", must be one of #{validator.allowable_values}."
      end
      @global_search_default_ticket_filter = global_search_default_ticket_filter
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] global_search_default_sort Object to be assigned
    def global_search_default_sort=(global_search_default_sort)
      validator = EnumAttributeValidator.new('String', ["None", "LastUpdatedDesc", "LastUpdatedAsc", "CreatedDesc", "CreatedAsc"])
      unless validator.valid?(global_search_default_sort)
        fail ArgumentError, "invalid value for \"global_search_default_sort\", must be one of #{validator.allowable_values}."
      end
      @global_search_default_sort = global_search_default_sort
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] phone_integration_type Object to be assigned
    def phone_integration_type=(phone_integration_type)
      validator = EnumAttributeValidator.new('String', ["TAPI", "SKYPE", "NONE"])
      unless validator.valid?(phone_integration_type)
        fail ArgumentError, "invalid value for \"phone_integration_type\", must be one of #{validator.allowable_values}."
      end
      @phone_integration_type = phone_integration_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          identifier == o.identifier &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          license_class == o.license_class &&
          default_email == o.default_email &&
          default_phone == o.default_phone &&
          hire_date == o.hire_date &&
          company_activity_tab_format == o.company_activity_tab_format &&
          invoice_time_tab_format == o.invoice_time_tab_format &&
          invoice_screen_default_tab_format == o.invoice_screen_default_tab_format &&
          invoicing_display_options == o.invoicing_display_options &&
          agreement_invoicing_display_options == o.agreement_invoicing_display_options &&
          id == o.id &&
          password == o.password &&
          middle_initial == o.middle_initial &&
          title == o.title &&
          report_card == o.report_card &&
          disable_online_flag == o.disable_online_flag &&
          enable_mobile_flag == o.enable_mobile_flag &&
          type == o.type &&
          employee_identifer == o.employee_identifer &&
          vendor_number == o.vendor_number &&
          notes == o.notes &&
          time_zone == o.time_zone &&
          country == o.country &&
          service_board_team_ids == o.service_board_team_ids &&
          enable_mobile_gps_flag == o.enable_mobile_gps_flag &&
          inactive_date == o.inactive_date &&
          inactive_flag == o.inactive_flag &&
          last_login == o.last_login &&
          photo == o.photo &&
          partner_portal_flag == o.partner_portal_flag &&
          client_id == o.client_id &&
          sts_user_admin_url == o.sts_user_admin_url &&
          token == o.token &&
          toast_notification_flag == o.toast_notification_flag &&
          member_personas == o.member_personas &&
          office365 == o.office365 &&
          office_email == o.office_email &&
          office_phone == o.office_phone &&
          office_extension == o.office_extension &&
          mobile_email == o.mobile_email &&
          mobile_phone == o.mobile_phone &&
          mobile_extension == o.mobile_extension &&
          home_email == o.home_email &&
          home_phone == o.home_phone &&
          home_extension == o.home_extension &&
          primary_email == o.primary_email &&
          default_location == o.default_location &&
          default_department == o.default_department &&
          reports_to == o.reports_to &&
          work_role == o.work_role &&
          work_type == o.work_type &&
          time_approver == o.time_approver &&
          expense_approver == o.expense_approver &&
          billable_forecast == o.billable_forecast &&
          daily_capacity == o.daily_capacity &&
          include_in_utilization_reporting_flag == o.include_in_utilization_reporting_flag &&
          require_expense_entry_flag == o.require_expense_entry_flag &&
          require_time_sheet_entry_flag == o.require_time_sheet_entry_flag &&
          require_start_and_end_time_on_time_entry_flag == o.require_start_and_end_time_on_time_entry_flag &&
          allow_in_cell_entry_on_time_sheet == o.allow_in_cell_entry_on_time_sheet &&
          enter_time_against_company_flag == o.enter_time_against_company_flag &&
          allow_expenses_entered_against_companies_flag == o.allow_expenses_entered_against_companies_flag &&
          time_reminder_email_flag == o.time_reminder_email_flag &&
          days_tolerance == o.days_tolerance &&
          minimum_hours == o.minimum_hours &&
          time_sheet_start_date == o.time_sheet_start_date &&
          service_default_location == o.service_default_location &&
          service_default_department == o.service_default_department &&
          service_default_board == o.service_default_board &&
          project_default_location == o.project_default_location &&
          project_default_department == o.project_default_department &&
          project_default_board == o.project_default_board &&
          schedule_default_location == o.schedule_default_location &&
          schedule_default_department == o.schedule_default_department &&
          schedule_capacity == o.schedule_capacity &&
          service_location == o.service_location &&
          hide_member_in_dispatch_portal_flag == o.hide_member_in_dispatch_portal_flag &&
          calendar == o.calendar &&
          sales_default_location == o.sales_default_location &&
          warehouse == o.warehouse &&
          warehouse_bin == o.warehouse_bin &&
          mapi_name == o.mapi_name &&
          calendar_sync_integration_flag == o.calendar_sync_integration_flag &&
          authentication_service_type == o.authentication_service_type &&
          timebased_one_time_password_activated == o.timebased_one_time_password_activated &&
          auto_start_stopwatch == o.auto_start_stopwatch &&
          auto_popup_quick_notes_with_stopwatch == o.auto_popup_quick_notes_with_stopwatch &&
          signature == o.signature &&
          global_search_default_ticket_filter == o.global_search_default_ticket_filter &&
          global_search_default_sort == o.global_search_default_sort &&
          phone_source == o.phone_source &&
          phone_integration_type == o.phone_integration_type &&
          use_browser_language_flag == o.use_browser_language_flag &&
          _info == o._info &&
          copy_pod_layouts == o.copy_pod_layouts &&
          copy_shared_default_views == o.copy_shared_default_views &&
          copy_column_layouts_and_filters == o.copy_column_layouts_and_filters &&
          from_member_rec_id == o.from_member_rec_id &&
          custom_fields == o.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [identifier, first_name, last_name, license_class, default_email, default_phone, hire_date, company_activity_tab_format, invoice_time_tab_format, invoice_screen_default_tab_format, invoicing_display_options, agreement_invoicing_display_options, id, password, middle_initial, title, report_card, disable_online_flag, enable_mobile_flag, type, employee_identifer, vendor_number, notes, time_zone, country, service_board_team_ids, enable_mobile_gps_flag, inactive_date, inactive_flag, last_login, photo, partner_portal_flag, client_id, sts_user_admin_url, token, toast_notification_flag, member_personas, office365, office_email, office_phone, office_extension, mobile_email, mobile_phone, mobile_extension, home_email, home_phone, home_extension, primary_email, default_location, default_department, reports_to, work_role, work_type, time_approver, expense_approver, billable_forecast, daily_capacity, include_in_utilization_reporting_flag, require_expense_entry_flag, require_time_sheet_entry_flag, require_start_and_end_time_on_time_entry_flag, allow_in_cell_entry_on_time_sheet, enter_time_against_company_flag, allow_expenses_entered_against_companies_flag, time_reminder_email_flag, days_tolerance, minimum_hours, time_sheet_start_date, service_default_location, service_default_department, service_default_board, project_default_location, project_default_department, project_default_board, schedule_default_location, schedule_default_department, schedule_capacity, service_location, hide_member_in_dispatch_portal_flag, calendar, sales_default_location, warehouse, warehouse_bin, mapi_name, calendar_sync_integration_flag, authentication_service_type, timebased_one_time_password_activated, auto_start_stopwatch, auto_popup_quick_notes_with_stopwatch, signature, global_search_default_ticket_filter, global_search_default_sort, phone_source, phone_integration_type, use_browser_language_flag, _info, copy_pod_layouts, copy_shared_default_views, copy_column_layouts_and_filters, from_member_rec_id, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
