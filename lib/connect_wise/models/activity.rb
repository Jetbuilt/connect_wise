=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class Activity
    #  Max length: 100;
    attr_accessor :name

    attr_accessor :id

    attr_accessor :type

    attr_accessor :company

    attr_accessor :contact

    #  Max length: 30;
    attr_accessor :phone_number

    #  Max length: 250;
    attr_accessor :email

    attr_accessor :status

    attr_accessor :opportunity

    attr_accessor :ticket

    attr_accessor :agreement

    attr_accessor :campaign

    attr_accessor :notes

    attr_accessor :date_start

    attr_accessor :date_end

    attr_accessor :assigned_by

    attr_accessor :assign_to

    attr_accessor :schedule_status

    attr_accessor :reminder

    attr_accessor :where

    attr_accessor :notify_flag

    attr_accessor :mobile_guid

    attr_accessor :currency

    attr_accessor :_info

    attr_accessor :custom_fields

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'id' => :'id',
        :'type' => :'type',
        :'company' => :'company',
        :'contact' => :'contact',
        :'phone_number' => :'phoneNumber',
        :'email' => :'email',
        :'status' => :'status',
        :'opportunity' => :'opportunity',
        :'ticket' => :'ticket',
        :'agreement' => :'agreement',
        :'campaign' => :'campaign',
        :'notes' => :'notes',
        :'date_start' => :'dateStart',
        :'date_end' => :'dateEnd',
        :'assigned_by' => :'assignedBy',
        :'assign_to' => :'assignTo',
        :'schedule_status' => :'scheduleStatus',
        :'reminder' => :'reminder',
        :'where' => :'where',
        :'notify_flag' => :'notifyFlag',
        :'mobile_guid' => :'mobileGuid',
        :'currency' => :'currency',
        :'_info' => :'_info',
        :'custom_fields' => :'customFields'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'id' => :'Integer',
        :'type' => :'ActivityTypeReference',
        :'company' => :'CompanyReference',
        :'contact' => :'ContactReference',
        :'phone_number' => :'String',
        :'email' => :'String',
        :'status' => :'ActivityStatusReference',
        :'opportunity' => :'OpportunityReference',
        :'ticket' => :'TicketReference',
        :'agreement' => :'AgreementReference',
        :'campaign' => :'CampaignReference',
        :'notes' => :'String',
        :'date_start' => :'Time',
        :'date_end' => :'Time',
        :'assigned_by' => :'MemberReference',
        :'assign_to' => :'MemberReference',
        :'schedule_status' => :'ScheduleStatusReference',
        :'reminder' => :'ReminderReference',
        :'where' => :'ServiceLocationReference',
        :'notify_flag' => :'Boolean',
        :'mobile_guid' => :'String',
        :'currency' => :'CurrencyReference',
        :'_info' => :'Hash<String, String>',
        :'custom_fields' => :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'notify_flag',
        :'mobile_guid',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::Activity` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::Activity`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'contact')
        self.contact = attributes[:'contact']
      end

      if attributes.key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'opportunity')
        self.opportunity = attributes[:'opportunity']
      end

      if attributes.key?(:'ticket')
        self.ticket = attributes[:'ticket']
      end

      if attributes.key?(:'agreement')
        self.agreement = attributes[:'agreement']
      end

      if attributes.key?(:'campaign')
        self.campaign = attributes[:'campaign']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'date_start')
        self.date_start = attributes[:'date_start']
      end

      if attributes.key?(:'date_end')
        self.date_end = attributes[:'date_end']
      end

      if attributes.key?(:'assigned_by')
        self.assigned_by = attributes[:'assigned_by']
      end

      if attributes.key?(:'assign_to')
        self.assign_to = attributes[:'assign_to']
      end

      if attributes.key?(:'schedule_status')
        self.schedule_status = attributes[:'schedule_status']
      end

      if attributes.key?(:'reminder')
        self.reminder = attributes[:'reminder']
      end

      if attributes.key?(:'where')
        self.where = attributes[:'where']
      end

      if attributes.key?(:'notify_flag')
        self.notify_flag = attributes[:'notify_flag']
      end

      if attributes.key?(:'mobile_guid')
        self.mobile_guid = attributes[:'mobile_guid']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          id == o.id &&
          type == o.type &&
          company == o.company &&
          contact == o.contact &&
          phone_number == o.phone_number &&
          email == o.email &&
          status == o.status &&
          opportunity == o.opportunity &&
          ticket == o.ticket &&
          agreement == o.agreement &&
          campaign == o.campaign &&
          notes == o.notes &&
          date_start == o.date_start &&
          date_end == o.date_end &&
          assigned_by == o.assigned_by &&
          assign_to == o.assign_to &&
          schedule_status == o.schedule_status &&
          reminder == o.reminder &&
          where == o.where &&
          notify_flag == o.notify_flag &&
          mobile_guid == o.mobile_guid &&
          currency == o.currency &&
          _info == o._info &&
          custom_fields == o.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, id, type, company, contact, phone_number, email, status, opportunity, ticket, agreement, campaign, notes, date_start, date_end, assigned_by, assign_to, schedule_status, reminder, where, notify_flag, mobile_guid, currency, _info, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
