# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class MemberDeactivation
    attr_accessor :activity, :service_team, :workflow_email, :service_status_workflow, :ticket_template, :opportunity,
                  :sales_team, :project_manager, :project_time_approver, :project_expense_approver, :knowledge_base_article, :my_company_president, :my_company_coo, :my_company_controller, :my_company_dispatch, :my_company_service_manager, :my_company_duty_manager_role, :department_manager, :dispatch_member, :service_manager, :duty_manager, :send_from_email_notify

    # A list of customers for which the member holds a team role
    attr_accessor :company_team

    # By default, this is set to false             If there is any open timesheets, system will return error message             that there is open timesheets still attached to this member             If user would like to delete member with open timesheets, they can set this boolean to TRUE             System will delete member and any associated open timesheets
    attr_accessor :delete_open_time_sheets_flag

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        activity: :activity,
        service_team: :serviceTeam,
        company_team: :companyTeam,
        workflow_email: :workflowEmail,
        service_status_workflow: :serviceStatusWorkflow,
        ticket_template: :ticketTemplate,
        opportunity: :opportunity,
        sales_team: :salesTeam,
        project_manager: :projectManager,
        project_time_approver: :projectTimeApprover,
        project_expense_approver: :projectExpenseApprover,
        knowledge_base_article: :knowledgeBaseArticle,
        my_company_president: :myCompanyPresident,
        my_company_coo: :myCompanyCOO,
        my_company_controller: :myCompanyController,
        my_company_dispatch: :myCompanyDispatch,
        my_company_service_manager: :myCompanyServiceManager,
        my_company_duty_manager_role: :myCompanyDutyManagerRole,
        department_manager: :departmentManager,
        dispatch_member: :dispatchMember,
        service_manager: :serviceManager,
        duty_manager: :dutyManager,
        send_from_email_notify: :sendFromEmailNotify,
        delete_open_time_sheets_flag: :deleteOpenTimeSheetsFlag
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        activity: :MemberDeactivationItem,
        service_team: :MemberDeactivationItem,
        company_team: :'Array<MemberDeactivationCompanyTeam>',
        workflow_email: :MemberDeactivationItem,
        service_status_workflow: :'Array<MemberDeactivationStatusWorkflow>',
        ticket_template: :MemberDeactivationItem,
        opportunity: :MemberDeactivationItem,
        sales_team: :MemberDeactivationItem,
        project_manager: :MemberDeactivationItem,
        project_time_approver: :MemberDeactivationItem,
        project_expense_approver: :MemberDeactivationItem,
        knowledge_base_article: :MemberDeactivationItem,
        my_company_president: :MemberDeactivationItem,
        my_company_coo: :MemberDeactivationItem,
        my_company_controller: :MemberDeactivationItem,
        my_company_dispatch: :MemberDeactivationItem,
        my_company_service_manager: :MemberDeactivationItem,
        my_company_duty_manager_role: :MemberDeactivationItem,
        department_manager: :MemberDeactivationItem,
        dispatch_member: :MemberDeactivationItem,
        service_manager: :MemberDeactivationItem,
        duty_manager: :MemberDeactivationItem,
        send_from_email_notify: :MemberDeactivationItem,
        delete_open_time_sheets_flag: :Boolean
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
                :delete_open_time_sheets_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `ConnectWise::MemberDeactivation` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless acceptable_attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `ConnectWise::MemberDeactivation`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.activity = attributes[:activity] if attributes.key?(:activity)

      self.service_team = attributes[:service_team] if attributes.key?(:service_team)

      if attributes.key?(:company_team) && (value = attributes[:company_team]).is_a?(Array)
        self.company_team = value
      end

      self.workflow_email = attributes[:workflow_email] if attributes.key?(:workflow_email)

      if attributes.key?(:service_status_workflow) && (value = attributes[:service_status_workflow]).is_a?(Array)
        self.service_status_workflow = value
      end

      self.ticket_template = attributes[:ticket_template] if attributes.key?(:ticket_template)

      self.opportunity = attributes[:opportunity] if attributes.key?(:opportunity)

      self.sales_team = attributes[:sales_team] if attributes.key?(:sales_team)

      self.project_manager = attributes[:project_manager] if attributes.key?(:project_manager)

      self.project_time_approver = attributes[:project_time_approver] if attributes.key?(:project_time_approver)

      if attributes.key?(:project_expense_approver)
        self.project_expense_approver = attributes[:project_expense_approver]
      end

      self.knowledge_base_article = attributes[:knowledge_base_article] if attributes.key?(:knowledge_base_article)

      self.my_company_president = attributes[:my_company_president] if attributes.key?(:my_company_president)

      self.my_company_coo = attributes[:my_company_coo] if attributes.key?(:my_company_coo)

      self.my_company_controller = attributes[:my_company_controller] if attributes.key?(:my_company_controller)

      self.my_company_dispatch = attributes[:my_company_dispatch] if attributes.key?(:my_company_dispatch)

      if attributes.key?(:my_company_service_manager)
        self.my_company_service_manager = attributes[:my_company_service_manager]
      end

      if attributes.key?(:my_company_duty_manager_role)
        self.my_company_duty_manager_role = attributes[:my_company_duty_manager_role]
      end

      self.department_manager = attributes[:department_manager] if attributes.key?(:department_manager)

      self.dispatch_member = attributes[:dispatch_member] if attributes.key?(:dispatch_member)

      self.service_manager = attributes[:service_manager] if attributes.key?(:service_manager)

      self.duty_manager = attributes[:duty_manager] if attributes.key?(:duty_manager)

      self.send_from_email_notify = attributes[:send_from_email_notify] if attributes.key?(:send_from_email_notify)

      return unless attributes.key?(:delete_open_time_sheets_flag)

      self.delete_open_time_sheets_flag = attributes[:delete_open_time_sheets_flag]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        activity == other.activity &&
        service_team == other.service_team &&
        company_team == other.company_team &&
        workflow_email == other.workflow_email &&
        service_status_workflow == other.service_status_workflow &&
        ticket_template == other.ticket_template &&
        opportunity == other.opportunity &&
        sales_team == other.sales_team &&
        project_manager == other.project_manager &&
        project_time_approver == other.project_time_approver &&
        project_expense_approver == other.project_expense_approver &&
        knowledge_base_article == other.knowledge_base_article &&
        my_company_president == other.my_company_president &&
        my_company_coo == other.my_company_coo &&
        my_company_controller == other.my_company_controller &&
        my_company_dispatch == other.my_company_dispatch &&
        my_company_service_manager == other.my_company_service_manager &&
        my_company_duty_manager_role == other.my_company_duty_manager_role &&
        department_manager == other.department_manager &&
        dispatch_member == other.dispatch_member &&
        service_manager == other.service_manager &&
        duty_manager == other.duty_manager &&
        send_from_email_notify == other.send_from_email_notify &&
        delete_open_time_sheets_flag == other.delete_open_time_sheets_flag
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [activity, service_team, company_team, workflow_email, service_status_workflow, ticket_template, opportunity,
       sales_team, project_manager, project_time_approver, project_expense_approver, knowledge_base_article, my_company_president, my_company_coo, my_company_controller, my_company_dispatch, my_company_service_manager, my_company_duty_manager_role, department_manager, dispatch_member, service_manager, duty_manager, send_from_email_notify, delete_open_time_sheets_flag].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
