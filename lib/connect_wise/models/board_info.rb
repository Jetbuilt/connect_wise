=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class BoardInfo
    attr_accessor :id

    attr_accessor :name

    attr_accessor :location

    attr_accessor :department

    attr_accessor :project_flag

    attr_accessor :inactive_flag

    attr_accessor :closed_loop_discussions_flag

    attr_accessor :closed_loop_internal_analysis_flag

    attr_accessor :closed_loop_resolution_flag

    attr_accessor :closed_loop_all_flag

    attr_accessor :problem_sort

    attr_accessor :internal_analysis_sort

    attr_accessor :resolution_sort

    attr_accessor :all_sort

    attr_accessor :_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'location' => :'location',
        :'department' => :'department',
        :'project_flag' => :'projectFlag',
        :'inactive_flag' => :'inactiveFlag',
        :'closed_loop_discussions_flag' => :'closedLoopDiscussionsFlag',
        :'closed_loop_internal_analysis_flag' => :'closedLoopInternalAnalysisFlag',
        :'closed_loop_resolution_flag' => :'closedLoopResolutionFlag',
        :'closed_loop_all_flag' => :'closedLoopAllFlag',
        :'problem_sort' => :'problemSort',
        :'internal_analysis_sort' => :'internalAnalysisSort',
        :'resolution_sort' => :'resolutionSort',
        :'all_sort' => :'allSort',
        :'_info' => :'_info'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'name' => :'String',
        :'location' => :'SystemLocationReference',
        :'department' => :'SystemDepartmentReference',
        :'project_flag' => :'Boolean',
        :'inactive_flag' => :'Boolean',
        :'closed_loop_discussions_flag' => :'Boolean',
        :'closed_loop_internal_analysis_flag' => :'Boolean',
        :'closed_loop_resolution_flag' => :'Boolean',
        :'closed_loop_all_flag' => :'Boolean',
        :'problem_sort' => :'String',
        :'internal_analysis_sort' => :'String',
        :'resolution_sort' => :'String',
        :'all_sort' => :'String',
        :'_info' => :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'project_flag',
        :'inactive_flag',
        :'closed_loop_discussions_flag',
        :'closed_loop_internal_analysis_flag',
        :'closed_loop_resolution_flag',
        :'closed_loop_all_flag',
        :'problem_sort',
        :'internal_analysis_sort',
        :'resolution_sort',
        :'all_sort',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::BoardInfo` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::BoardInfo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'department')
        self.department = attributes[:'department']
      end

      if attributes.key?(:'project_flag')
        self.project_flag = attributes[:'project_flag']
      end

      if attributes.key?(:'inactive_flag')
        self.inactive_flag = attributes[:'inactive_flag']
      end

      if attributes.key?(:'closed_loop_discussions_flag')
        self.closed_loop_discussions_flag = attributes[:'closed_loop_discussions_flag']
      end

      if attributes.key?(:'closed_loop_internal_analysis_flag')
        self.closed_loop_internal_analysis_flag = attributes[:'closed_loop_internal_analysis_flag']
      end

      if attributes.key?(:'closed_loop_resolution_flag')
        self.closed_loop_resolution_flag = attributes[:'closed_loop_resolution_flag']
      end

      if attributes.key?(:'closed_loop_all_flag')
        self.closed_loop_all_flag = attributes[:'closed_loop_all_flag']
      end

      if attributes.key?(:'problem_sort')
        self.problem_sort = attributes[:'problem_sort']
      end

      if attributes.key?(:'internal_analysis_sort')
        self.internal_analysis_sort = attributes[:'internal_analysis_sort']
      end

      if attributes.key?(:'resolution_sort')
        self.resolution_sort = attributes[:'resolution_sort']
      end

      if attributes.key?(:'all_sort')
        self.all_sort = attributes[:'all_sort']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      problem_sort_validator = EnumAttributeValidator.new('String', ["Ascending", "Descending"])
      return false unless problem_sort_validator.valid?(@problem_sort)
      internal_analysis_sort_validator = EnumAttributeValidator.new('String', ["Ascending", "Descending"])
      return false unless internal_analysis_sort_validator.valid?(@internal_analysis_sort)
      resolution_sort_validator = EnumAttributeValidator.new('String', ["Ascending", "Descending"])
      return false unless resolution_sort_validator.valid?(@resolution_sort)
      all_sort_validator = EnumAttributeValidator.new('String', ["Ascending", "Descending"])
      return false unless all_sort_validator.valid?(@all_sort)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] problem_sort Object to be assigned
    def problem_sort=(problem_sort)
      validator = EnumAttributeValidator.new('String', ["Ascending", "Descending"])
      unless validator.valid?(problem_sort)
        fail ArgumentError, "invalid value for \"problem_sort\", must be one of #{validator.allowable_values}."
      end
      @problem_sort = problem_sort
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] internal_analysis_sort Object to be assigned
    def internal_analysis_sort=(internal_analysis_sort)
      validator = EnumAttributeValidator.new('String', ["Ascending", "Descending"])
      unless validator.valid?(internal_analysis_sort)
        fail ArgumentError, "invalid value for \"internal_analysis_sort\", must be one of #{validator.allowable_values}."
      end
      @internal_analysis_sort = internal_analysis_sort
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] resolution_sort Object to be assigned
    def resolution_sort=(resolution_sort)
      validator = EnumAttributeValidator.new('String', ["Ascending", "Descending"])
      unless validator.valid?(resolution_sort)
        fail ArgumentError, "invalid value for \"resolution_sort\", must be one of #{validator.allowable_values}."
      end
      @resolution_sort = resolution_sort
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] all_sort Object to be assigned
    def all_sort=(all_sort)
      validator = EnumAttributeValidator.new('String', ["Ascending", "Descending"])
      unless validator.valid?(all_sort)
        fail ArgumentError, "invalid value for \"all_sort\", must be one of #{validator.allowable_values}."
      end
      @all_sort = all_sort
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          location == o.location &&
          department == o.department &&
          project_flag == o.project_flag &&
          inactive_flag == o.inactive_flag &&
          closed_loop_discussions_flag == o.closed_loop_discussions_flag &&
          closed_loop_internal_analysis_flag == o.closed_loop_internal_analysis_flag &&
          closed_loop_resolution_flag == o.closed_loop_resolution_flag &&
          closed_loop_all_flag == o.closed_loop_all_flag &&
          problem_sort == o.problem_sort &&
          internal_analysis_sort == o.internal_analysis_sort &&
          resolution_sort == o.resolution_sort &&
          all_sort == o.all_sort &&
          _info == o._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, location, department, project_flag, inactive_flag, closed_loop_discussions_flag, closed_loop_internal_analysis_flag, closed_loop_resolution_flag, closed_loop_all_flag, problem_sort, internal_analysis_sort, resolution_sort, all_sort, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
