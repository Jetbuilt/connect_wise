# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class UnpostedProcurement
    attr_accessor :id, :description, :unposted_product_id, :location_id, :department_id, :procurement_type,
                  :purchase_order, :purchase_date, :tracking_number, :billing_terms, :currency, :total, :tax_code, :item_taxable_flag, :purchase_order_taxable_flag, :state_tax_xref, :state_tax_amount, :county_tax_xref, :county_tax_amount, :city_tax_xref, :city_tax_amount, :country_tax_xref, :country_tax_amount, :composite_tax_xref, :composite_tax_amount, :level_six_tax_xref, :level_six_tax_amount, :tax_total, :customer, :vendor, :vendor_account_number, :vendor_invoice_number, :vendor_invoice_date, :tax_freight_flag, :freight_tax_total, :freight_cost, :date_closed, :_info

    # Used to determine if Avalara tax is enabled.
    attr_accessor :avalara_tax_flag

    # Set to true if transaction is taxable at the state level.
    attr_accessor :state_tax_flag

    # Set to true if transaction is taxable at the county level.
    attr_accessor :county_tax_flag

    # Set to true if transaction is taxable at the city level.
    attr_accessor :city_tax_flag

    # Set to true if transaction is taxable at the country level.
    attr_accessor :country_tax_flag

    # Set to true if transaction is taxable at the composite level.
    attr_accessor :composite_tax_flag

    # Set to true if transaction is taxable at level six.
    attr_accessor :level_six_tax_flag

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        id: :id,
        description: :description,
        unposted_product_id: :unpostedProductId,
        location_id: :locationId,
        department_id: :departmentId,
        procurement_type: :procurementType,
        purchase_order: :purchaseOrder,
        purchase_date: :purchaseDate,
        tracking_number: :trackingNumber,
        billing_terms: :billingTerms,
        currency: :currency,
        total: :total,
        tax_code: :taxCode,
        avalara_tax_flag: :avalaraTaxFlag,
        item_taxable_flag: :itemTaxableFlag,
        purchase_order_taxable_flag: :purchaseOrderTaxableFlag,
        state_tax_flag: :stateTaxFlag,
        state_tax_xref: :stateTaxXref,
        state_tax_amount: :stateTaxAmount,
        county_tax_flag: :countyTaxFlag,
        county_tax_xref: :countyTaxXref,
        county_tax_amount: :countyTaxAmount,
        city_tax_flag: :cityTaxFlag,
        city_tax_xref: :cityTaxXref,
        city_tax_amount: :cityTaxAmount,
        country_tax_flag: :countryTaxFlag,
        country_tax_xref: :countryTaxXref,
        country_tax_amount: :countryTaxAmount,
        composite_tax_flag: :compositeTaxFlag,
        composite_tax_xref: :compositeTaxXref,
        composite_tax_amount: :compositeTaxAmount,
        level_six_tax_flag: :levelSixTaxFlag,
        level_six_tax_xref: :levelSixTaxXref,
        level_six_tax_amount: :levelSixTaxAmount,
        tax_total: :taxTotal,
        customer: :customer,
        vendor: :vendor,
        vendor_account_number: :vendorAccountNumber,
        vendor_invoice_number: :vendorInvoiceNumber,
        vendor_invoice_date: :vendorInvoiceDate,
        tax_freight_flag: :taxFreightFlag,
        freight_tax_total: :freightTaxTotal,
        freight_cost: :freightCost,
        date_closed: :dateClosed,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        id: :Integer,
        description: :String,
        unposted_product_id: :String,
        location_id: :Integer,
        department_id: :Integer,
        procurement_type: :String,
        purchase_order: :PurchaseOrderReference,
        purchase_date: :String,
        tracking_number: :String,
        billing_terms: :BillingTermsReference,
        currency: :CurrencyReference,
        total: :Float,
        tax_code: :TaxCodeReference,
        avalara_tax_flag: :Boolean,
        item_taxable_flag: :Boolean,
        purchase_order_taxable_flag: :Boolean,
        state_tax_flag: :Boolean,
        state_tax_xref: :String,
        state_tax_amount: :Float,
        county_tax_flag: :Boolean,
        county_tax_xref: :String,
        county_tax_amount: :Float,
        city_tax_flag: :Boolean,
        city_tax_xref: :String,
        city_tax_amount: :Float,
        country_tax_flag: :Boolean,
        country_tax_xref: :String,
        country_tax_amount: :Float,
        composite_tax_flag: :Boolean,
        composite_tax_xref: :String,
        composite_tax_amount: :Float,
        level_six_tax_flag: :Boolean,
        level_six_tax_xref: :String,
        level_six_tax_amount: :Float,
        tax_total: :Float,
        customer: :CompanyReference,
        vendor: :CompanyReference,
        vendor_account_number: :String,
        vendor_invoice_number: :String,
        vendor_invoice_date: :String,
        tax_freight_flag: :Boolean,
        freight_tax_total: :Float,
        freight_cost: :Float,
        date_closed: :String,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                location_id
                department_id
                procurement_type
                total
                avalara_tax_flag
                item_taxable_flag
                purchase_order_taxable_flag
                state_tax_flag
                state_tax_amount
                county_tax_flag
                county_tax_amount
                city_tax_flag
                city_tax_amount
                country_tax_flag
                country_tax_amount
                composite_tax_flag
                composite_tax_amount
                level_six_tax_flag
                level_six_tax_amount
                tax_total
                tax_freight_flag
                freight_tax_total
                freight_cost
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `ConnectWise::UnpostedProcurement` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless acceptable_attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `ConnectWise::UnpostedProcurement`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.id = attributes[:id] if attributes.key?(:id)

      self.description = attributes[:description] if attributes.key?(:description)

      self.unposted_product_id = attributes[:unposted_product_id] if attributes.key?(:unposted_product_id)

      self.location_id = attributes[:location_id] if attributes.key?(:location_id)

      self.department_id = attributes[:department_id] if attributes.key?(:department_id)

      self.procurement_type = attributes[:procurement_type] if attributes.key?(:procurement_type)

      self.purchase_order = attributes[:purchase_order] if attributes.key?(:purchase_order)

      self.purchase_date = attributes[:purchase_date] if attributes.key?(:purchase_date)

      self.tracking_number = attributes[:tracking_number] if attributes.key?(:tracking_number)

      self.billing_terms = attributes[:billing_terms] if attributes.key?(:billing_terms)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      self.total = attributes[:total] if attributes.key?(:total)

      self.tax_code = attributes[:tax_code] if attributes.key?(:tax_code)

      self.avalara_tax_flag = attributes[:avalara_tax_flag] if attributes.key?(:avalara_tax_flag)

      self.item_taxable_flag = attributes[:item_taxable_flag] if attributes.key?(:item_taxable_flag)

      if attributes.key?(:purchase_order_taxable_flag)
        self.purchase_order_taxable_flag = attributes[:purchase_order_taxable_flag]
      end

      self.state_tax_flag = attributes[:state_tax_flag] if attributes.key?(:state_tax_flag)

      self.state_tax_xref = attributes[:state_tax_xref] if attributes.key?(:state_tax_xref)

      self.state_tax_amount = attributes[:state_tax_amount] if attributes.key?(:state_tax_amount)

      self.county_tax_flag = attributes[:county_tax_flag] if attributes.key?(:county_tax_flag)

      self.county_tax_xref = attributes[:county_tax_xref] if attributes.key?(:county_tax_xref)

      self.county_tax_amount = attributes[:county_tax_amount] if attributes.key?(:county_tax_amount)

      self.city_tax_flag = attributes[:city_tax_flag] if attributes.key?(:city_tax_flag)

      self.city_tax_xref = attributes[:city_tax_xref] if attributes.key?(:city_tax_xref)

      self.city_tax_amount = attributes[:city_tax_amount] if attributes.key?(:city_tax_amount)

      self.country_tax_flag = attributes[:country_tax_flag] if attributes.key?(:country_tax_flag)

      self.country_tax_xref = attributes[:country_tax_xref] if attributes.key?(:country_tax_xref)

      self.country_tax_amount = attributes[:country_tax_amount] if attributes.key?(:country_tax_amount)

      self.composite_tax_flag = attributes[:composite_tax_flag] if attributes.key?(:composite_tax_flag)

      self.composite_tax_xref = attributes[:composite_tax_xref] if attributes.key?(:composite_tax_xref)

      self.composite_tax_amount = attributes[:composite_tax_amount] if attributes.key?(:composite_tax_amount)

      self.level_six_tax_flag = attributes[:level_six_tax_flag] if attributes.key?(:level_six_tax_flag)

      self.level_six_tax_xref = attributes[:level_six_tax_xref] if attributes.key?(:level_six_tax_xref)

      self.level_six_tax_amount = attributes[:level_six_tax_amount] if attributes.key?(:level_six_tax_amount)

      self.tax_total = attributes[:tax_total] if attributes.key?(:tax_total)

      self.customer = attributes[:customer] if attributes.key?(:customer)

      self.vendor = attributes[:vendor] if attributes.key?(:vendor)

      self.vendor_account_number = attributes[:vendor_account_number] if attributes.key?(:vendor_account_number)

      self.vendor_invoice_number = attributes[:vendor_invoice_number] if attributes.key?(:vendor_invoice_number)

      self.vendor_invoice_date = attributes[:vendor_invoice_date] if attributes.key?(:vendor_invoice_date)

      self.tax_freight_flag = attributes[:tax_freight_flag] if attributes.key?(:tax_freight_flag)

      self.freight_tax_total = attributes[:freight_tax_total] if attributes.key?(:freight_tax_total)

      self.freight_cost = attributes[:freight_cost] if attributes.key?(:freight_cost)

      self.date_closed = attributes[:date_closed] if attributes.key?(:date_closed)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      procurement_type_validator = EnumAttributeValidator.new('String', %w[Purchase Adjustment Transfer])
      return false unless procurement_type_validator.valid?(@procurement_type)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] procurement_type Object to be assigned
    def procurement_type=(procurement_type)
      validator = EnumAttributeValidator.new('String', %w[Purchase Adjustment Transfer])
      unless validator.valid?(procurement_type)
        raise ArgumentError, "invalid value for \"procurement_type\", must be one of #{validator.allowable_values}."
      end

      @procurement_type = procurement_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        id == other.id &&
        description == other.description &&
        unposted_product_id == other.unposted_product_id &&
        location_id == other.location_id &&
        department_id == other.department_id &&
        procurement_type == other.procurement_type &&
        purchase_order == other.purchase_order &&
        purchase_date == other.purchase_date &&
        tracking_number == other.tracking_number &&
        billing_terms == other.billing_terms &&
        currency == other.currency &&
        total == other.total &&
        tax_code == other.tax_code &&
        avalara_tax_flag == other.avalara_tax_flag &&
        item_taxable_flag == other.item_taxable_flag &&
        purchase_order_taxable_flag == other.purchase_order_taxable_flag &&
        state_tax_flag == other.state_tax_flag &&
        state_tax_xref == other.state_tax_xref &&
        state_tax_amount == other.state_tax_amount &&
        county_tax_flag == other.county_tax_flag &&
        county_tax_xref == other.county_tax_xref &&
        county_tax_amount == other.county_tax_amount &&
        city_tax_flag == other.city_tax_flag &&
        city_tax_xref == other.city_tax_xref &&
        city_tax_amount == other.city_tax_amount &&
        country_tax_flag == other.country_tax_flag &&
        country_tax_xref == other.country_tax_xref &&
        country_tax_amount == other.country_tax_amount &&
        composite_tax_flag == other.composite_tax_flag &&
        composite_tax_xref == other.composite_tax_xref &&
        composite_tax_amount == other.composite_tax_amount &&
        level_six_tax_flag == other.level_six_tax_flag &&
        level_six_tax_xref == other.level_six_tax_xref &&
        level_six_tax_amount == other.level_six_tax_amount &&
        tax_total == other.tax_total &&
        customer == other.customer &&
        vendor == other.vendor &&
        vendor_account_number == other.vendor_account_number &&
        vendor_invoice_number == other.vendor_invoice_number &&
        vendor_invoice_date == other.vendor_invoice_date &&
        tax_freight_flag == other.tax_freight_flag &&
        freight_tax_total == other.freight_tax_total &&
        freight_cost == other.freight_cost &&
        date_closed == other.date_closed &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, description, unposted_product_id, location_id, department_id, procurement_type, purchase_order,
       purchase_date, tracking_number, billing_terms, currency, total, tax_code, avalara_tax_flag, item_taxable_flag, purchase_order_taxable_flag, state_tax_flag, state_tax_xref, state_tax_amount, county_tax_flag, county_tax_xref, county_tax_amount, city_tax_flag, city_tax_xref, city_tax_amount, country_tax_flag, country_tax_xref, country_tax_amount, composite_tax_flag, composite_tax_xref, composite_tax_amount, level_six_tax_flag, level_six_tax_xref, level_six_tax_amount, tax_total, customer, vendor, vendor_account_number, vendor_invoice_number, vendor_invoice_date, tax_freight_flag, freight_tax_total, freight_cost, date_closed, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
