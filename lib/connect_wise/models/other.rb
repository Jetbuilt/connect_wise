# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class Other
    #  Max length: 50;
    attr_accessor :default_from_address

    #  Max length: 100;
    attr_accessor :portal_url_override

    #  Max length: 100;
    attr_accessor :site_url

    attr_accessor :server_time_zone, :default_calendar, :default_address_format, :locale, :id, :default_ldap, :contact_sync, :use_ssl_flag, :sync_leads_flag, :include_portal_link_flag, :use_expanded_format_time_flag, :use_expanded_format_activity_flag, :disable_z_admin_login_flag, :_info

    #  Max length: 200;
    attr_accessor :logo_path

    # If true, all Members time zone will also be set to serverTimeZone. Otherwise, only My Company time zone will be updated.
    attr_accessor :update_member_time_zones_flag

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        default_from_address: :defaultFromAddress,
        portal_url_override: :portalUrlOverride,
        site_url: :siteUrl,
        server_time_zone: :serverTimeZone,
        default_calendar: :defaultCalendar,
        default_address_format: :defaultAddressFormat,
        locale: :locale,
        id: :id,
        default_ldap: :defaultLdap,
        logo_path: :logoPath,
        contact_sync: :contactSync,
        use_ssl_flag: :useSslFlag,
        sync_leads_flag: :syncLeadsFlag,
        include_portal_link_flag: :includePortalLinkFlag,
        use_expanded_format_time_flag: :useExpandedFormatTimeFlag,
        use_expanded_format_activity_flag: :useExpandedFormatActivityFlag,
        disable_z_admin_login_flag: :disableZAdminLoginFlag,
        update_member_time_zones_flag: :updateMemberTimeZonesFlag,
        _info: :_info
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        default_from_address: :String,
        portal_url_override: :String,
        site_url: :String,
        server_time_zone: :TimeZoneSetupReference,
        default_calendar: :CalendarReference,
        default_address_format: :AddressFormatReference,
        locale: :LocaleReference,
        id: :Integer,
        default_ldap: :LdapConfigurationReference,
        logo_path: :String,
        contact_sync: :String,
        use_ssl_flag: :Boolean,
        sync_leads_flag: :Boolean,
        include_portal_link_flag: :Boolean,
        use_expanded_format_time_flag: :Boolean,
        use_expanded_format_activity_flag: :Boolean,
        disable_z_admin_login_flag: :Boolean,
        update_member_time_zones_flag: :Boolean,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                contact_sync
                use_ssl_flag
                sync_leads_flag
                include_portal_link_flag
                use_expanded_format_time_flag
                use_expanded_format_activity_flag
                disable_z_admin_login_flag
                update_member_time_zones_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::Other` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::Other`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect unless acceptable_attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.default_from_address = (attributes[:default_from_address] if attributes.key?(:default_from_address))

      self.portal_url_override = (attributes[:portal_url_override] if attributes.key?(:portal_url_override))

      self.site_url = (attributes[:site_url] if attributes.key?(:site_url))

      self.server_time_zone = (attributes[:server_time_zone] if attributes.key?(:server_time_zone))

      self.default_calendar = (attributes[:default_calendar] if attributes.key?(:default_calendar))

      self.default_address_format = (attributes[:default_address_format] if attributes.key?(:default_address_format))

      self.locale = (attributes[:locale] if attributes.key?(:locale))

      self.id = attributes[:id] if attributes.key?(:id)

      self.default_ldap = attributes[:default_ldap] if attributes.key?(:default_ldap)

      self.logo_path = attributes[:logo_path] if attributes.key?(:logo_path)

      self.contact_sync = attributes[:contact_sync] if attributes.key?(:contact_sync)

      self.use_ssl_flag = attributes[:use_ssl_flag] if attributes.key?(:use_ssl_flag)

      self.sync_leads_flag = attributes[:sync_leads_flag] if attributes.key?(:sync_leads_flag)

      self.include_portal_link_flag = attributes[:include_portal_link_flag] if attributes.key?(:include_portal_link_flag)

      self.use_expanded_format_time_flag = attributes[:use_expanded_format_time_flag] if attributes.key?(:use_expanded_format_time_flag)

      self.use_expanded_format_activity_flag = attributes[:use_expanded_format_activity_flag] if attributes.key?(:use_expanded_format_activity_flag)

      self.disable_z_admin_login_flag = attributes[:disable_z_admin_login_flag] if attributes.key?(:disable_z_admin_login_flag)

      self.update_member_time_zones_flag = attributes[:update_member_time_zones_flag] if attributes.key?(:update_member_time_zones_flag)

      return unless attributes.key?(:_info)

      if (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "default_from_address", default_from_address cannot be nil.') if @default_from_address.nil?

      invalid_properties.push('invalid value for "portal_url_override", portal_url_override cannot be nil.') if @portal_url_override.nil?

      invalid_properties.push('invalid value for "site_url", site_url cannot be nil.') if @site_url.nil?

      invalid_properties.push('invalid value for "server_time_zone", server_time_zone cannot be nil.') if @server_time_zone.nil?

      invalid_properties.push('invalid value for "default_calendar", default_calendar cannot be nil.') if @default_calendar.nil?

      invalid_properties.push('invalid value for "default_address_format", default_address_format cannot be nil.') if @default_address_format.nil?

      invalid_properties.push('invalid value for "locale", locale cannot be nil.') if @locale.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @default_from_address.nil?
      return false if @portal_url_override.nil?
      return false if @site_url.nil?
      return false if @server_time_zone.nil?
      return false if @default_calendar.nil?
      return false if @default_address_format.nil?
      return false if @locale.nil?

      contact_sync_validator = EnumAttributeValidator.new('String', %w[FL LF CFL CLF])
      return false unless contact_sync_validator.valid?(@contact_sync)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] default_from_address Value to be assigned
    def default_from_address=(default_from_address)
      raise ArgumentError, 'default_from_address cannot be nil' if default_from_address.nil?

      @default_from_address = default_from_address
    end

    # Custom attribute writer method with validation
    # @param [Object] portal_url_override Value to be assigned
    def portal_url_override=(portal_url_override)
      raise ArgumentError, 'portal_url_override cannot be nil' if portal_url_override.nil?

      @portal_url_override = portal_url_override
    end

    # Custom attribute writer method with validation
    # @param [Object] site_url Value to be assigned
    def site_url=(site_url)
      raise ArgumentError, 'site_url cannot be nil' if site_url.nil?

      @site_url = site_url
    end

    # Custom attribute writer method with validation
    # @param [Object] server_time_zone Value to be assigned
    def server_time_zone=(server_time_zone)
      raise ArgumentError, 'server_time_zone cannot be nil' if server_time_zone.nil?

      @server_time_zone = server_time_zone
    end

    # Custom attribute writer method with validation
    # @param [Object] default_calendar Value to be assigned
    def default_calendar=(default_calendar)
      raise ArgumentError, 'default_calendar cannot be nil' if default_calendar.nil?

      @default_calendar = default_calendar
    end

    # Custom attribute writer method with validation
    # @param [Object] default_address_format Value to be assigned
    def default_address_format=(default_address_format)
      raise ArgumentError, 'default_address_format cannot be nil' if default_address_format.nil?

      @default_address_format = default_address_format
    end

    # Custom attribute writer method with validation
    # @param [Object] locale Value to be assigned
    def locale=(locale)
      raise ArgumentError, 'locale cannot be nil' if locale.nil?

      @locale = locale
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] contact_sync Object to be assigned
    def contact_sync=(contact_sync)
      validator = EnumAttributeValidator.new('String', %w[FL LF CFL CLF])
      raise ArgumentError, "invalid value for \"contact_sync\", must be one of #{validator.allowable_values}." unless validator.valid?(contact_sync)

      @contact_sync = contact_sync
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        default_from_address == other.default_from_address &&
        portal_url_override == other.portal_url_override &&
        site_url == other.site_url &&
        server_time_zone == other.server_time_zone &&
        default_calendar == other.default_calendar &&
        default_address_format == other.default_address_format &&
        locale == other.locale &&
        id == other.id &&
        default_ldap == other.default_ldap &&
        logo_path == other.logo_path &&
        contact_sync == other.contact_sync &&
        use_ssl_flag == other.use_ssl_flag &&
        sync_leads_flag == other.sync_leads_flag &&
        include_portal_link_flag == other.include_portal_link_flag &&
        use_expanded_format_time_flag == other.use_expanded_format_time_flag &&
        use_expanded_format_activity_flag == other.use_expanded_format_activity_flag &&
        disable_z_admin_login_flag == other.disable_z_admin_login_flag &&
        update_member_time_zones_flag == other.update_member_time_zones_flag &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [default_from_address, portal_url_override, site_url, server_time_zone, default_calendar, default_address_format, locale, id, default_ldap, logo_path, contact_sync, use_ssl_flag, sync_leads_flag, include_portal_link_flag, use_expanded_format_time_flag, use_expanded_format_activity_flag, disable_z_admin_login_flag, update_member_time_zones_flag, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) } if attributes[attribute_map[key]].is_a?(Array)
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
