# #Connectwise Manage All Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2022.1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.1
#

require 'date'
require 'time'

module ConnectWise
  class AgreementType
    #  Max length: 50;
    attr_accessor :name

    attr_accessor :employee_comp_rate, :employee_comp_not_exceed, :invoicing_cycle, :bill_time, :bill_expenses, :bill_products, :id, :prefix_suffix_option, :default_flag, :inactive_flag, :pre_payment_flag, :location, :department, :restrict_location_flag, :restrict_department_flag, :sla, :application_units, :application_limit, :application_cycle, :application_unlimited_flag, :one_time_flag, :cover_agreement_time_flag, :cover_agreement_product_flag, :cover_agreement_expense_flag, :cover_sales_tax_flag, :carry_over_unused_flag, :allow_overruns_flag, :expired_days, :limit, :expire_when_zero, :charge_to_firm_flag, :comp_hourly_rate, :comp_limit_amount, :billing_cycle, :bill_one_time_flag, :billing_terms, :bill_amount, :taxable_flag, :restrict_down_payment_flag, :top_comment_flag, :bottom_comment_flag, :work_role, :work_type, :project_type, :invoice_template, :billable_time_invoice_flag, :billable_expense_invoice_flag, :billable_product_invoice_flag, :copy_work_roles_flag, :copy_work_types_flag, :exclusion_work_role_ids, :add_all_work_role_exclusions, :remove_all_work_role_exclusions, :exclusion_work_type_ids, :add_all_work_type_exclusions, :remove_all_work_type_exclusions, :prorate_flag, :email_template, :auto_invoice_flag, :_info

    #  Max length: 5;
    attr_accessor :invoice_pre_suffix

    #  Max length: 4000;
    attr_accessor :invoice_description

    #  Max length: 50;
    attr_accessor :integration_x_ref

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        name: :name,
        employee_comp_rate: :employeeCompRate,
        employee_comp_not_exceed: :employeeCompNotExceed,
        invoicing_cycle: :invoicingCycle,
        bill_time: :billTime,
        bill_expenses: :billExpenses,
        bill_products: :billProducts,
        id: :id,
        prefix_suffix_option: :prefixSuffixOption,
        default_flag: :defaultFlag,
        inactive_flag: :inactiveFlag,
        pre_payment_flag: :prePaymentFlag,
        invoice_pre_suffix: :invoicePreSuffix,
        location: :location,
        department: :department,
        restrict_location_flag: :restrictLocationFlag,
        restrict_department_flag: :restrictDepartmentFlag,
        sla: :sla,
        application_units: :applicationUnits,
        application_limit: :applicationLimit,
        application_cycle: :applicationCycle,
        application_unlimited_flag: :applicationUnlimitedFlag,
        one_time_flag: :oneTimeFlag,
        cover_agreement_time_flag: :coverAgreementTimeFlag,
        cover_agreement_product_flag: :coverAgreementProductFlag,
        cover_agreement_expense_flag: :coverAgreementExpenseFlag,
        cover_sales_tax_flag: :coverSalesTaxFlag,
        carry_over_unused_flag: :carryOverUnusedFlag,
        allow_overruns_flag: :allowOverrunsFlag,
        expired_days: :expiredDays,
        limit: :limit,
        expire_when_zero: :expireWhenZero,
        charge_to_firm_flag: :chargeToFirmFlag,
        comp_hourly_rate: :compHourlyRate,
        comp_limit_amount: :compLimitAmount,
        billing_cycle: :billingCycle,
        bill_one_time_flag: :billOneTimeFlag,
        billing_terms: :billingTerms,
        bill_amount: :billAmount,
        taxable_flag: :taxableFlag,
        restrict_down_payment_flag: :restrictDownPaymentFlag,
        invoice_description: :invoiceDescription,
        top_comment_flag: :topCommentFlag,
        bottom_comment_flag: :bottomCommentFlag,
        work_role: :workRole,
        work_type: :workType,
        project_type: :projectType,
        invoice_template: :invoiceTemplate,
        billable_time_invoice_flag: :billableTimeInvoiceFlag,
        billable_expense_invoice_flag: :billableExpenseInvoiceFlag,
        billable_product_invoice_flag: :billableProductInvoiceFlag,
        copy_work_roles_flag: :copyWorkRolesFlag,
        copy_work_types_flag: :copyWorkTypesFlag,
        exclusion_work_role_ids: :exclusionWorkRoleIds,
        add_all_work_role_exclusions: :addAllWorkRoleExclusions,
        remove_all_work_role_exclusions: :removeAllWorkRoleExclusions,
        exclusion_work_type_ids: :exclusionWorkTypeIds,
        add_all_work_type_exclusions: :addAllWorkTypeExclusions,
        remove_all_work_type_exclusions: :removeAllWorkTypeExclusions,
        integration_x_ref: :integrationXRef,
        prorate_flag: :prorateFlag,
        email_template: :emailTemplate,
        auto_invoice_flag: :autoInvoiceFlag,
        _info: :_info
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        name: :String,
        employee_comp_rate: :String,
        employee_comp_not_exceed: :String,
        invoicing_cycle: :String,
        bill_time: :String,
        bill_expenses: :String,
        bill_products: :String,
        id: :Integer,
        prefix_suffix_option: :String,
        default_flag: :Boolean,
        inactive_flag: :Boolean,
        pre_payment_flag: :Boolean,
        invoice_pre_suffix: :String,
        location: :SystemLocationReference,
        department: :SystemDepartmentReference,
        restrict_location_flag: :Boolean,
        restrict_department_flag: :Boolean,
        sla: :SLAReference,
        application_units: :String,
        application_limit: :Float,
        application_cycle: :String,
        application_unlimited_flag: :Boolean,
        one_time_flag: :Boolean,
        cover_agreement_time_flag: :Boolean,
        cover_agreement_product_flag: :Boolean,
        cover_agreement_expense_flag: :Boolean,
        cover_sales_tax_flag: :Boolean,
        carry_over_unused_flag: :Boolean,
        allow_overruns_flag: :Boolean,
        expired_days: :Integer,
        limit: :Integer,
        expire_when_zero: :Boolean,
        charge_to_firm_flag: :Boolean,
        comp_hourly_rate: :Float,
        comp_limit_amount: :Float,
        billing_cycle: :BillingCycleReference,
        bill_one_time_flag: :Boolean,
        billing_terms: :BillingTermsReference,
        bill_amount: :Float,
        taxable_flag: :Boolean,
        restrict_down_payment_flag: :Boolean,
        invoice_description: :String,
        top_comment_flag: :Boolean,
        bottom_comment_flag: :Boolean,
        work_role: :WorkRoleReference,
        work_type: :WorkTypeReference,
        project_type: :ProjectTypeReference,
        invoice_template: :InvoiceTemplateReference,
        billable_time_invoice_flag: :Boolean,
        billable_expense_invoice_flag: :Boolean,
        billable_product_invoice_flag: :Boolean,
        copy_work_roles_flag: :Boolean,
        copy_work_types_flag: :Boolean,
        exclusion_work_role_ids: :'Array<Integer>',
        add_all_work_role_exclusions: :Boolean,
        remove_all_work_role_exclusions: :Boolean,
        exclusion_work_type_ids: :'Array<Integer>',
        add_all_work_type_exclusions: :Boolean,
        remove_all_work_type_exclusions: :Boolean,
        integration_x_ref: :String,
        prorate_flag: :Boolean,
        email_template: :EmailTemplateReference,
        auto_invoice_flag: :Boolean,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                employee_comp_rate
                employee_comp_not_exceed
                invoicing_cycle
                bill_time
                bill_expenses
                bill_products
                prefix_suffix_option
                default_flag
                inactive_flag
                pre_payment_flag
                restrict_location_flag
                restrict_department_flag
                application_units
                application_limit
                application_cycle
                application_unlimited_flag
                one_time_flag
                cover_agreement_time_flag
                cover_agreement_product_flag
                cover_agreement_expense_flag
                cover_sales_tax_flag
                carry_over_unused_flag
                allow_overruns_flag
                expired_days
                limit
                expire_when_zero
                charge_to_firm_flag
                comp_hourly_rate
                comp_limit_amount
                bill_one_time_flag
                bill_amount
                taxable_flag
                restrict_down_payment_flag
                top_comment_flag
                bottom_comment_flag
                billable_time_invoice_flag
                billable_expense_invoice_flag
                billable_product_invoice_flag
                copy_work_roles_flag
                copy_work_types_flag
                add_all_work_role_exclusions
                remove_all_work_role_exclusions
                add_all_work_type_exclusions
                remove_all_work_type_exclusions
                prorate_flag
                auto_invoice_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::AgreementType` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::AgreementType`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.name = attributes[:name] if attributes.key?(:name)

      self.employee_comp_rate = attributes[:employee_comp_rate] if attributes.key?(:employee_comp_rate)

      self.employee_comp_not_exceed = attributes[:employee_comp_not_exceed] if attributes.key?(:employee_comp_not_exceed)

      self.invoicing_cycle = attributes[:invoicing_cycle] if attributes.key?(:invoicing_cycle)

      self.bill_time = attributes[:bill_time] if attributes.key?(:bill_time)

      self.bill_expenses = attributes[:bill_expenses] if attributes.key?(:bill_expenses)

      self.bill_products = attributes[:bill_products] if attributes.key?(:bill_products)

      self.id = attributes[:id] if attributes.key?(:id)

      self.prefix_suffix_option = attributes[:prefix_suffix_option] if attributes.key?(:prefix_suffix_option)

      self.default_flag = attributes[:default_flag] if attributes.key?(:default_flag)

      self.inactive_flag = attributes[:inactive_flag] if attributes.key?(:inactive_flag)

      self.pre_payment_flag = attributes[:pre_payment_flag] if attributes.key?(:pre_payment_flag)

      self.invoice_pre_suffix = attributes[:invoice_pre_suffix] if attributes.key?(:invoice_pre_suffix)

      self.location = attributes[:location] if attributes.key?(:location)

      self.department = attributes[:department] if attributes.key?(:department)

      self.restrict_location_flag = attributes[:restrict_location_flag] if attributes.key?(:restrict_location_flag)

      self.restrict_department_flag = attributes[:restrict_department_flag] if attributes.key?(:restrict_department_flag)

      self.sla = attributes[:sla] if attributes.key?(:sla)

      self.application_units = attributes[:application_units] if attributes.key?(:application_units)

      self.application_limit = attributes[:application_limit] if attributes.key?(:application_limit)

      self.application_cycle = attributes[:application_cycle] if attributes.key?(:application_cycle)

      self.application_unlimited_flag = attributes[:application_unlimited_flag] if attributes.key?(:application_unlimited_flag)

      self.one_time_flag = attributes[:one_time_flag] if attributes.key?(:one_time_flag)

      self.cover_agreement_time_flag = attributes[:cover_agreement_time_flag] if attributes.key?(:cover_agreement_time_flag)

      self.cover_agreement_product_flag = attributes[:cover_agreement_product_flag] if attributes.key?(:cover_agreement_product_flag)

      self.cover_agreement_expense_flag = attributes[:cover_agreement_expense_flag] if attributes.key?(:cover_agreement_expense_flag)

      self.cover_sales_tax_flag = attributes[:cover_sales_tax_flag] if attributes.key?(:cover_sales_tax_flag)

      self.carry_over_unused_flag = attributes[:carry_over_unused_flag] if attributes.key?(:carry_over_unused_flag)

      self.allow_overruns_flag = attributes[:allow_overruns_flag] if attributes.key?(:allow_overruns_flag)

      self.expired_days = attributes[:expired_days] if attributes.key?(:expired_days)

      self.limit = attributes[:limit] if attributes.key?(:limit)

      self.expire_when_zero = attributes[:expire_when_zero] if attributes.key?(:expire_when_zero)

      self.charge_to_firm_flag = attributes[:charge_to_firm_flag] if attributes.key?(:charge_to_firm_flag)

      self.comp_hourly_rate = attributes[:comp_hourly_rate] if attributes.key?(:comp_hourly_rate)

      self.comp_limit_amount = attributes[:comp_limit_amount] if attributes.key?(:comp_limit_amount)

      self.billing_cycle = attributes[:billing_cycle] if attributes.key?(:billing_cycle)

      self.bill_one_time_flag = attributes[:bill_one_time_flag] if attributes.key?(:bill_one_time_flag)

      self.billing_terms = attributes[:billing_terms] if attributes.key?(:billing_terms)

      self.bill_amount = attributes[:bill_amount] if attributes.key?(:bill_amount)

      self.taxable_flag = attributes[:taxable_flag] if attributes.key?(:taxable_flag)

      self.restrict_down_payment_flag = attributes[:restrict_down_payment_flag] if attributes.key?(:restrict_down_payment_flag)

      self.invoice_description = attributes[:invoice_description] if attributes.key?(:invoice_description)

      self.top_comment_flag = attributes[:top_comment_flag] if attributes.key?(:top_comment_flag)

      self.bottom_comment_flag = attributes[:bottom_comment_flag] if attributes.key?(:bottom_comment_flag)

      self.work_role = attributes[:work_role] if attributes.key?(:work_role)

      self.work_type = attributes[:work_type] if attributes.key?(:work_type)

      self.project_type = attributes[:project_type] if attributes.key?(:project_type)

      self.invoice_template = attributes[:invoice_template] if attributes.key?(:invoice_template)

      self.billable_time_invoice_flag = attributes[:billable_time_invoice_flag] if attributes.key?(:billable_time_invoice_flag)

      self.billable_expense_invoice_flag = attributes[:billable_expense_invoice_flag] if attributes.key?(:billable_expense_invoice_flag)

      self.billable_product_invoice_flag = attributes[:billable_product_invoice_flag] if attributes.key?(:billable_product_invoice_flag)

      self.copy_work_roles_flag = attributes[:copy_work_roles_flag] if attributes.key?(:copy_work_roles_flag)

      self.copy_work_types_flag = attributes[:copy_work_types_flag] if attributes.key?(:copy_work_types_flag)

      if attributes.key?(:exclusion_work_role_ids) && (value = attributes[:exclusion_work_role_ids]).is_a?(Array)
        self.exclusion_work_role_ids = value
      end

      self.add_all_work_role_exclusions = attributes[:add_all_work_role_exclusions] if attributes.key?(:add_all_work_role_exclusions)

      self.remove_all_work_role_exclusions = attributes[:remove_all_work_role_exclusions] if attributes.key?(:remove_all_work_role_exclusions)

      if attributes.key?(:exclusion_work_type_ids) && (value = attributes[:exclusion_work_type_ids]).is_a?(Array)
        self.exclusion_work_type_ids = value
      end

      self.add_all_work_type_exclusions = attributes[:add_all_work_type_exclusions] if attributes.key?(:add_all_work_type_exclusions)

      self.remove_all_work_type_exclusions = attributes[:remove_all_work_type_exclusions] if attributes.key?(:remove_all_work_type_exclusions)

      self.integration_x_ref = attributes[:integration_x_ref] if attributes.key?(:integration_x_ref)

      self.prorate_flag = attributes[:prorate_flag] if attributes.key?(:prorate_flag)

      self.email_template = attributes[:email_template] if attributes.key?(:email_template)

      self.auto_invoice_flag = attributes[:auto_invoice_flag] if attributes.key?(:auto_invoice_flag)

      return unless attributes.key?(:_info)
      return unless (value = attributes[:_info]).is_a?(Hash)

      self._info = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      invalid_properties.push('invalid value for "name", name cannot be nil.') if @name.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?

      employee_comp_rate_validator = EnumAttributeValidator.new('String', %w[Actual Hourly])
      return false unless employee_comp_rate_validator.valid?(@employee_comp_rate)

      employee_comp_not_exceed_validator = EnumAttributeValidator.new('String', %w[Billing Amount Percent])
      return false unless employee_comp_not_exceed_validator.valid?(@employee_comp_not_exceed)

      invoicing_cycle_validator = EnumAttributeValidator.new('String', %w[ContractYear CalendarYear])
      return false unless invoicing_cycle_validator.valid?(@invoicing_cycle)

      bill_time_validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      return false unless bill_time_validator.valid?(@bill_time)

      bill_expenses_validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      return false unless bill_expenses_validator.valid?(@bill_expenses)

      bill_products_validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      return false unless bill_products_validator.valid?(@bill_products)

      prefix_suffix_option_validator = EnumAttributeValidator.new('String', %w[Prefix Suffix])
      return false unless prefix_suffix_option_validator.valid?(@prefix_suffix_option)

      application_units_validator = EnumAttributeValidator.new('String', %w[Amount Hours Incidents])
      return false unless application_units_validator.valid?(@application_units)

      application_cycle_validator = EnumAttributeValidator.new('String', %w[Contract2Weeks Contract4Weeks ContractYear CalendarMonth CalendarQuarter CalendarWeek ContractQuarter CalendarYear])
      return false unless application_cycle_validator.valid?(@application_cycle)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employee_comp_rate Object to be assigned
    def employee_comp_rate=(employee_comp_rate)
      validator = EnumAttributeValidator.new('String', %w[Actual Hourly])
      raise ArgumentError, "invalid value for \"employee_comp_rate\", must be one of #{validator.allowable_values}." unless validator.valid?(employee_comp_rate)

      @employee_comp_rate = employee_comp_rate
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employee_comp_not_exceed Object to be assigned
    def employee_comp_not_exceed=(employee_comp_not_exceed)
      validator = EnumAttributeValidator.new('String', %w[Billing Amount Percent])
      raise ArgumentError, "invalid value for \"employee_comp_not_exceed\", must be one of #{validator.allowable_values}." unless validator.valid?(employee_comp_not_exceed)

      @employee_comp_not_exceed = employee_comp_not_exceed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoicing_cycle Object to be assigned
    def invoicing_cycle=(invoicing_cycle)
      validator = EnumAttributeValidator.new('String', %w[ContractYear CalendarYear])
      raise ArgumentError, "invalid value for \"invoicing_cycle\", must be one of #{validator.allowable_values}." unless validator.valid?(invoicing_cycle)

      @invoicing_cycle = invoicing_cycle
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bill_time Object to be assigned
    def bill_time=(bill_time)
      validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      raise ArgumentError, "invalid value for \"bill_time\", must be one of #{validator.allowable_values}." unless validator.valid?(bill_time)

      @bill_time = bill_time
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bill_expenses Object to be assigned
    def bill_expenses=(bill_expenses)
      validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      raise ArgumentError, "invalid value for \"bill_expenses\", must be one of #{validator.allowable_values}." unless validator.valid?(bill_expenses)

      @bill_expenses = bill_expenses
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bill_products Object to be assigned
    def bill_products=(bill_products)
      validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      raise ArgumentError, "invalid value for \"bill_products\", must be one of #{validator.allowable_values}." unless validator.valid?(bill_products)

      @bill_products = bill_products
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] prefix_suffix_option Object to be assigned
    def prefix_suffix_option=(prefix_suffix_option)
      validator = EnumAttributeValidator.new('String', %w[Prefix Suffix])
      raise ArgumentError, "invalid value for \"prefix_suffix_option\", must be one of #{validator.allowable_values}." unless validator.valid?(prefix_suffix_option)

      @prefix_suffix_option = prefix_suffix_option
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_units Object to be assigned
    def application_units=(application_units)
      validator = EnumAttributeValidator.new('String', %w[Amount Hours Incidents])
      raise ArgumentError, "invalid value for \"application_units\", must be one of #{validator.allowable_values}." unless validator.valid?(application_units)

      @application_units = application_units
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] application_cycle Object to be assigned
    def application_cycle=(application_cycle)
      validator = EnumAttributeValidator.new('String', %w[Contract2Weeks Contract4Weeks ContractYear CalendarMonth CalendarQuarter CalendarWeek ContractQuarter CalendarYear])
      raise ArgumentError, "invalid value for \"application_cycle\", must be one of #{validator.allowable_values}." unless validator.valid?(application_cycle)

      @application_cycle = application_cycle
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        employee_comp_rate == other.employee_comp_rate &&
        employee_comp_not_exceed == other.employee_comp_not_exceed &&
        invoicing_cycle == other.invoicing_cycle &&
        bill_time == other.bill_time &&
        bill_expenses == other.bill_expenses &&
        bill_products == other.bill_products &&
        id == other.id &&
        prefix_suffix_option == other.prefix_suffix_option &&
        default_flag == other.default_flag &&
        inactive_flag == other.inactive_flag &&
        pre_payment_flag == other.pre_payment_flag &&
        invoice_pre_suffix == other.invoice_pre_suffix &&
        location == other.location &&
        department == other.department &&
        restrict_location_flag == other.restrict_location_flag &&
        restrict_department_flag == other.restrict_department_flag &&
        sla == other.sla &&
        application_units == other.application_units &&
        application_limit == other.application_limit &&
        application_cycle == other.application_cycle &&
        application_unlimited_flag == other.application_unlimited_flag &&
        one_time_flag == other.one_time_flag &&
        cover_agreement_time_flag == other.cover_agreement_time_flag &&
        cover_agreement_product_flag == other.cover_agreement_product_flag &&
        cover_agreement_expense_flag == other.cover_agreement_expense_flag &&
        cover_sales_tax_flag == other.cover_sales_tax_flag &&
        carry_over_unused_flag == other.carry_over_unused_flag &&
        allow_overruns_flag == other.allow_overruns_flag &&
        expired_days == other.expired_days &&
        limit == other.limit &&
        expire_when_zero == other.expire_when_zero &&
        charge_to_firm_flag == other.charge_to_firm_flag &&
        comp_hourly_rate == other.comp_hourly_rate &&
        comp_limit_amount == other.comp_limit_amount &&
        billing_cycle == other.billing_cycle &&
        bill_one_time_flag == other.bill_one_time_flag &&
        billing_terms == other.billing_terms &&
        bill_amount == other.bill_amount &&
        taxable_flag == other.taxable_flag &&
        restrict_down_payment_flag == other.restrict_down_payment_flag &&
        invoice_description == other.invoice_description &&
        top_comment_flag == other.top_comment_flag &&
        bottom_comment_flag == other.bottom_comment_flag &&
        work_role == other.work_role &&
        work_type == other.work_type &&
        project_type == other.project_type &&
        invoice_template == other.invoice_template &&
        billable_time_invoice_flag == other.billable_time_invoice_flag &&
        billable_expense_invoice_flag == other.billable_expense_invoice_flag &&
        billable_product_invoice_flag == other.billable_product_invoice_flag &&
        copy_work_roles_flag == other.copy_work_roles_flag &&
        copy_work_types_flag == other.copy_work_types_flag &&
        exclusion_work_role_ids == other.exclusion_work_role_ids &&
        add_all_work_role_exclusions == other.add_all_work_role_exclusions &&
        remove_all_work_role_exclusions == other.remove_all_work_role_exclusions &&
        exclusion_work_type_ids == other.exclusion_work_type_ids &&
        add_all_work_type_exclusions == other.add_all_work_type_exclusions &&
        remove_all_work_type_exclusions == other.remove_all_work_type_exclusions &&
        integration_x_ref == other.integration_x_ref &&
        prorate_flag == other.prorate_flag &&
        email_template == other.email_template &&
        auto_invoice_flag == other.auto_invoice_flag &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, employee_comp_rate, employee_comp_not_exceed, invoicing_cycle, bill_time, bill_expenses, bill_products, id, prefix_suffix_option, default_flag, inactive_flag, pre_payment_flag, invoice_pre_suffix, location, department, restrict_location_flag, restrict_department_flag, sla, application_units, application_limit, application_cycle, application_unlimited_flag, one_time_flag, cover_agreement_time_flag, cover_agreement_product_flag, cover_agreement_expense_flag, cover_sales_tax_flag, carry_over_unused_flag, allow_overruns_flag, expired_days, limit, expire_when_zero, charge_to_firm_flag, comp_hourly_rate, comp_limit_amount, billing_cycle, bill_one_time_flag, billing_terms, bill_amount, taxable_flag, restrict_down_payment_flag, invoice_description, top_comment_flag, bottom_comment_flag, work_role, work_type, project_type, invoice_template, billable_time_invoice_flag, billable_expense_invoice_flag, billable_product_invoice_flag, copy_work_roles_flag, copy_work_types_flag, exclusion_work_role_ids, add_all_work_role_exclusions, remove_all_work_role_exclusions, exclusion_work_type_ids, add_all_work_type_exclusions, remove_all_work_type_exclusions, integration_x_ref, prorate_flag, email_template, auto_invoice_flag, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
