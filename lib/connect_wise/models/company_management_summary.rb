# #Connectwise Manage All Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2022.1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.1
#

require 'date'
require 'time'

module ConnectWise
  class CompanyManagementSummary
    #  Max length: 100;
    attr_accessor :group_identifier

    attr_accessor :id, :management_solution, :agreement, :snmp_machines, :total_workstations, :total_servers, :total_windows_servers, :total_windows_workstations, :total_managed_machines, :servers_offline, :servers_disk_space_low, :failed_backup_jobs, :total_notifications, :successful_backup_jobs, :server_availability, :viruses_removed, :spyware_items_removed, :windows_patches_installed, :disk_cleanups, :disk_defragmentations, :fully_patched_machines, :missing_one_two_patches_machines, :missing_three_five_patches_machines, :missing_more_five_patches_machines, :missing_unscanned_patches_machines, :alerts_generated, :internet_connectivity, :disk_space_cleaned_mb, :missing_security_patches, :cpu_utilization, :memory_utilization, :company, :_info

    # deviceType is required if the managementSolution is Legacy
    attr_accessor :device_type

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        group_identifier: :groupIdentifier,
        id: :id,
        management_solution: :managementSolution,
        device_type: :deviceType,
        agreement: :agreement,
        snmp_machines: :snmpMachines,
        total_workstations: :totalWorkstations,
        total_servers: :totalServers,
        total_windows_servers: :totalWindowsServers,
        total_windows_workstations: :totalWindowsWorkstations,
        total_managed_machines: :totalManagedMachines,
        servers_offline: :serversOffline,
        servers_disk_space_low: :serversDiskSpaceLow,
        failed_backup_jobs: :failedBackupJobs,
        total_notifications: :totalNotifications,
        successful_backup_jobs: :successfulBackupJobs,
        server_availability: :serverAvailability,
        viruses_removed: :virusesRemoved,
        spyware_items_removed: :spywareItemsRemoved,
        windows_patches_installed: :windowsPatchesInstalled,
        disk_cleanups: :diskCleanups,
        disk_defragmentations: :diskDefragmentations,
        fully_patched_machines: :fullyPatchedMachines,
        missing_one_two_patches_machines: :missingOneTwoPatchesMachines,
        missing_three_five_patches_machines: :missingThreeFivePatchesMachines,
        missing_more_five_patches_machines: :missingMoreFivePatchesMachines,
        missing_unscanned_patches_machines: :missingUnscannedPatchesMachines,
        alerts_generated: :alertsGenerated,
        internet_connectivity: :internetConnectivity,
        disk_space_cleaned_mb: :diskSpaceCleanedMb,
        missing_security_patches: :missingSecurityPatches,
        cpu_utilization: :cpuUtilization,
        memory_utilization: :memoryUtilization,
        company: :company,
        _info: :_info
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        group_identifier: :String,
        id: :Integer,
        management_solution: :ManagementSolutionReference,
        device_type: :String,
        agreement: :AgreementReference,
        snmp_machines: :Integer,
        total_workstations: :Integer,
        total_servers: :Integer,
        total_windows_servers: :Integer,
        total_windows_workstations: :Integer,
        total_managed_machines: :Integer,
        servers_offline: :Integer,
        servers_disk_space_low: :Integer,
        failed_backup_jobs: :Integer,
        total_notifications: :Integer,
        successful_backup_jobs: :Integer,
        server_availability: :Integer,
        viruses_removed: :Integer,
        spyware_items_removed: :Integer,
        windows_patches_installed: :Integer,
        disk_cleanups: :Integer,
        disk_defragmentations: :Integer,
        fully_patched_machines: :Integer,
        missing_one_two_patches_machines: :Integer,
        missing_three_five_patches_machines: :Integer,
        missing_more_five_patches_machines: :Integer,
        missing_unscanned_patches_machines: :Integer,
        alerts_generated: :String,
        internet_connectivity: :Float,
        disk_space_cleaned_mb: :Integer,
        missing_security_patches: :String,
        cpu_utilization: :Float,
        memory_utilization: :Float,
        company: :CompanyReference,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                device_type
                snmp_machines
                total_workstations
                total_servers
                total_windows_servers
                total_windows_workstations
                total_managed_machines
                servers_offline
                servers_disk_space_low
                failed_backup_jobs
                total_notifications
                successful_backup_jobs
                server_availability
                viruses_removed
                spyware_items_removed
                windows_patches_installed
                disk_cleanups
                disk_defragmentations
                fully_patched_machines
                missing_one_two_patches_machines
                missing_three_five_patches_machines
                missing_more_five_patches_machines
                missing_unscanned_patches_machines
                internet_connectivity
                disk_space_cleaned_mb
                cpu_utilization
                memory_utilization
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::CompanyManagementSummary` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::CompanyManagementSummary`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.group_identifier = attributes[:group_identifier] if attributes.key?(:group_identifier)

      self.id = attributes[:id] if attributes.key?(:id)

      self.management_solution = attributes[:management_solution] if attributes.key?(:management_solution)

      self.device_type = attributes[:device_type] if attributes.key?(:device_type)

      self.agreement = attributes[:agreement] if attributes.key?(:agreement)

      self.snmp_machines = attributes[:snmp_machines] if attributes.key?(:snmp_machines)

      self.total_workstations = attributes[:total_workstations] if attributes.key?(:total_workstations)

      self.total_servers = attributes[:total_servers] if attributes.key?(:total_servers)

      self.total_windows_servers = attributes[:total_windows_servers] if attributes.key?(:total_windows_servers)

      self.total_windows_workstations = attributes[:total_windows_workstations] if attributes.key?(:total_windows_workstations)

      self.total_managed_machines = attributes[:total_managed_machines] if attributes.key?(:total_managed_machines)

      self.servers_offline = attributes[:servers_offline] if attributes.key?(:servers_offline)

      self.servers_disk_space_low = attributes[:servers_disk_space_low] if attributes.key?(:servers_disk_space_low)

      self.failed_backup_jobs = attributes[:failed_backup_jobs] if attributes.key?(:failed_backup_jobs)

      self.total_notifications = attributes[:total_notifications] if attributes.key?(:total_notifications)

      self.successful_backup_jobs = attributes[:successful_backup_jobs] if attributes.key?(:successful_backup_jobs)

      self.server_availability = attributes[:server_availability] if attributes.key?(:server_availability)

      self.viruses_removed = attributes[:viruses_removed] if attributes.key?(:viruses_removed)

      self.spyware_items_removed = attributes[:spyware_items_removed] if attributes.key?(:spyware_items_removed)

      self.windows_patches_installed = attributes[:windows_patches_installed] if attributes.key?(:windows_patches_installed)

      self.disk_cleanups = attributes[:disk_cleanups] if attributes.key?(:disk_cleanups)

      self.disk_defragmentations = attributes[:disk_defragmentations] if attributes.key?(:disk_defragmentations)

      self.fully_patched_machines = attributes[:fully_patched_machines] if attributes.key?(:fully_patched_machines)

      self.missing_one_two_patches_machines = attributes[:missing_one_two_patches_machines] if attributes.key?(:missing_one_two_patches_machines)

      self.missing_three_five_patches_machines = attributes[:missing_three_five_patches_machines] if attributes.key?(:missing_three_five_patches_machines)

      self.missing_more_five_patches_machines = attributes[:missing_more_five_patches_machines] if attributes.key?(:missing_more_five_patches_machines)

      self.missing_unscanned_patches_machines = attributes[:missing_unscanned_patches_machines] if attributes.key?(:missing_unscanned_patches_machines)

      self.alerts_generated = attributes[:alerts_generated] if attributes.key?(:alerts_generated)

      self.internet_connectivity = attributes[:internet_connectivity] if attributes.key?(:internet_connectivity)

      self.disk_space_cleaned_mb = attributes[:disk_space_cleaned_mb] if attributes.key?(:disk_space_cleaned_mb)

      self.missing_security_patches = attributes[:missing_security_patches] if attributes.key?(:missing_security_patches)

      self.cpu_utilization = attributes[:cpu_utilization] if attributes.key?(:cpu_utilization)

      self.memory_utilization = attributes[:memory_utilization] if attributes.key?(:memory_utilization)

      self.company = attributes[:company] if attributes.key?(:company)

      return unless attributes.key?(:_info)
      return unless (value = attributes[:_info]).is_a?(Hash)

      self._info = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      invalid_properties.push('invalid value for "group_identifier", group_identifier cannot be nil.') if @group_identifier.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @group_identifier.nil?

      device_type_validator = EnumAttributeValidator.new('String', %w[WorkstationsAndServers BackupStats Servers Workstations])
      return false unless device_type_validator.valid?(@device_type)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] device_type Object to be assigned
    def device_type=(device_type)
      validator = EnumAttributeValidator.new('String', %w[WorkstationsAndServers BackupStats Servers Workstations])
      raise ArgumentError, "invalid value for \"device_type\", must be one of #{validator.allowable_values}." unless validator.valid?(device_type)

      @device_type = device_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        group_identifier == other.group_identifier &&
        id == other.id &&
        management_solution == other.management_solution &&
        device_type == other.device_type &&
        agreement == other.agreement &&
        snmp_machines == other.snmp_machines &&
        total_workstations == other.total_workstations &&
        total_servers == other.total_servers &&
        total_windows_servers == other.total_windows_servers &&
        total_windows_workstations == other.total_windows_workstations &&
        total_managed_machines == other.total_managed_machines &&
        servers_offline == other.servers_offline &&
        servers_disk_space_low == other.servers_disk_space_low &&
        failed_backup_jobs == other.failed_backup_jobs &&
        total_notifications == other.total_notifications &&
        successful_backup_jobs == other.successful_backup_jobs &&
        server_availability == other.server_availability &&
        viruses_removed == other.viruses_removed &&
        spyware_items_removed == other.spyware_items_removed &&
        windows_patches_installed == other.windows_patches_installed &&
        disk_cleanups == other.disk_cleanups &&
        disk_defragmentations == other.disk_defragmentations &&
        fully_patched_machines == other.fully_patched_machines &&
        missing_one_two_patches_machines == other.missing_one_two_patches_machines &&
        missing_three_five_patches_machines == other.missing_three_five_patches_machines &&
        missing_more_five_patches_machines == other.missing_more_five_patches_machines &&
        missing_unscanned_patches_machines == other.missing_unscanned_patches_machines &&
        alerts_generated == other.alerts_generated &&
        internet_connectivity == other.internet_connectivity &&
        disk_space_cleaned_mb == other.disk_space_cleaned_mb &&
        missing_security_patches == other.missing_security_patches &&
        cpu_utilization == other.cpu_utilization &&
        memory_utilization == other.memory_utilization &&
        company == other.company &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [group_identifier, id, management_solution, device_type, agreement, snmp_machines, total_workstations, total_servers, total_windows_servers, total_windows_workstations, total_managed_machines, servers_offline, servers_disk_space_low, failed_backup_jobs, total_notifications, successful_backup_jobs, server_availability, viruses_removed, spyware_items_removed, windows_patches_installed, disk_cleanups, disk_defragmentations, fully_patched_machines, missing_one_two_patches_machines, missing_three_five_patches_machines, missing_more_five_patches_machines, missing_unscanned_patches_machines, alerts_generated, internet_connectivity, disk_space_cleaned_mb, missing_security_patches, cpu_utilization, memory_utilization, company, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
