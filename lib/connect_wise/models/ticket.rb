# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'date'
require 'time'

module ConnectWise
  class Ticket
    #  Max length: 100;
    attr_accessor :summary

    attr_accessor :company, :id, :record_type, :board, :status, :work_role, :work_type, :site, :country, :contact,
                  :type, :sub_type, :item, :team, :owner, :priority, :service_location, :source, :required_date, :budget_hours, :opportunity, :agreement, :agreement_type, :knowledge_base_category_id, :knowledge_base_sub_category_id, :allow_all_clients_portal_view, :customer_updated_flag, :automatic_email_contact_flag, :automatic_email_resource_flag, :automatic_email_cc_flag, :initial_description_from, :contact_email_lookup, :skip_callback, :closed_date, :closed_by, :closed_flag, :actual_hours, :approved, :estimated_expense_cost, :estimated_expense_revenue, :estimated_product_cost, :estimated_product_revenue, :estimated_time_cost, :estimated_time_revenue, :billing_method, :billing_amount, :hourly_rate, :sub_billing_method, :sub_billing_amount, :sub_date_accepted, :date_resolved, :date_resplan, :date_responded, :resolve_minutes, :res_plan_minutes, :respond_minutes, :is_in_sla, :knowledge_base_link_id, :resources, :parent_ticket_id, :has_child_ticket, :has_merged_child_ticket_flag, :knowledge_base_link_type, :bill_time, :bill_expenses, :bill_products, :predecessor_type, :predecessor_id, :predecessor_closed_flag, :lag_days, :lag_nonworking_days_flag, :estimated_start_date, :duration, :location, :department, :mobile_guid, :sla, :sla_status, :request_for_change_flag, :currency, :merged_parent_ticket, :integrator_tags, :_info, :escalation_start_date_utc, :escalation_level, :minutes_before_waiting, :responded_skipped_minutes, :resplan_skipped_minutes, :responded_hours, :responded_by, :resplan_hours, :resplan_by, :resolution_hours, :resolved_by, :minutes_waiting, :custom_fields

    #  Max length: 50;
    attr_accessor :site_name

    #  Max length: 50;
    attr_accessor :address_line1

    #  Max length: 50;
    attr_accessor :address_line2

    #  Max length: 50;
    attr_accessor :city

    #  Max length: 50;
    attr_accessor :state_identifier

    #  Max length: 12;
    attr_accessor :zip

    #  Max length: 62;
    attr_accessor :contact_name

    #  Max length: 20;
    attr_accessor :contact_phone_number

    #  Max length: 15;
    attr_accessor :contact_phone_extension

    #  Max length: 250;
    attr_accessor :contact_email_address

    #  Required On Updates;
    attr_accessor :severity

    #  Required On Updates;
    attr_accessor :impact

    #  Max length: 100;
    attr_accessor :external_x_ref

    #  Max length: 50;
    attr_accessor :po_number

    #  Max length: 1000;
    attr_accessor :automatic_email_cc

    # Only available for POST, will not be returned in the response.
    attr_accessor :initial_description

    # Only available for POST, will not be returned in the response.
    attr_accessor :initial_internal_analysis

    # Only available for POST, will not be returned in the response.
    attr_accessor :initial_resolution

    # Can be set to false to skip notification processing when adding or updating a ticket (Defaults to True).
    attr_accessor :process_notifications

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        summary: :summary,
        company: :company,
        id: :id,
        record_type: :recordType,
        board: :board,
        status: :status,
        work_role: :workRole,
        work_type: :workType,
        site: :site,
        site_name: :siteName,
        address_line1: :addressLine1,
        address_line2: :addressLine2,
        city: :city,
        state_identifier: :stateIdentifier,
        zip: :zip,
        country: :country,
        contact: :contact,
        contact_name: :contactName,
        contact_phone_number: :contactPhoneNumber,
        contact_phone_extension: :contactPhoneExtension,
        contact_email_address: :contactEmailAddress,
        type: :type,
        sub_type: :subType,
        item: :item,
        team: :team,
        owner: :owner,
        priority: :priority,
        service_location: :serviceLocation,
        source: :source,
        required_date: :requiredDate,
        budget_hours: :budgetHours,
        opportunity: :opportunity,
        agreement: :agreement,
        agreement_type: :agreementType,
        severity: :severity,
        impact: :impact,
        external_x_ref: :externalXRef,
        po_number: :poNumber,
        knowledge_base_category_id: :knowledgeBaseCategoryId,
        knowledge_base_sub_category_id: :knowledgeBaseSubCategoryId,
        allow_all_clients_portal_view: :allowAllClientsPortalView,
        customer_updated_flag: :customerUpdatedFlag,
        automatic_email_contact_flag: :automaticEmailContactFlag,
        automatic_email_resource_flag: :automaticEmailResourceFlag,
        automatic_email_cc_flag: :automaticEmailCcFlag,
        automatic_email_cc: :automaticEmailCc,
        initial_description: :initialDescription,
        initial_internal_analysis: :initialInternalAnalysis,
        initial_resolution: :initialResolution,
        initial_description_from: :initialDescriptionFrom,
        contact_email_lookup: :contactEmailLookup,
        process_notifications: :processNotifications,
        skip_callback: :skipCallback,
        closed_date: :closedDate,
        closed_by: :closedBy,
        closed_flag: :closedFlag,
        actual_hours: :actualHours,
        approved: :approved,
        estimated_expense_cost: :estimatedExpenseCost,
        estimated_expense_revenue: :estimatedExpenseRevenue,
        estimated_product_cost: :estimatedProductCost,
        estimated_product_revenue: :estimatedProductRevenue,
        estimated_time_cost: :estimatedTimeCost,
        estimated_time_revenue: :estimatedTimeRevenue,
        billing_method: :billingMethod,
        billing_amount: :billingAmount,
        hourly_rate: :hourlyRate,
        sub_billing_method: :subBillingMethod,
        sub_billing_amount: :subBillingAmount,
        sub_date_accepted: :subDateAccepted,
        date_resolved: :dateResolved,
        date_resplan: :dateResplan,
        date_responded: :dateResponded,
        resolve_minutes: :resolveMinutes,
        res_plan_minutes: :resPlanMinutes,
        respond_minutes: :respondMinutes,
        is_in_sla: :isInSla,
        knowledge_base_link_id: :knowledgeBaseLinkId,
        resources: :resources,
        parent_ticket_id: :parentTicketId,
        has_child_ticket: :hasChildTicket,
        has_merged_child_ticket_flag: :hasMergedChildTicketFlag,
        knowledge_base_link_type: :knowledgeBaseLinkType,
        bill_time: :billTime,
        bill_expenses: :billExpenses,
        bill_products: :billProducts,
        predecessor_type: :predecessorType,
        predecessor_id: :predecessorId,
        predecessor_closed_flag: :predecessorClosedFlag,
        lag_days: :lagDays,
        lag_nonworking_days_flag: :lagNonworkingDaysFlag,
        estimated_start_date: :estimatedStartDate,
        duration: :duration,
        location: :location,
        department: :department,
        mobile_guid: :mobileGuid,
        sla: :sla,
        sla_status: :slaStatus,
        request_for_change_flag: :requestForChangeFlag,
        currency: :currency,
        merged_parent_ticket: :mergedParentTicket,
        integrator_tags: :integratorTags,
        _info: :_info,
        escalation_start_date_utc: :escalationStartDateUTC,
        escalation_level: :escalationLevel,
        minutes_before_waiting: :minutesBeforeWaiting,
        responded_skipped_minutes: :respondedSkippedMinutes,
        resplan_skipped_minutes: :resplanSkippedMinutes,
        responded_hours: :respondedHours,
        responded_by: :respondedBy,
        resplan_hours: :resplanHours,
        resplan_by: :resplanBy,
        resolution_hours: :resolutionHours,
        resolved_by: :resolvedBy,
        minutes_waiting: :minutesWaiting,
        custom_fields: :customFields
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        summary: :String,
        company: :CompanyReference,
        id: :Integer,
        record_type: :String,
        board: :BoardReference,
        status: :ServiceStatusReference,
        work_role: :WorkRoleReference,
        work_type: :WorkTypeReference,
        site: :SiteReference,
        site_name: :String,
        address_line1: :String,
        address_line2: :String,
        city: :String,
        state_identifier: :String,
        zip: :String,
        country: :CountryReference,
        contact: :ContactReference,
        contact_name: :String,
        contact_phone_number: :String,
        contact_phone_extension: :String,
        contact_email_address: :String,
        type: :ServiceTypeReference,
        sub_type: :ServiceSubTypeReference,
        item: :ServiceItemReference,
        team: :ServiceTeamReference,
        owner: :MemberReference,
        priority: :PriorityReference,
        service_location: :ServiceLocationReference,
        source: :ServiceSourceReference,
        required_date: :Time,
        budget_hours: :Float,
        opportunity: :OpportunityReference,
        agreement: :AgreementReference,
        agreement_type: :String,
        severity: :String,
        impact: :String,
        external_x_ref: :String,
        po_number: :String,
        knowledge_base_category_id: :Integer,
        knowledge_base_sub_category_id: :Integer,
        allow_all_clients_portal_view: :Boolean,
        customer_updated_flag: :Boolean,
        automatic_email_contact_flag: :Boolean,
        automatic_email_resource_flag: :Boolean,
        automatic_email_cc_flag: :Boolean,
        automatic_email_cc: :String,
        initial_description: :String,
        initial_internal_analysis: :String,
        initial_resolution: :String,
        initial_description_from: :String,
        contact_email_lookup: :String,
        process_notifications: :Boolean,
        skip_callback: :Boolean,
        closed_date: :String,
        closed_by: :String,
        closed_flag: :Boolean,
        actual_hours: :Float,
        approved: :Boolean,
        estimated_expense_cost: :Float,
        estimated_expense_revenue: :Float,
        estimated_product_cost: :Float,
        estimated_product_revenue: :Float,
        estimated_time_cost: :Float,
        estimated_time_revenue: :Float,
        billing_method: :String,
        billing_amount: :Float,
        hourly_rate: :Float,
        sub_billing_method: :String,
        sub_billing_amount: :Float,
        sub_date_accepted: :String,
        date_resolved: :String,
        date_resplan: :String,
        date_responded: :String,
        resolve_minutes: :Integer,
        res_plan_minutes: :Integer,
        respond_minutes: :Integer,
        is_in_sla: :Boolean,
        knowledge_base_link_id: :Integer,
        resources: :String,
        parent_ticket_id: :Integer,
        has_child_ticket: :Boolean,
        has_merged_child_ticket_flag: :Boolean,
        knowledge_base_link_type: :String,
        bill_time: :String,
        bill_expenses: :String,
        bill_products: :String,
        predecessor_type: :String,
        predecessor_id: :Integer,
        predecessor_closed_flag: :Boolean,
        lag_days: :Integer,
        lag_nonworking_days_flag: :Boolean,
        estimated_start_date: :Time,
        duration: :Integer,
        location: :SystemLocationReference,
        department: :SystemDepartmentReference,
        mobile_guid: :String,
        sla: :SLAReference,
        sla_status: :String,
        request_for_change_flag: :Boolean,
        currency: :CurrencyReference,
        merged_parent_ticket: :TicketReference,
        integrator_tags: :'Array<String>',
        _info: :'Hash<String, String>',
        escalation_start_date_utc: :String,
        escalation_level: :Integer,
        minutes_before_waiting: :Integer,
        responded_skipped_minutes: :Integer,
        resplan_skipped_minutes: :Integer,
        responded_hours: :Float,
        responded_by: :String,
        resplan_hours: :Float,
        resplan_by: :String,
        resolution_hours: :Float,
        resolved_by: :String,
        minutes_waiting: :Integer,
        custom_fields: :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                record_type
                budget_hours
                severity
                impact
                knowledge_base_category_id
                knowledge_base_sub_category_id
                allow_all_clients_portal_view
                customer_updated_flag
                automatic_email_contact_flag
                automatic_email_resource_flag
                automatic_email_cc_flag
                process_notifications
                skip_callback
                closed_flag
                actual_hours
                approved
                estimated_expense_cost
                estimated_expense_revenue
                estimated_product_cost
                estimated_product_revenue
                estimated_time_cost
                estimated_time_revenue
                billing_method
                billing_amount
                hourly_rate
                sub_billing_method
                sub_billing_amount
                resolve_minutes
                res_plan_minutes
                respond_minutes
                is_in_sla
                knowledge_base_link_id
                parent_ticket_id
                has_child_ticket
                has_merged_child_ticket_flag
                knowledge_base_link_type
                bill_time
                bill_expenses
                bill_products
                predecessor_type
                predecessor_id
                predecessor_closed_flag
                lag_days
                lag_nonworking_days_flag
                duration
                mobile_guid
                request_for_change_flag
                escalation_level
                minutes_before_waiting
                responded_skipped_minutes
                resplan_skipped_minutes
                responded_hours
                resplan_hours
                resolution_hours
                minutes_waiting
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::Ticket` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless acceptable_attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `ConnectWise::Ticket`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.summary = (attributes[:summary] if attributes.key?(:summary))

      self.company = (attributes[:company] if attributes.key?(:company))

      self.id = attributes[:id] if attributes.key?(:id)

      self.record_type = attributes[:record_type] if attributes.key?(:record_type)

      self.board = attributes[:board] if attributes.key?(:board)

      self.status = attributes[:status] if attributes.key?(:status)

      self.work_role = attributes[:work_role] if attributes.key?(:work_role)

      self.work_type = attributes[:work_type] if attributes.key?(:work_type)

      self.site = attributes[:site] if attributes.key?(:site)

      self.site_name = attributes[:site_name] if attributes.key?(:site_name)

      self.address_line1 = attributes[:address_line1] if attributes.key?(:address_line1)

      self.address_line2 = attributes[:address_line2] if attributes.key?(:address_line2)

      self.city = attributes[:city] if attributes.key?(:city)

      self.state_identifier = attributes[:state_identifier] if attributes.key?(:state_identifier)

      self.zip = attributes[:zip] if attributes.key?(:zip)

      self.country = attributes[:country] if attributes.key?(:country)

      self.contact = attributes[:contact] if attributes.key?(:contact)

      self.contact_name = attributes[:contact_name] if attributes.key?(:contact_name)

      self.contact_phone_number = attributes[:contact_phone_number] if attributes.key?(:contact_phone_number)

      self.contact_phone_extension = attributes[:contact_phone_extension] if attributes.key?(:contact_phone_extension)

      self.contact_email_address = attributes[:contact_email_address] if attributes.key?(:contact_email_address)

      self.type = attributes[:type] if attributes.key?(:type)

      self.sub_type = attributes[:sub_type] if attributes.key?(:sub_type)

      self.item = attributes[:item] if attributes.key?(:item)

      self.team = attributes[:team] if attributes.key?(:team)

      self.owner = attributes[:owner] if attributes.key?(:owner)

      self.priority = attributes[:priority] if attributes.key?(:priority)

      self.service_location = attributes[:service_location] if attributes.key?(:service_location)

      self.source = attributes[:source] if attributes.key?(:source)

      self.required_date = attributes[:required_date] if attributes.key?(:required_date)

      self.budget_hours = attributes[:budget_hours] if attributes.key?(:budget_hours)

      self.opportunity = attributes[:opportunity] if attributes.key?(:opportunity)

      self.agreement = attributes[:agreement] if attributes.key?(:agreement)

      self.agreement_type = attributes[:agreement_type] if attributes.key?(:agreement_type)

      self.severity = attributes[:severity] if attributes.key?(:severity)

      self.impact = attributes[:impact] if attributes.key?(:impact)

      self.external_x_ref = attributes[:external_x_ref] if attributes.key?(:external_x_ref)

      self.po_number = attributes[:po_number] if attributes.key?(:po_number)

      if attributes.key?(:knowledge_base_category_id)
        self.knowledge_base_category_id = attributes[:knowledge_base_category_id]
      end

      if attributes.key?(:knowledge_base_sub_category_id)
        self.knowledge_base_sub_category_id = attributes[:knowledge_base_sub_category_id]
      end

      if attributes.key?(:allow_all_clients_portal_view)
        self.allow_all_clients_portal_view = attributes[:allow_all_clients_portal_view]
      end

      self.customer_updated_flag = attributes[:customer_updated_flag] if attributes.key?(:customer_updated_flag)

      if attributes.key?(:automatic_email_contact_flag)
        self.automatic_email_contact_flag = attributes[:automatic_email_contact_flag]
      end

      if attributes.key?(:automatic_email_resource_flag)
        self.automatic_email_resource_flag = attributes[:automatic_email_resource_flag]
      end

      self.automatic_email_cc_flag = attributes[:automatic_email_cc_flag] if attributes.key?(:automatic_email_cc_flag)

      self.automatic_email_cc = attributes[:automatic_email_cc] if attributes.key?(:automatic_email_cc)

      self.initial_description = attributes[:initial_description] if attributes.key?(:initial_description)

      if attributes.key?(:initial_internal_analysis)
        self.initial_internal_analysis = attributes[:initial_internal_analysis]
      end

      self.initial_resolution = attributes[:initial_resolution] if attributes.key?(:initial_resolution)

      if attributes.key?(:initial_description_from)
        self.initial_description_from = attributes[:initial_description_from]
      end

      self.contact_email_lookup = attributes[:contact_email_lookup] if attributes.key?(:contact_email_lookup)

      self.process_notifications = attributes[:process_notifications] if attributes.key?(:process_notifications)

      self.skip_callback = attributes[:skip_callback] if attributes.key?(:skip_callback)

      self.closed_date = attributes[:closed_date] if attributes.key?(:closed_date)

      self.closed_by = attributes[:closed_by] if attributes.key?(:closed_by)

      self.closed_flag = attributes[:closed_flag] if attributes.key?(:closed_flag)

      self.actual_hours = attributes[:actual_hours] if attributes.key?(:actual_hours)

      self.approved = attributes[:approved] if attributes.key?(:approved)

      self.estimated_expense_cost = attributes[:estimated_expense_cost] if attributes.key?(:estimated_expense_cost)

      if attributes.key?(:estimated_expense_revenue)
        self.estimated_expense_revenue = attributes[:estimated_expense_revenue]
      end

      self.estimated_product_cost = attributes[:estimated_product_cost] if attributes.key?(:estimated_product_cost)

      if attributes.key?(:estimated_product_revenue)
        self.estimated_product_revenue = attributes[:estimated_product_revenue]
      end

      self.estimated_time_cost = attributes[:estimated_time_cost] if attributes.key?(:estimated_time_cost)

      self.estimated_time_revenue = attributes[:estimated_time_revenue] if attributes.key?(:estimated_time_revenue)

      self.billing_method = attributes[:billing_method] if attributes.key?(:billing_method)

      self.billing_amount = attributes[:billing_amount] if attributes.key?(:billing_amount)

      self.hourly_rate = attributes[:hourly_rate] if attributes.key?(:hourly_rate)

      self.sub_billing_method = attributes[:sub_billing_method] if attributes.key?(:sub_billing_method)

      self.sub_billing_amount = attributes[:sub_billing_amount] if attributes.key?(:sub_billing_amount)

      self.sub_date_accepted = attributes[:sub_date_accepted] if attributes.key?(:sub_date_accepted)

      self.date_resolved = attributes[:date_resolved] if attributes.key?(:date_resolved)

      self.date_resplan = attributes[:date_resplan] if attributes.key?(:date_resplan)

      self.date_responded = attributes[:date_responded] if attributes.key?(:date_responded)

      self.resolve_minutes = attributes[:resolve_minutes] if attributes.key?(:resolve_minutes)

      self.res_plan_minutes = attributes[:res_plan_minutes] if attributes.key?(:res_plan_minutes)

      self.respond_minutes = attributes[:respond_minutes] if attributes.key?(:respond_minutes)

      self.is_in_sla = attributes[:is_in_sla] if attributes.key?(:is_in_sla)

      self.knowledge_base_link_id = attributes[:knowledge_base_link_id] if attributes.key?(:knowledge_base_link_id)

      self.resources = attributes[:resources] if attributes.key?(:resources)

      self.parent_ticket_id = attributes[:parent_ticket_id] if attributes.key?(:parent_ticket_id)

      self.has_child_ticket = attributes[:has_child_ticket] if attributes.key?(:has_child_ticket)

      if attributes.key?(:has_merged_child_ticket_flag)
        self.has_merged_child_ticket_flag = attributes[:has_merged_child_ticket_flag]
      end

      if attributes.key?(:knowledge_base_link_type)
        self.knowledge_base_link_type = attributes[:knowledge_base_link_type]
      end

      self.bill_time = attributes[:bill_time] if attributes.key?(:bill_time)

      self.bill_expenses = attributes[:bill_expenses] if attributes.key?(:bill_expenses)

      self.bill_products = attributes[:bill_products] if attributes.key?(:bill_products)

      self.predecessor_type = attributes[:predecessor_type] if attributes.key?(:predecessor_type)

      self.predecessor_id = attributes[:predecessor_id] if attributes.key?(:predecessor_id)

      self.predecessor_closed_flag = attributes[:predecessor_closed_flag] if attributes.key?(:predecessor_closed_flag)

      self.lag_days = attributes[:lag_days] if attributes.key?(:lag_days)

      if attributes.key?(:lag_nonworking_days_flag)
        self.lag_nonworking_days_flag = attributes[:lag_nonworking_days_flag]
      end

      self.estimated_start_date = attributes[:estimated_start_date] if attributes.key?(:estimated_start_date)

      self.duration = attributes[:duration] if attributes.key?(:duration)

      self.location = attributes[:location] if attributes.key?(:location)

      self.department = attributes[:department] if attributes.key?(:department)

      self.mobile_guid = attributes[:mobile_guid] if attributes.key?(:mobile_guid)

      self.sla = attributes[:sla] if attributes.key?(:sla)

      self.sla_status = attributes[:sla_status] if attributes.key?(:sla_status)

      self.request_for_change_flag = attributes[:request_for_change_flag] if attributes.key?(:request_for_change_flag)

      self.currency = attributes[:currency] if attributes.key?(:currency)

      self.merged_parent_ticket = attributes[:merged_parent_ticket] if attributes.key?(:merged_parent_ticket)

      if attributes.key?(:integrator_tags) && (value = attributes[:integrator_tags]).is_a?(Array)
        self.integrator_tags = value
      end

      if attributes.key?(:_info) && (value = attributes[:_info]).is_a?(Hash)
        self._info = value
      end

      if attributes.key?(:escalation_start_date_utc)
        self.escalation_start_date_utc = attributes[:escalation_start_date_utc]
      end

      self.escalation_level = attributes[:escalation_level] if attributes.key?(:escalation_level)

      self.minutes_before_waiting = attributes[:minutes_before_waiting] if attributes.key?(:minutes_before_waiting)

      if attributes.key?(:responded_skipped_minutes)
        self.responded_skipped_minutes = attributes[:responded_skipped_minutes]
      end

      self.resplan_skipped_minutes = attributes[:resplan_skipped_minutes] if attributes.key?(:resplan_skipped_minutes)

      self.responded_hours = attributes[:responded_hours] if attributes.key?(:responded_hours)

      self.responded_by = attributes[:responded_by] if attributes.key?(:responded_by)

      self.resplan_hours = attributes[:resplan_hours] if attributes.key?(:resplan_hours)

      self.resplan_by = attributes[:resplan_by] if attributes.key?(:resplan_by)

      self.resolution_hours = attributes[:resolution_hours] if attributes.key?(:resolution_hours)

      self.resolved_by = attributes[:resolved_by] if attributes.key?(:resolved_by)

      self.minutes_waiting = attributes[:minutes_waiting] if attributes.key?(:minutes_waiting)

      return unless attributes.key?(:custom_fields)

      if (value = attributes[:custom_fields]).is_a?(Array)
        self.custom_fields = value
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = []
      invalid_properties.push('invalid value for "summary", summary cannot be nil.') if @summary.nil?

      invalid_properties.push('invalid value for "company", company cannot be nil.') if @company.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @summary.nil?
      return false if @company.nil?

      record_type_validator = EnumAttributeValidator.new('String', %w[ProjectIssue ProjectTicket ServiceTicket])
      return false unless record_type_validator.valid?(@record_type)

      severity_validator = EnumAttributeValidator.new('String', %w[Low Medium High])
      return false unless severity_validator.valid?(@severity)

      impact_validator = EnumAttributeValidator.new('String', %w[Low Medium High])
      return false unless impact_validator.valid?(@impact)

      billing_method_validator = EnumAttributeValidator.new('String',
                                                            %w[ActualRates FixedFee NotToExceed OverrideRate])
      return false unless billing_method_validator.valid?(@billing_method)

      sub_billing_method_validator = EnumAttributeValidator.new('String',
                                                                %w[ActualRates FixedFee NotToExceed OverrideRate])
      return false unless sub_billing_method_validator.valid?(@sub_billing_method)

      knowledge_base_link_type_validator = EnumAttributeValidator.new('String',
                                                                      %w[Activity ProjectIssue KnowledgeBaseArticle
                                                                         ProjectTicket ServiceTicket Time])
      return false unless knowledge_base_link_type_validator.valid?(@knowledge_base_link_type)

      bill_time_validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      return false unless bill_time_validator.valid?(@bill_time)

      bill_expenses_validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      return false unless bill_expenses_validator.valid?(@bill_expenses)

      bill_products_validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      return false unless bill_products_validator.valid?(@bill_products)

      predecessor_type_validator = EnumAttributeValidator.new('String', %w[Ticket Phase])
      return false unless predecessor_type_validator.valid?(@predecessor_type)

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] summary Value to be assigned
    def summary=(summary)
      raise ArgumentError, 'summary cannot be nil' if summary.nil?

      @summary = summary
    end

    # Custom attribute writer method with validation
    # @param [Object] company Value to be assigned
    def company=(company)
      raise ArgumentError, 'company cannot be nil' if company.nil?

      @company = company
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] record_type Object to be assigned
    def record_type=(record_type)
      validator = EnumAttributeValidator.new('String', %w[ProjectIssue ProjectTicket ServiceTicket])
      unless validator.valid?(record_type)
        raise ArgumentError, "invalid value for \"record_type\", must be one of #{validator.allowable_values}."
      end

      @record_type = record_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] severity Object to be assigned
    def severity=(severity)
      validator = EnumAttributeValidator.new('String', %w[Low Medium High])
      unless validator.valid?(severity)
        raise ArgumentError, "invalid value for \"severity\", must be one of #{validator.allowable_values}."
      end

      @severity = severity
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] impact Object to be assigned
    def impact=(impact)
      validator = EnumAttributeValidator.new('String', %w[Low Medium High])
      unless validator.valid?(impact)
        raise ArgumentError, "invalid value for \"impact\", must be one of #{validator.allowable_values}."
      end

      @impact = impact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billing_method Object to be assigned
    def billing_method=(billing_method)
      validator = EnumAttributeValidator.new('String', %w[ActualRates FixedFee NotToExceed OverrideRate])
      unless validator.valid?(billing_method)
        raise ArgumentError, "invalid value for \"billing_method\", must be one of #{validator.allowable_values}."
      end

      @billing_method = billing_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sub_billing_method Object to be assigned
    def sub_billing_method=(sub_billing_method)
      validator = EnumAttributeValidator.new('String', %w[ActualRates FixedFee NotToExceed OverrideRate])
      unless validator.valid?(sub_billing_method)
        raise ArgumentError, "invalid value for \"sub_billing_method\", must be one of #{validator.allowable_values}."
      end

      @sub_billing_method = sub_billing_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] knowledge_base_link_type Object to be assigned
    def knowledge_base_link_type=(knowledge_base_link_type)
      validator = EnumAttributeValidator.new('String',
                                             %w[Activity ProjectIssue KnowledgeBaseArticle ProjectTicket ServiceTicket
                                                Time])
      unless validator.valid?(knowledge_base_link_type)
        raise ArgumentError,
              "invalid value for \"knowledge_base_link_type\", must be one of #{validator.allowable_values}."
      end

      @knowledge_base_link_type = knowledge_base_link_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bill_time Object to be assigned
    def bill_time=(bill_time)
      validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      unless validator.valid?(bill_time)
        raise ArgumentError, "invalid value for \"bill_time\", must be one of #{validator.allowable_values}."
      end

      @bill_time = bill_time
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bill_expenses Object to be assigned
    def bill_expenses=(bill_expenses)
      validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      unless validator.valid?(bill_expenses)
        raise ArgumentError, "invalid value for \"bill_expenses\", must be one of #{validator.allowable_values}."
      end

      @bill_expenses = bill_expenses
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bill_products Object to be assigned
    def bill_products=(bill_products)
      validator = EnumAttributeValidator.new('String', %w[Billable DoNotBill NoCharge NoDefault])
      unless validator.valid?(bill_products)
        raise ArgumentError, "invalid value for \"bill_products\", must be one of #{validator.allowable_values}."
      end

      @bill_products = bill_products
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] predecessor_type Object to be assigned
    def predecessor_type=(predecessor_type)
      validator = EnumAttributeValidator.new('String', %w[Ticket Phase])
      unless validator.valid?(predecessor_type)
        raise ArgumentError, "invalid value for \"predecessor_type\", must be one of #{validator.allowable_values}."
      end

      @predecessor_type = predecessor_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        summary == other.summary &&
        company == other.company &&
        id == other.id &&
        record_type == other.record_type &&
        board == other.board &&
        status == other.status &&
        work_role == other.work_role &&
        work_type == other.work_type &&
        site == other.site &&
        site_name == other.site_name &&
        address_line1 == other.address_line1 &&
        address_line2 == other.address_line2 &&
        city == other.city &&
        state_identifier == other.state_identifier &&
        zip == other.zip &&
        country == other.country &&
        contact == other.contact &&
        contact_name == other.contact_name &&
        contact_phone_number == other.contact_phone_number &&
        contact_phone_extension == other.contact_phone_extension &&
        contact_email_address == other.contact_email_address &&
        type == other.type &&
        sub_type == other.sub_type &&
        item == other.item &&
        team == other.team &&
        owner == other.owner &&
        priority == other.priority &&
        service_location == other.service_location &&
        source == other.source &&
        required_date == other.required_date &&
        budget_hours == other.budget_hours &&
        opportunity == other.opportunity &&
        agreement == other.agreement &&
        agreement_type == other.agreement_type &&
        severity == other.severity &&
        impact == other.impact &&
        external_x_ref == other.external_x_ref &&
        po_number == other.po_number &&
        knowledge_base_category_id == other.knowledge_base_category_id &&
        knowledge_base_sub_category_id == other.knowledge_base_sub_category_id &&
        allow_all_clients_portal_view == other.allow_all_clients_portal_view &&
        customer_updated_flag == other.customer_updated_flag &&
        automatic_email_contact_flag == other.automatic_email_contact_flag &&
        automatic_email_resource_flag == other.automatic_email_resource_flag &&
        automatic_email_cc_flag == other.automatic_email_cc_flag &&
        automatic_email_cc == other.automatic_email_cc &&
        initial_description == other.initial_description &&
        initial_internal_analysis == other.initial_internal_analysis &&
        initial_resolution == other.initial_resolution &&
        initial_description_from == other.initial_description_from &&
        contact_email_lookup == other.contact_email_lookup &&
        process_notifications == other.process_notifications &&
        skip_callback == other.skip_callback &&
        closed_date == other.closed_date &&
        closed_by == other.closed_by &&
        closed_flag == other.closed_flag &&
        actual_hours == other.actual_hours &&
        approved == other.approved &&
        estimated_expense_cost == other.estimated_expense_cost &&
        estimated_expense_revenue == other.estimated_expense_revenue &&
        estimated_product_cost == other.estimated_product_cost &&
        estimated_product_revenue == other.estimated_product_revenue &&
        estimated_time_cost == other.estimated_time_cost &&
        estimated_time_revenue == other.estimated_time_revenue &&
        billing_method == other.billing_method &&
        billing_amount == other.billing_amount &&
        hourly_rate == other.hourly_rate &&
        sub_billing_method == other.sub_billing_method &&
        sub_billing_amount == other.sub_billing_amount &&
        sub_date_accepted == other.sub_date_accepted &&
        date_resolved == other.date_resolved &&
        date_resplan == other.date_resplan &&
        date_responded == other.date_responded &&
        resolve_minutes == other.resolve_minutes &&
        res_plan_minutes == other.res_plan_minutes &&
        respond_minutes == other.respond_minutes &&
        is_in_sla == other.is_in_sla &&
        knowledge_base_link_id == other.knowledge_base_link_id &&
        resources == other.resources &&
        parent_ticket_id == other.parent_ticket_id &&
        has_child_ticket == other.has_child_ticket &&
        has_merged_child_ticket_flag == other.has_merged_child_ticket_flag &&
        knowledge_base_link_type == other.knowledge_base_link_type &&
        bill_time == other.bill_time &&
        bill_expenses == other.bill_expenses &&
        bill_products == other.bill_products &&
        predecessor_type == other.predecessor_type &&
        predecessor_id == other.predecessor_id &&
        predecessor_closed_flag == other.predecessor_closed_flag &&
        lag_days == other.lag_days &&
        lag_nonworking_days_flag == other.lag_nonworking_days_flag &&
        estimated_start_date == other.estimated_start_date &&
        duration == other.duration &&
        location == other.location &&
        department == other.department &&
        mobile_guid == other.mobile_guid &&
        sla == other.sla &&
        sla_status == other.sla_status &&
        request_for_change_flag == other.request_for_change_flag &&
        currency == other.currency &&
        merged_parent_ticket == other.merged_parent_ticket &&
        integrator_tags == other.integrator_tags &&
        _info == other._info &&
        escalation_start_date_utc == other.escalation_start_date_utc &&
        escalation_level == other.escalation_level &&
        minutes_before_waiting == other.minutes_before_waiting &&
        responded_skipped_minutes == other.responded_skipped_minutes &&
        resplan_skipped_minutes == other.resplan_skipped_minutes &&
        responded_hours == other.responded_hours &&
        responded_by == other.responded_by &&
        resplan_hours == other.resplan_hours &&
        resplan_by == other.resplan_by &&
        resolution_hours == other.resolution_hours &&
        resolved_by == other.resolved_by &&
        minutes_waiting == other.minutes_waiting &&
        custom_fields == other.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [summary, company, id, record_type, board, status, work_role, work_type, site, site_name, address_line1,
       address_line2, city, state_identifier, zip, country, contact, contact_name, contact_phone_number, contact_phone_extension, contact_email_address, type, sub_type, item, team, owner, priority, service_location, source, required_date, budget_hours, opportunity, agreement, agreement_type, severity, impact, external_x_ref, po_number, knowledge_base_category_id, knowledge_base_sub_category_id, allow_all_clients_portal_view, customer_updated_flag, automatic_email_contact_flag, automatic_email_resource_flag, automatic_email_cc_flag, automatic_email_cc, initial_description, initial_internal_analysis, initial_resolution, initial_description_from, contact_email_lookup, process_notifications, skip_callback, closed_date, closed_by, closed_flag, actual_hours, approved, estimated_expense_cost, estimated_expense_revenue, estimated_product_cost, estimated_product_revenue, estimated_time_cost, estimated_time_revenue, billing_method, billing_amount, hourly_rate, sub_billing_method, sub_billing_amount, sub_date_accepted, date_resolved, date_resplan, date_responded, resolve_minutes, res_plan_minutes, respond_minutes, is_in_sla, knowledge_base_link_id, resources, parent_ticket_id, has_child_ticket, has_merged_child_ticket_flag, knowledge_base_link_type, bill_time, bill_expenses, bill_products, predecessor_type, predecessor_id, predecessor_closed_flag, lag_days, lag_nonworking_days_flag, estimated_start_date, duration, location, department, mobile_guid, sla, sla_status, request_for_change_flag, currency, merged_parent_ticket, integrator_tags, _info, escalation_start_date_utc, escalation_level, minutes_before_waiting, responded_skipped_minutes, resplan_skipped_minutes, responded_hours, responded_by, resplan_hours, resplan_by, resolution_hours, resolved_by, minutes_waiting, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map do |v|
              _deserialize(::Regexp.last_match(1), v)
            end
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
