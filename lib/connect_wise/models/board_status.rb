# #Connectwise Manage All Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2022.1
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.2.1
#

require 'date'
require 'time'

module ConnectWise
  class BoardStatus
    #  Max length: 50;
    attr_accessor :name

    attr_accessor :id, :board, :sort_order, :display_on_board, :inactive, :closed_status, :time_entry_not_allowed, :default_flag, :escalation_status, :customer_portal_flag, :email_template, :status_indicator, :_info

    #  Max length: 500;
    attr_accessor :customer_portal_description

    #  Max length: 30;
    attr_accessor :custom_status_indicator_name

    class EnumAttributeValidator
      attr_reader :datatype, :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        name: :name,
        id: :id,
        board: :board,
        sort_order: :sortOrder,
        display_on_board: :displayOnBoard,
        inactive: :inactive,
        closed_status: :closedStatus,
        time_entry_not_allowed: :timeEntryNotAllowed,
        default_flag: :defaultFlag,
        escalation_status: :escalationStatus,
        customer_portal_description: :customerPortalDescription,
        customer_portal_flag: :customerPortalFlag,
        email_template: :emailTemplate,
        status_indicator: :statusIndicator,
        custom_status_indicator_name: :customStatusIndicatorName,
        _info: :_info
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        name: :String,
        id: :Integer,
        board: :BoardReference,
        sort_order: :Integer,
        display_on_board: :Boolean,
        inactive: :Boolean,
        closed_status: :Boolean,
        time_entry_not_allowed: :Boolean,
        default_flag: :Boolean,
        escalation_status: :String,
        customer_portal_description: :String,
        customer_portal_flag: :Boolean,
        email_template: :ServiceEmailTemplateReference,
        status_indicator: :StatusIndicatorReference,
        custom_status_indicator_name: :String,
        _info: :'Hash<String, String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new(%i[
                sort_order
                display_on_board
                inactive
                closed_status
                time_entry_not_allowed
                default_flag
                escalation_status
                customer_portal_flag
              ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      raise ArgumentError, 'The input argument (attributes) must be a hash in `ConnectWise::BoardStatus` initialize method' unless attributes.is_a?(Hash)

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        raise ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::BoardStatus`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect unless self.class.attribute_map.key?(k.to_sym)

        h[k.to_sym] = v
      end

      self.name = attributes[:name] if attributes.key?(:name)

      self.id = attributes[:id] if attributes.key?(:id)

      self.board = attributes[:board] if attributes.key?(:board)

      self.sort_order = attributes[:sort_order] if attributes.key?(:sort_order)

      self.display_on_board = attributes[:display_on_board] if attributes.key?(:display_on_board)

      self.inactive = attributes[:inactive] if attributes.key?(:inactive)

      self.closed_status = attributes[:closed_status] if attributes.key?(:closed_status)

      self.time_entry_not_allowed = attributes[:time_entry_not_allowed] if attributes.key?(:time_entry_not_allowed)

      self.default_flag = attributes[:default_flag] if attributes.key?(:default_flag)

      self.escalation_status = attributes[:escalation_status] if attributes.key?(:escalation_status)

      self.customer_portal_description = attributes[:customer_portal_description] if attributes.key?(:customer_portal_description)

      self.customer_portal_flag = attributes[:customer_portal_flag] if attributes.key?(:customer_portal_flag)

      self.email_template = attributes[:email_template] if attributes.key?(:email_template)

      self.status_indicator = attributes[:status_indicator] if attributes.key?(:status_indicator)

      self.custom_status_indicator_name = attributes[:custom_status_indicator_name] if attributes.key?(:custom_status_indicator_name)

      return unless attributes.key?(:_info)
      return unless (value = attributes[:_info]).is_a?(Hash)

      self._info = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      invalid_properties.push('invalid value for "name", name cannot be nil.') if @name.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?

      escalation_status_validator = EnumAttributeValidator.new('String', %w[NotResponded Responded ResolutionPlan Resolved NoEscalation])
      return false unless escalation_status_validator.valid?(@escalation_status)

      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] escalation_status Object to be assigned
    def escalation_status=(escalation_status)
      validator = EnumAttributeValidator.new('String', %w[NotResponded Responded ResolutionPlan Resolved NoEscalation])
      raise ArgumentError, "invalid value for \"escalation_status\", must be one of #{validator.allowable_values}." unless validator.valid?(escalation_status)

      @escalation_status = escalation_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        name == other.name &&
        id == other.id &&
        board == other.board &&
        sort_order == other.sort_order &&
        display_on_board == other.display_on_board &&
        inactive == other.inactive &&
        closed_status == other.closed_status &&
        time_entry_not_allowed == other.time_entry_not_allowed &&
        default_flag == other.default_flag &&
        escalation_status == other.escalation_status &&
        customer_portal_description == other.customer_portal_description &&
        customer_portal_flag == other.customer_portal_flag &&
        email_template == other.email_template &&
        status_indicator == other.status_indicator &&
        custom_status_indicator_name == other.custom_status_indicator_name &&
        _info == other._info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, id, board, sort_order, display_on_board, inactive, closed_status, time_entry_not_allowed, default_flag, escalation_status, customer_portal_description, customer_portal_flag, email_template, status_indicator, custom_status_indicator_name, _info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize(::Regexp.last_match(1), v) }) if attributes[self.class.attribute_map[key]].is_a?(Array)
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
