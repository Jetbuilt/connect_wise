=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class ProductItem
    attr_accessor :billable_option

    attr_accessor :id

    attr_accessor :catalog_item

    #  Max length: 2000;
    attr_accessor :description

    attr_accessor :sequence_number

    attr_accessor :quantity

    attr_accessor :price

    attr_accessor :cost

    attr_accessor :discount

    attr_accessor :agreement_amount

    attr_accessor :price_method

    attr_accessor :agreement

    #  Required On Updates;
    attr_accessor :location_id

    #  Required On Updates;
    attr_accessor :business_unit_id

    attr_accessor :vendor

    #  Max length: 50;
    attr_accessor :vendor_sku

    attr_accessor :taxable_flag

    attr_accessor :dropship_flag

    attr_accessor :special_order_flag

    attr_accessor :phase_product_flag

    attr_accessor :cancelled_flag

    attr_accessor :quantity_cancelled

    #  Max length: 100;
    attr_accessor :cancelled_reason

    #  Max length: 6000; Required On Updates;
    attr_accessor :customer_description

    #  Max length: 1000;
    attr_accessor :internal_notes

    attr_accessor :product_supplied_flag

    attr_accessor :sub_contractor_ship_to_id

    attr_accessor :sub_contractor_amount_limit

    attr_accessor :recurring

    attr_accessor :sla

    attr_accessor :entity_type

    attr_accessor :ticket

    attr_accessor :project

    attr_accessor :phase

    attr_accessor :sales_order

    attr_accessor :opportunity

    attr_accessor :invoice

    attr_accessor :warehouse_id

    attr_accessor :warehouse_bin_id

    attr_accessor :calculated_price_flag

    attr_accessor :calculated_cost_flag

    attr_accessor :forecast_detail_id

    attr_accessor :cancelled_by

    attr_accessor :cancelled_date

    attr_accessor :warehouse

    attr_accessor :warehouse_bin

    attr_accessor :purchase_date

    attr_accessor :integration_x_ref

    attr_accessor :list_price

    attr_accessor :serial_number_ids

    attr_accessor :company

    attr_accessor :forecast_status

    attr_accessor :product_class

    attr_accessor :need_to_purchase_flag

    attr_accessor :need_to_order_quantity

    attr_accessor :minimum_stock_flag

    #  Max length: 10;
    attr_accessor :ship_set

    attr_accessor :calculated_price

    attr_accessor :calculated_cost

    attr_accessor :invoice_grouping

    attr_accessor :po_approved_flag

    attr_accessor :add_components_flag

    attr_accessor :ignore_pricing_schedules_flag

    attr_accessor :_info

    attr_accessor :bypass_forecast_update

    attr_accessor :custom_fields

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'billable_option' => :'billableOption',
        :'id' => :'id',
        :'catalog_item' => :'catalogItem',
        :'description' => :'description',
        :'sequence_number' => :'sequenceNumber',
        :'quantity' => :'quantity',
        :'price' => :'price',
        :'cost' => :'cost',
        :'discount' => :'discount',
        :'agreement_amount' => :'agreementAmount',
        :'price_method' => :'priceMethod',
        :'agreement' => :'agreement',
        :'location_id' => :'locationId',
        :'business_unit_id' => :'businessUnitId',
        :'vendor' => :'vendor',
        :'vendor_sku' => :'vendorSku',
        :'taxable_flag' => :'taxableFlag',
        :'dropship_flag' => :'dropshipFlag',
        :'special_order_flag' => :'specialOrderFlag',
        :'phase_product_flag' => :'phaseProductFlag',
        :'cancelled_flag' => :'cancelledFlag',
        :'quantity_cancelled' => :'quantityCancelled',
        :'cancelled_reason' => :'cancelledReason',
        :'customer_description' => :'customerDescription',
        :'internal_notes' => :'internalNotes',
        :'product_supplied_flag' => :'productSuppliedFlag',
        :'sub_contractor_ship_to_id' => :'subContractorShipToId',
        :'sub_contractor_amount_limit' => :'subContractorAmountLimit',
        :'recurring' => :'recurring',
        :'sla' => :'sla',
        :'entity_type' => :'entityType',
        :'ticket' => :'ticket',
        :'project' => :'project',
        :'phase' => :'phase',
        :'sales_order' => :'salesOrder',
        :'opportunity' => :'opportunity',
        :'invoice' => :'invoice',
        :'warehouse_id' => :'warehouseId',
        :'warehouse_bin_id' => :'warehouseBinId',
        :'calculated_price_flag' => :'calculatedPriceFlag',
        :'calculated_cost_flag' => :'calculatedCostFlag',
        :'forecast_detail_id' => :'forecastDetailId',
        :'cancelled_by' => :'cancelledBy',
        :'cancelled_date' => :'cancelledDate',
        :'warehouse' => :'warehouse',
        :'warehouse_bin' => :'warehouseBin',
        :'purchase_date' => :'purchaseDate',
        :'integration_x_ref' => :'integrationXRef',
        :'list_price' => :'listPrice',
        :'serial_number_ids' => :'serialNumberIds',
        :'company' => :'company',
        :'forecast_status' => :'forecastStatus',
        :'product_class' => :'productClass',
        :'need_to_purchase_flag' => :'needToPurchaseFlag',
        :'need_to_order_quantity' => :'needToOrderQuantity',
        :'minimum_stock_flag' => :'minimumStockFlag',
        :'ship_set' => :'shipSet',
        :'calculated_price' => :'calculatedPrice',
        :'calculated_cost' => :'calculatedCost',
        :'invoice_grouping' => :'invoiceGrouping',
        :'po_approved_flag' => :'poApprovedFlag',
        :'add_components_flag' => :'addComponentsFlag',
        :'ignore_pricing_schedules_flag' => :'ignorePricingSchedulesFlag',
        :'_info' => :'_info',
        :'bypass_forecast_update' => :'bypassForecastUpdate',
        :'custom_fields' => :'customFields'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'billable_option' => :'String',
        :'id' => :'Integer',
        :'catalog_item' => :'CatalogItemReference',
        :'description' => :'String',
        :'sequence_number' => :'Float',
        :'quantity' => :'Float',
        :'price' => :'Float',
        :'cost' => :'Float',
        :'discount' => :'Float',
        :'agreement_amount' => :'Float',
        :'price_method' => :'String',
        :'agreement' => :'AgreementReference',
        :'location_id' => :'Integer',
        :'business_unit_id' => :'Integer',
        :'vendor' => :'CompanyReference',
        :'vendor_sku' => :'String',
        :'taxable_flag' => :'Boolean',
        :'dropship_flag' => :'Boolean',
        :'special_order_flag' => :'Boolean',
        :'phase_product_flag' => :'Boolean',
        :'cancelled_flag' => :'Boolean',
        :'quantity_cancelled' => :'Float',
        :'cancelled_reason' => :'String',
        :'customer_description' => :'String',
        :'internal_notes' => :'String',
        :'product_supplied_flag' => :'Boolean',
        :'sub_contractor_ship_to_id' => :'Integer',
        :'sub_contractor_amount_limit' => :'Float',
        :'recurring' => :'ProductRecurring',
        :'sla' => :'SLAReference',
        :'entity_type' => :'EntityTypeReference',
        :'ticket' => :'TicketReference',
        :'project' => :'ProjectReference',
        :'phase' => :'ProjectPhaseReference',
        :'sales_order' => :'SalesOrderReference',
        :'opportunity' => :'OpportunityReference',
        :'invoice' => :'InvoiceReference',
        :'warehouse_id' => :'Integer',
        :'warehouse_bin_id' => :'Integer',
        :'calculated_price_flag' => :'Boolean',
        :'calculated_cost_flag' => :'Boolean',
        :'forecast_detail_id' => :'Integer',
        :'cancelled_by' => :'Integer',
        :'cancelled_date' => :'Time',
        :'warehouse' => :'String',
        :'warehouse_bin' => :'String',
        :'purchase_date' => :'Time',
        :'integration_x_ref' => :'String',
        :'list_price' => :'Float',
        :'serial_number_ids' => :'Array<Integer>',
        :'company' => :'CompanyReference',
        :'forecast_status' => :'OpportunityStatusReference',
        :'product_class' => :'String',
        :'need_to_purchase_flag' => :'Boolean',
        :'need_to_order_quantity' => :'Integer',
        :'minimum_stock_flag' => :'Boolean',
        :'ship_set' => :'String',
        :'calculated_price' => :'Float',
        :'calculated_cost' => :'Float',
        :'invoice_grouping' => :'InvoiceGroupingReference',
        :'po_approved_flag' => :'Boolean',
        :'add_components_flag' => :'Boolean',
        :'ignore_pricing_schedules_flag' => :'Boolean',
        :'_info' => :'Hash<String, String>',
        :'bypass_forecast_update' => :'Boolean',
        :'custom_fields' => :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'billable_option',
        :'sequence_number',
        :'quantity',
        :'price',
        :'cost',
        :'discount',
        :'agreement_amount',
        :'price_method',
        :'location_id',
        :'business_unit_id',
        :'taxable_flag',
        :'dropship_flag',
        :'special_order_flag',
        :'phase_product_flag',
        :'cancelled_flag',
        :'quantity_cancelled',
        :'product_supplied_flag',
        :'sub_contractor_ship_to_id',
        :'sub_contractor_amount_limit',
        :'warehouse_id',
        :'warehouse_bin_id',
        :'calculated_price_flag',
        :'calculated_cost_flag',
        :'forecast_detail_id',
        :'cancelled_by',
        :'list_price',
        :'product_class',
        :'need_to_purchase_flag',
        :'need_to_order_quantity',
        :'minimum_stock_flag',
        :'calculated_price',
        :'calculated_cost',
        :'po_approved_flag',
        :'add_components_flag',
        :'ignore_pricing_schedules_flag',
        :'bypass_forecast_update',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::ProductItem` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::ProductItem`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'billable_option')
        self.billable_option = attributes[:'billable_option']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'catalog_item')
        self.catalog_item = attributes[:'catalog_item']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'sequence_number')
        self.sequence_number = attributes[:'sequence_number']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'cost')
        self.cost = attributes[:'cost']
      end

      if attributes.key?(:'discount')
        self.discount = attributes[:'discount']
      end

      if attributes.key?(:'agreement_amount')
        self.agreement_amount = attributes[:'agreement_amount']
      end

      if attributes.key?(:'price_method')
        self.price_method = attributes[:'price_method']
      end

      if attributes.key?(:'agreement')
        self.agreement = attributes[:'agreement']
      end

      if attributes.key?(:'location_id')
        self.location_id = attributes[:'location_id']
      end

      if attributes.key?(:'business_unit_id')
        self.business_unit_id = attributes[:'business_unit_id']
      end

      if attributes.key?(:'vendor')
        self.vendor = attributes[:'vendor']
      end

      if attributes.key?(:'vendor_sku')
        self.vendor_sku = attributes[:'vendor_sku']
      end

      if attributes.key?(:'taxable_flag')
        self.taxable_flag = attributes[:'taxable_flag']
      end

      if attributes.key?(:'dropship_flag')
        self.dropship_flag = attributes[:'dropship_flag']
      end

      if attributes.key?(:'special_order_flag')
        self.special_order_flag = attributes[:'special_order_flag']
      end

      if attributes.key?(:'phase_product_flag')
        self.phase_product_flag = attributes[:'phase_product_flag']
      end

      if attributes.key?(:'cancelled_flag')
        self.cancelled_flag = attributes[:'cancelled_flag']
      end

      if attributes.key?(:'quantity_cancelled')
        self.quantity_cancelled = attributes[:'quantity_cancelled']
      end

      if attributes.key?(:'cancelled_reason')
        self.cancelled_reason = attributes[:'cancelled_reason']
      end

      if attributes.key?(:'customer_description')
        self.customer_description = attributes[:'customer_description']
      end

      if attributes.key?(:'internal_notes')
        self.internal_notes = attributes[:'internal_notes']
      end

      if attributes.key?(:'product_supplied_flag')
        self.product_supplied_flag = attributes[:'product_supplied_flag']
      end

      if attributes.key?(:'sub_contractor_ship_to_id')
        self.sub_contractor_ship_to_id = attributes[:'sub_contractor_ship_to_id']
      end

      if attributes.key?(:'sub_contractor_amount_limit')
        self.sub_contractor_amount_limit = attributes[:'sub_contractor_amount_limit']
      end

      if attributes.key?(:'recurring')
        self.recurring = attributes[:'recurring']
      end

      if attributes.key?(:'sla')
        self.sla = attributes[:'sla']
      end

      if attributes.key?(:'entity_type')
        self.entity_type = attributes[:'entity_type']
      end

      if attributes.key?(:'ticket')
        self.ticket = attributes[:'ticket']
      end

      if attributes.key?(:'project')
        self.project = attributes[:'project']
      end

      if attributes.key?(:'phase')
        self.phase = attributes[:'phase']
      end

      if attributes.key?(:'sales_order')
        self.sales_order = attributes[:'sales_order']
      end

      if attributes.key?(:'opportunity')
        self.opportunity = attributes[:'opportunity']
      end

      if attributes.key?(:'invoice')
        self.invoice = attributes[:'invoice']
      end

      if attributes.key?(:'warehouse_id')
        self.warehouse_id = attributes[:'warehouse_id']
      end

      if attributes.key?(:'warehouse_bin_id')
        self.warehouse_bin_id = attributes[:'warehouse_bin_id']
      end

      if attributes.key?(:'calculated_price_flag')
        self.calculated_price_flag = attributes[:'calculated_price_flag']
      end

      if attributes.key?(:'calculated_cost_flag')
        self.calculated_cost_flag = attributes[:'calculated_cost_flag']
      end

      if attributes.key?(:'forecast_detail_id')
        self.forecast_detail_id = attributes[:'forecast_detail_id']
      end

      if attributes.key?(:'cancelled_by')
        self.cancelled_by = attributes[:'cancelled_by']
      end

      if attributes.key?(:'cancelled_date')
        self.cancelled_date = attributes[:'cancelled_date']
      end

      if attributes.key?(:'warehouse')
        self.warehouse = attributes[:'warehouse']
      end

      if attributes.key?(:'warehouse_bin')
        self.warehouse_bin = attributes[:'warehouse_bin']
      end

      if attributes.key?(:'purchase_date')
        self.purchase_date = attributes[:'purchase_date']
      end

      if attributes.key?(:'integration_x_ref')
        self.integration_x_ref = attributes[:'integration_x_ref']
      end

      if attributes.key?(:'list_price')
        self.list_price = attributes[:'list_price']
      end

      if attributes.key?(:'serial_number_ids')
        if (value = attributes[:'serial_number_ids']).is_a?(Array)
          self.serial_number_ids = value
        end
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'forecast_status')
        self.forecast_status = attributes[:'forecast_status']
      end

      if attributes.key?(:'product_class')
        self.product_class = attributes[:'product_class']
      end

      if attributes.key?(:'need_to_purchase_flag')
        self.need_to_purchase_flag = attributes[:'need_to_purchase_flag']
      end

      if attributes.key?(:'need_to_order_quantity')
        self.need_to_order_quantity = attributes[:'need_to_order_quantity']
      end

      if attributes.key?(:'minimum_stock_flag')
        self.minimum_stock_flag = attributes[:'minimum_stock_flag']
      end

      if attributes.key?(:'ship_set')
        self.ship_set = attributes[:'ship_set']
      end

      if attributes.key?(:'calculated_price')
        self.calculated_price = attributes[:'calculated_price']
      end

      if attributes.key?(:'calculated_cost')
        self.calculated_cost = attributes[:'calculated_cost']
      end

      if attributes.key?(:'invoice_grouping')
        self.invoice_grouping = attributes[:'invoice_grouping']
      end

      if attributes.key?(:'po_approved_flag')
        self.po_approved_flag = attributes[:'po_approved_flag']
      end

      if attributes.key?(:'add_components_flag')
        self.add_components_flag = attributes[:'add_components_flag']
      end

      if attributes.key?(:'ignore_pricing_schedules_flag')
        self.ignore_pricing_schedules_flag = attributes[:'ignore_pricing_schedules_flag']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end

      if attributes.key?(:'bypass_forecast_update')
        self.bypass_forecast_update = attributes[:'bypass_forecast_update']
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      billable_option_validator = EnumAttributeValidator.new('String', ["Billable", "DoNotBill", "NoCharge"])
      return false unless billable_option_validator.valid?(@billable_option)
      price_method_validator = EnumAttributeValidator.new('String', ["FlatRateForRange", "PercentMarkupFromCost", "PercentMarkdownFromPrice", "PricePerUnit"])
      return false unless price_method_validator.valid?(@price_method)
      product_class_validator = EnumAttributeValidator.new('String', ["Agreement", "Bundle", "Inventory", "NonInventory", "Service"])
      return false unless product_class_validator.valid?(@product_class)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] billable_option Object to be assigned
    def billable_option=(billable_option)
      validator = EnumAttributeValidator.new('String', ["Billable", "DoNotBill", "NoCharge"])
      unless validator.valid?(billable_option)
        fail ArgumentError, "invalid value for \"billable_option\", must be one of #{validator.allowable_values}."
      end
      @billable_option = billable_option
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] price_method Object to be assigned
    def price_method=(price_method)
      validator = EnumAttributeValidator.new('String', ["FlatRateForRange", "PercentMarkupFromCost", "PercentMarkdownFromPrice", "PricePerUnit"])
      unless validator.valid?(price_method)
        fail ArgumentError, "invalid value for \"price_method\", must be one of #{validator.allowable_values}."
      end
      @price_method = price_method
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] product_class Object to be assigned
    def product_class=(product_class)
      validator = EnumAttributeValidator.new('String', ["Agreement", "Bundle", "Inventory", "NonInventory", "Service"])
      unless validator.valid?(product_class)
        fail ArgumentError, "invalid value for \"product_class\", must be one of #{validator.allowable_values}."
      end
      @product_class = product_class
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          billable_option == o.billable_option &&
          id == o.id &&
          catalog_item == o.catalog_item &&
          description == o.description &&
          sequence_number == o.sequence_number &&
          quantity == o.quantity &&
          price == o.price &&
          cost == o.cost &&
          discount == o.discount &&
          agreement_amount == o.agreement_amount &&
          price_method == o.price_method &&
          agreement == o.agreement &&
          location_id == o.location_id &&
          business_unit_id == o.business_unit_id &&
          vendor == o.vendor &&
          vendor_sku == o.vendor_sku &&
          taxable_flag == o.taxable_flag &&
          dropship_flag == o.dropship_flag &&
          special_order_flag == o.special_order_flag &&
          phase_product_flag == o.phase_product_flag &&
          cancelled_flag == o.cancelled_flag &&
          quantity_cancelled == o.quantity_cancelled &&
          cancelled_reason == o.cancelled_reason &&
          customer_description == o.customer_description &&
          internal_notes == o.internal_notes &&
          product_supplied_flag == o.product_supplied_flag &&
          sub_contractor_ship_to_id == o.sub_contractor_ship_to_id &&
          sub_contractor_amount_limit == o.sub_contractor_amount_limit &&
          recurring == o.recurring &&
          sla == o.sla &&
          entity_type == o.entity_type &&
          ticket == o.ticket &&
          project == o.project &&
          phase == o.phase &&
          sales_order == o.sales_order &&
          opportunity == o.opportunity &&
          invoice == o.invoice &&
          warehouse_id == o.warehouse_id &&
          warehouse_bin_id == o.warehouse_bin_id &&
          calculated_price_flag == o.calculated_price_flag &&
          calculated_cost_flag == o.calculated_cost_flag &&
          forecast_detail_id == o.forecast_detail_id &&
          cancelled_by == o.cancelled_by &&
          cancelled_date == o.cancelled_date &&
          warehouse == o.warehouse &&
          warehouse_bin == o.warehouse_bin &&
          purchase_date == o.purchase_date &&
          integration_x_ref == o.integration_x_ref &&
          list_price == o.list_price &&
          serial_number_ids == o.serial_number_ids &&
          company == o.company &&
          forecast_status == o.forecast_status &&
          product_class == o.product_class &&
          need_to_purchase_flag == o.need_to_purchase_flag &&
          need_to_order_quantity == o.need_to_order_quantity &&
          minimum_stock_flag == o.minimum_stock_flag &&
          ship_set == o.ship_set &&
          calculated_price == o.calculated_price &&
          calculated_cost == o.calculated_cost &&
          invoice_grouping == o.invoice_grouping &&
          po_approved_flag == o.po_approved_flag &&
          add_components_flag == o.add_components_flag &&
          ignore_pricing_schedules_flag == o.ignore_pricing_schedules_flag &&
          _info == o._info &&
          bypass_forecast_update == o.bypass_forecast_update &&
          custom_fields == o.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [billable_option, id, catalog_item, description, sequence_number, quantity, price, cost, discount, agreement_amount, price_method, agreement, location_id, business_unit_id, vendor, vendor_sku, taxable_flag, dropship_flag, special_order_flag, phase_product_flag, cancelled_flag, quantity_cancelled, cancelled_reason, customer_description, internal_notes, product_supplied_flag, sub_contractor_ship_to_id, sub_contractor_amount_limit, recurring, sla, entity_type, ticket, project, phase, sales_order, opportunity, invoice, warehouse_id, warehouse_bin_id, calculated_price_flag, calculated_cost_flag, forecast_detail_id, cancelled_by, cancelled_date, warehouse, warehouse_bin, purchase_date, integration_x_ref, list_price, serial_number_ids, company, forecast_status, product_class, need_to_purchase_flag, need_to_order_quantity, minimum_stock_flag, ship_set, calculated_price, calculated_cost, invoice_grouping, po_approved_flag, add_components_flag, ignore_pricing_schedules_flag, _info, bypass_forecast_update, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
