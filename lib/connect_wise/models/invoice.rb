=begin
#Connectwise Manage All Endpoints

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2022.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module ConnectWise
  class Invoice
    attr_accessor :type

    attr_accessor :id

    #  Max length: 15; Required On Updates;
    attr_accessor :invoice_number

    attr_accessor :status

    attr_accessor :company

    attr_accessor :bill_to_company

    attr_accessor :ship_to_company

    attr_accessor :account_number

    attr_accessor :apply_to_type

    attr_accessor :apply_to_id

    #  Max length: 60;
    attr_accessor :attention

    #  Max length: 60;
    attr_accessor :ship_to_attention

    attr_accessor :billing_site

    attr_accessor :billing_site_address_line1

    attr_accessor :billing_site_address_line2

    attr_accessor :billing_site_city

    attr_accessor :billing_site_state

    attr_accessor :billing_site_zip

    attr_accessor :billing_site_country

    attr_accessor :shipping_site

    attr_accessor :shipping_site_address_line1

    attr_accessor :shipping_site_address_line2

    attr_accessor :shipping_site_city

    attr_accessor :shipping_site_state

    attr_accessor :shipping_site_zip

    attr_accessor :shipping_site_country

    attr_accessor :billing_terms

    #  Max length: 50;
    attr_accessor :reference

    #  Max length: 50;
    attr_accessor :customer_po

    # Can be obtained via InvoiceTemplate report
    attr_accessor :template_setup_id

    attr_accessor :invoice_template

    # Can be obtained via InvoiceEmailTemplate report
    attr_accessor :email_template_id

    attr_accessor :add_to_batch_email_list

    attr_accessor :date

    attr_accessor :restrict_downpayment_flag

    #  Required On Updates;
    attr_accessor :location_id

    # departmentId is only required for special invoices
    attr_accessor :department_id

    attr_accessor :territory_id

    attr_accessor :top_comment

    attr_accessor :bottom_comment

    attr_accessor :taxable_flag

    attr_accessor :tax_code

    attr_accessor :internal_notes

    attr_accessor :downpayment_previously_taxed_flag

    attr_accessor :service_total

    attr_accessor :override_down_payment_amount_flag

    attr_accessor :currency

    attr_accessor :due_date

    attr_accessor :expense_total

    attr_accessor :product_total

    attr_accessor :previous_progress_applied

    attr_accessor :service_adjustment_amount

    attr_accessor :agreement_amount

    attr_accessor :downpayment_applied

    attr_accessor :subtotal

    attr_accessor :total

    attr_accessor :remaining_downpayment

    attr_accessor :sales_tax

    attr_accessor :adjustment_reason

    attr_accessor :adjusted_by

    attr_accessor :payments

    attr_accessor :credits

    attr_accessor :balance

    attr_accessor :special_invoice_flag

    attr_accessor :billing_setup_reference

    attr_accessor :ticket

    attr_accessor :project

    attr_accessor :phase

    attr_accessor :sales_order

    attr_accessor :agreement

    attr_accessor :_info

    attr_accessor :custom_fields

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'id' => :'id',
        :'invoice_number' => :'invoiceNumber',
        :'status' => :'status',
        :'company' => :'company',
        :'bill_to_company' => :'billToCompany',
        :'ship_to_company' => :'shipToCompany',
        :'account_number' => :'accountNumber',
        :'apply_to_type' => :'applyToType',
        :'apply_to_id' => :'applyToId',
        :'attention' => :'attention',
        :'ship_to_attention' => :'shipToAttention',
        :'billing_site' => :'billingSite',
        :'billing_site_address_line1' => :'billingSiteAddressLine1',
        :'billing_site_address_line2' => :'billingSiteAddressLine2',
        :'billing_site_city' => :'billingSiteCity',
        :'billing_site_state' => :'billingSiteState',
        :'billing_site_zip' => :'billingSiteZip',
        :'billing_site_country' => :'billingSiteCountry',
        :'shipping_site' => :'shippingSite',
        :'shipping_site_address_line1' => :'shippingSiteAddressLine1',
        :'shipping_site_address_line2' => :'shippingSiteAddressLine2',
        :'shipping_site_city' => :'shippingSiteCity',
        :'shipping_site_state' => :'shippingSiteState',
        :'shipping_site_zip' => :'shippingSiteZip',
        :'shipping_site_country' => :'shippingSiteCountry',
        :'billing_terms' => :'billingTerms',
        :'reference' => :'reference',
        :'customer_po' => :'customerPO',
        :'template_setup_id' => :'templateSetupId',
        :'invoice_template' => :'invoiceTemplate',
        :'email_template_id' => :'emailTemplateId',
        :'add_to_batch_email_list' => :'addToBatchEmailList',
        :'date' => :'date',
        :'restrict_downpayment_flag' => :'restrictDownpaymentFlag',
        :'location_id' => :'locationId',
        :'department_id' => :'departmentId',
        :'territory_id' => :'territoryId',
        :'top_comment' => :'topComment',
        :'bottom_comment' => :'bottomComment',
        :'taxable_flag' => :'taxableFlag',
        :'tax_code' => :'taxCode',
        :'internal_notes' => :'internalNotes',
        :'downpayment_previously_taxed_flag' => :'downpaymentPreviouslyTaxedFlag',
        :'service_total' => :'serviceTotal',
        :'override_down_payment_amount_flag' => :'overrideDownPaymentAmountFlag',
        :'currency' => :'currency',
        :'due_date' => :'dueDate',
        :'expense_total' => :'expenseTotal',
        :'product_total' => :'productTotal',
        :'previous_progress_applied' => :'previousProgressApplied',
        :'service_adjustment_amount' => :'serviceAdjustmentAmount',
        :'agreement_amount' => :'agreementAmount',
        :'downpayment_applied' => :'downpaymentApplied',
        :'subtotal' => :'subtotal',
        :'total' => :'total',
        :'remaining_downpayment' => :'remainingDownpayment',
        :'sales_tax' => :'salesTax',
        :'adjustment_reason' => :'adjustmentReason',
        :'adjusted_by' => :'adjustedBy',
        :'payments' => :'payments',
        :'credits' => :'credits',
        :'balance' => :'balance',
        :'special_invoice_flag' => :'specialInvoiceFlag',
        :'billing_setup_reference' => :'billingSetupReference',
        :'ticket' => :'ticket',
        :'project' => :'project',
        :'phase' => :'phase',
        :'sales_order' => :'salesOrder',
        :'agreement' => :'agreement',
        :'_info' => :'_info',
        :'custom_fields' => :'customFields'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'type' => :'String',
        :'id' => :'Integer',
        :'invoice_number' => :'String',
        :'status' => :'BillingStatusReference',
        :'company' => :'CompanyReference',
        :'bill_to_company' => :'CompanyReference',
        :'ship_to_company' => :'CompanyReference',
        :'account_number' => :'String',
        :'apply_to_type' => :'String',
        :'apply_to_id' => :'Integer',
        :'attention' => :'String',
        :'ship_to_attention' => :'String',
        :'billing_site' => :'SiteReference',
        :'billing_site_address_line1' => :'String',
        :'billing_site_address_line2' => :'String',
        :'billing_site_city' => :'String',
        :'billing_site_state' => :'String',
        :'billing_site_zip' => :'String',
        :'billing_site_country' => :'String',
        :'shipping_site' => :'SiteReference',
        :'shipping_site_address_line1' => :'String',
        :'shipping_site_address_line2' => :'String',
        :'shipping_site_city' => :'String',
        :'shipping_site_state' => :'String',
        :'shipping_site_zip' => :'String',
        :'shipping_site_country' => :'String',
        :'billing_terms' => :'BillingTermsReference',
        :'reference' => :'String',
        :'customer_po' => :'String',
        :'template_setup_id' => :'Integer',
        :'invoice_template' => :'InvoiceTemplateDetailReference',
        :'email_template_id' => :'Integer',
        :'add_to_batch_email_list' => :'Boolean',
        :'date' => :'Time',
        :'restrict_downpayment_flag' => :'Boolean',
        :'location_id' => :'Integer',
        :'department_id' => :'Integer',
        :'territory_id' => :'Integer',
        :'top_comment' => :'String',
        :'bottom_comment' => :'String',
        :'taxable_flag' => :'Boolean',
        :'tax_code' => :'TaxCodeReference',
        :'internal_notes' => :'String',
        :'downpayment_previously_taxed_flag' => :'Boolean',
        :'service_total' => :'Float',
        :'override_down_payment_amount_flag' => :'Boolean',
        :'currency' => :'CurrencyReference',
        :'due_date' => :'Time',
        :'expense_total' => :'Float',
        :'product_total' => :'Float',
        :'previous_progress_applied' => :'Float',
        :'service_adjustment_amount' => :'Float',
        :'agreement_amount' => :'Float',
        :'downpayment_applied' => :'Float',
        :'subtotal' => :'Float',
        :'total' => :'Float',
        :'remaining_downpayment' => :'Float',
        :'sales_tax' => :'Float',
        :'adjustment_reason' => :'String',
        :'adjusted_by' => :'String',
        :'payments' => :'Float',
        :'credits' => :'Float',
        :'balance' => :'Float',
        :'special_invoice_flag' => :'Boolean',
        :'billing_setup_reference' => :'BillingSetupReference',
        :'ticket' => :'TicketReference',
        :'project' => :'ProjectReference',
        :'phase' => :'ProjectPhaseReference',
        :'sales_order' => :'SalesOrderReference',
        :'agreement' => :'AgreementReference',
        :'_info' => :'Hash<String, String>',
        :'custom_fields' => :'Array<CustomFieldValue>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'type',
        :'apply_to_type',
        :'apply_to_id',
        :'template_setup_id',
        :'email_template_id',
        :'add_to_batch_email_list',
        :'restrict_downpayment_flag',
        :'location_id',
        :'department_id',
        :'territory_id',
        :'taxable_flag',
        :'downpayment_previously_taxed_flag',
        :'service_total',
        :'override_down_payment_amount_flag',
        :'expense_total',
        :'product_total',
        :'previous_progress_applied',
        :'service_adjustment_amount',
        :'agreement_amount',
        :'downpayment_applied',
        :'subtotal',
        :'total',
        :'remaining_downpayment',
        :'sales_tax',
        :'payments',
        :'credits',
        :'balance',
        :'special_invoice_flag',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ConnectWise::Invoice` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ConnectWise::Invoice`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'invoice_number')
        self.invoice_number = attributes[:'invoice_number']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'bill_to_company')
        self.bill_to_company = attributes[:'bill_to_company']
      end

      if attributes.key?(:'ship_to_company')
        self.ship_to_company = attributes[:'ship_to_company']
      end

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.key?(:'apply_to_type')
        self.apply_to_type = attributes[:'apply_to_type']
      end

      if attributes.key?(:'apply_to_id')
        self.apply_to_id = attributes[:'apply_to_id']
      end

      if attributes.key?(:'attention')
        self.attention = attributes[:'attention']
      end

      if attributes.key?(:'ship_to_attention')
        self.ship_to_attention = attributes[:'ship_to_attention']
      end

      if attributes.key?(:'billing_site')
        self.billing_site = attributes[:'billing_site']
      end

      if attributes.key?(:'billing_site_address_line1')
        self.billing_site_address_line1 = attributes[:'billing_site_address_line1']
      end

      if attributes.key?(:'billing_site_address_line2')
        self.billing_site_address_line2 = attributes[:'billing_site_address_line2']
      end

      if attributes.key?(:'billing_site_city')
        self.billing_site_city = attributes[:'billing_site_city']
      end

      if attributes.key?(:'billing_site_state')
        self.billing_site_state = attributes[:'billing_site_state']
      end

      if attributes.key?(:'billing_site_zip')
        self.billing_site_zip = attributes[:'billing_site_zip']
      end

      if attributes.key?(:'billing_site_country')
        self.billing_site_country = attributes[:'billing_site_country']
      end

      if attributes.key?(:'shipping_site')
        self.shipping_site = attributes[:'shipping_site']
      end

      if attributes.key?(:'shipping_site_address_line1')
        self.shipping_site_address_line1 = attributes[:'shipping_site_address_line1']
      end

      if attributes.key?(:'shipping_site_address_line2')
        self.shipping_site_address_line2 = attributes[:'shipping_site_address_line2']
      end

      if attributes.key?(:'shipping_site_city')
        self.shipping_site_city = attributes[:'shipping_site_city']
      end

      if attributes.key?(:'shipping_site_state')
        self.shipping_site_state = attributes[:'shipping_site_state']
      end

      if attributes.key?(:'shipping_site_zip')
        self.shipping_site_zip = attributes[:'shipping_site_zip']
      end

      if attributes.key?(:'shipping_site_country')
        self.shipping_site_country = attributes[:'shipping_site_country']
      end

      if attributes.key?(:'billing_terms')
        self.billing_terms = attributes[:'billing_terms']
      end

      if attributes.key?(:'reference')
        self.reference = attributes[:'reference']
      end

      if attributes.key?(:'customer_po')
        self.customer_po = attributes[:'customer_po']
      end

      if attributes.key?(:'template_setup_id')
        self.template_setup_id = attributes[:'template_setup_id']
      end

      if attributes.key?(:'invoice_template')
        self.invoice_template = attributes[:'invoice_template']
      end

      if attributes.key?(:'email_template_id')
        self.email_template_id = attributes[:'email_template_id']
      end

      if attributes.key?(:'add_to_batch_email_list')
        self.add_to_batch_email_list = attributes[:'add_to_batch_email_list']
      end

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.key?(:'restrict_downpayment_flag')
        self.restrict_downpayment_flag = attributes[:'restrict_downpayment_flag']
      end

      if attributes.key?(:'location_id')
        self.location_id = attributes[:'location_id']
      end

      if attributes.key?(:'department_id')
        self.department_id = attributes[:'department_id']
      end

      if attributes.key?(:'territory_id')
        self.territory_id = attributes[:'territory_id']
      end

      if attributes.key?(:'top_comment')
        self.top_comment = attributes[:'top_comment']
      end

      if attributes.key?(:'bottom_comment')
        self.bottom_comment = attributes[:'bottom_comment']
      end

      if attributes.key?(:'taxable_flag')
        self.taxable_flag = attributes[:'taxable_flag']
      end

      if attributes.key?(:'tax_code')
        self.tax_code = attributes[:'tax_code']
      end

      if attributes.key?(:'internal_notes')
        self.internal_notes = attributes[:'internal_notes']
      end

      if attributes.key?(:'downpayment_previously_taxed_flag')
        self.downpayment_previously_taxed_flag = attributes[:'downpayment_previously_taxed_flag']
      end

      if attributes.key?(:'service_total')
        self.service_total = attributes[:'service_total']
      end

      if attributes.key?(:'override_down_payment_amount_flag')
        self.override_down_payment_amount_flag = attributes[:'override_down_payment_amount_flag']
      end

      if attributes.key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.key?(:'due_date')
        self.due_date = attributes[:'due_date']
      end

      if attributes.key?(:'expense_total')
        self.expense_total = attributes[:'expense_total']
      end

      if attributes.key?(:'product_total')
        self.product_total = attributes[:'product_total']
      end

      if attributes.key?(:'previous_progress_applied')
        self.previous_progress_applied = attributes[:'previous_progress_applied']
      end

      if attributes.key?(:'service_adjustment_amount')
        self.service_adjustment_amount = attributes[:'service_adjustment_amount']
      end

      if attributes.key?(:'agreement_amount')
        self.agreement_amount = attributes[:'agreement_amount']
      end

      if attributes.key?(:'downpayment_applied')
        self.downpayment_applied = attributes[:'downpayment_applied']
      end

      if attributes.key?(:'subtotal')
        self.subtotal = attributes[:'subtotal']
      end

      if attributes.key?(:'total')
        self.total = attributes[:'total']
      end

      if attributes.key?(:'remaining_downpayment')
        self.remaining_downpayment = attributes[:'remaining_downpayment']
      end

      if attributes.key?(:'sales_tax')
        self.sales_tax = attributes[:'sales_tax']
      end

      if attributes.key?(:'adjustment_reason')
        self.adjustment_reason = attributes[:'adjustment_reason']
      end

      if attributes.key?(:'adjusted_by')
        self.adjusted_by = attributes[:'adjusted_by']
      end

      if attributes.key?(:'payments')
        self.payments = attributes[:'payments']
      end

      if attributes.key?(:'credits')
        self.credits = attributes[:'credits']
      end

      if attributes.key?(:'balance')
        self.balance = attributes[:'balance']
      end

      if attributes.key?(:'special_invoice_flag')
        self.special_invoice_flag = attributes[:'special_invoice_flag']
      end

      if attributes.key?(:'billing_setup_reference')
        self.billing_setup_reference = attributes[:'billing_setup_reference']
      end

      if attributes.key?(:'ticket')
        self.ticket = attributes[:'ticket']
      end

      if attributes.key?(:'project')
        self.project = attributes[:'project']
      end

      if attributes.key?(:'phase')
        self.phase = attributes[:'phase']
      end

      if attributes.key?(:'sales_order')
        self.sales_order = attributes[:'sales_order']
      end

      if attributes.key?(:'agreement')
        self.agreement = attributes[:'agreement']
      end

      if attributes.key?(:'_info')
        if (value = attributes[:'_info']).is_a?(Hash)
          self._info = value
        end
      end

      if attributes.key?(:'custom_fields')
        if (value = attributes[:'custom_fields']).is_a?(Array)
          self.custom_fields = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_validator = EnumAttributeValidator.new('String', ["Agreement", "CreditMemo", "DownPayment", "Miscellaneous", "Progress", "Standard"])
      return false unless type_validator.valid?(@type)
      apply_to_type_validator = EnumAttributeValidator.new('String', ["All", "Agreement", "Project", "ProjectPhase", "SalesOrder", "Ticket"])
      return false unless apply_to_type_validator.valid?(@apply_to_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["Agreement", "CreditMemo", "DownPayment", "Miscellaneous", "Progress", "Standard"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] apply_to_type Object to be assigned
    def apply_to_type=(apply_to_type)
      validator = EnumAttributeValidator.new('String', ["All", "Agreement", "Project", "ProjectPhase", "SalesOrder", "Ticket"])
      unless validator.valid?(apply_to_type)
        fail ArgumentError, "invalid value for \"apply_to_type\", must be one of #{validator.allowable_values}."
      end
      @apply_to_type = apply_to_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          id == o.id &&
          invoice_number == o.invoice_number &&
          status == o.status &&
          company == o.company &&
          bill_to_company == o.bill_to_company &&
          ship_to_company == o.ship_to_company &&
          account_number == o.account_number &&
          apply_to_type == o.apply_to_type &&
          apply_to_id == o.apply_to_id &&
          attention == o.attention &&
          ship_to_attention == o.ship_to_attention &&
          billing_site == o.billing_site &&
          billing_site_address_line1 == o.billing_site_address_line1 &&
          billing_site_address_line2 == o.billing_site_address_line2 &&
          billing_site_city == o.billing_site_city &&
          billing_site_state == o.billing_site_state &&
          billing_site_zip == o.billing_site_zip &&
          billing_site_country == o.billing_site_country &&
          shipping_site == o.shipping_site &&
          shipping_site_address_line1 == o.shipping_site_address_line1 &&
          shipping_site_address_line2 == o.shipping_site_address_line2 &&
          shipping_site_city == o.shipping_site_city &&
          shipping_site_state == o.shipping_site_state &&
          shipping_site_zip == o.shipping_site_zip &&
          shipping_site_country == o.shipping_site_country &&
          billing_terms == o.billing_terms &&
          reference == o.reference &&
          customer_po == o.customer_po &&
          template_setup_id == o.template_setup_id &&
          invoice_template == o.invoice_template &&
          email_template_id == o.email_template_id &&
          add_to_batch_email_list == o.add_to_batch_email_list &&
          date == o.date &&
          restrict_downpayment_flag == o.restrict_downpayment_flag &&
          location_id == o.location_id &&
          department_id == o.department_id &&
          territory_id == o.territory_id &&
          top_comment == o.top_comment &&
          bottom_comment == o.bottom_comment &&
          taxable_flag == o.taxable_flag &&
          tax_code == o.tax_code &&
          internal_notes == o.internal_notes &&
          downpayment_previously_taxed_flag == o.downpayment_previously_taxed_flag &&
          service_total == o.service_total &&
          override_down_payment_amount_flag == o.override_down_payment_amount_flag &&
          currency == o.currency &&
          due_date == o.due_date &&
          expense_total == o.expense_total &&
          product_total == o.product_total &&
          previous_progress_applied == o.previous_progress_applied &&
          service_adjustment_amount == o.service_adjustment_amount &&
          agreement_amount == o.agreement_amount &&
          downpayment_applied == o.downpayment_applied &&
          subtotal == o.subtotal &&
          total == o.total &&
          remaining_downpayment == o.remaining_downpayment &&
          sales_tax == o.sales_tax &&
          adjustment_reason == o.adjustment_reason &&
          adjusted_by == o.adjusted_by &&
          payments == o.payments &&
          credits == o.credits &&
          balance == o.balance &&
          special_invoice_flag == o.special_invoice_flag &&
          billing_setup_reference == o.billing_setup_reference &&
          ticket == o.ticket &&
          project == o.project &&
          phase == o.phase &&
          sales_order == o.sales_order &&
          agreement == o.agreement &&
          _info == o._info &&
          custom_fields == o.custom_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, id, invoice_number, status, company, bill_to_company, ship_to_company, account_number, apply_to_type, apply_to_id, attention, ship_to_attention, billing_site, billing_site_address_line1, billing_site_address_line2, billing_site_city, billing_site_state, billing_site_zip, billing_site_country, shipping_site, shipping_site_address_line1, shipping_site_address_line2, shipping_site_city, shipping_site_state, shipping_site_zip, shipping_site_country, billing_terms, reference, customer_po, template_setup_id, invoice_template, email_template_id, add_to_batch_email_list, date, restrict_downpayment_flag, location_id, department_id, territory_id, top_comment, bottom_comment, taxable_flag, tax_code, internal_notes, downpayment_previously_taxed_flag, service_total, override_down_payment_amount_flag, currency, due_date, expense_total, product_total, previous_progress_applied, service_adjustment_amount, agreement_amount, downpayment_applied, subtotal, total, remaining_downpayment, sales_tax, adjustment_reason, adjusted_by, payments, credits, balance, special_invoice_flag, billing_setup_reference, ticket, project, phase, sales_order, agreement, _info, custom_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ConnectWise.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
