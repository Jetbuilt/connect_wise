# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'cgi'

module ConnectWise
  class RmaTagsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete RmaTag
    # @param id [Integer] rmaTagId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_procurement_rma_tags_by_id(id, client_id, opts = {})
      delete_procurement_rma_tags_by_id_with_http_info(id, client_id, opts)
      nil
    end

    # Delete RmaTag
    # @param id [Integer] rmaTagId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_procurement_rma_tags_by_id_with_http_info(id, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RmaTagsApi.delete_procurement_rma_tags_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError,
              "Missing the required parameter 'id' when calling RmaTagsApi.delete_procurement_rma_tags_by_id"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling RmaTagsApi.delete_procurement_rma_tags_by_id"
      end

      # resource path
      local_var_path = '/procurement/rmaTags/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'RmaTagsApi.delete_procurement_rma_tags_by_id',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RmaTagsApi#delete_procurement_rma_tags_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get List of RmaTag
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<RmaTag>]
    def get_procurement_rma_tags(client_id, opts = {})
      data, _status_code, _headers = get_procurement_rma_tags_with_http_info(client_id, opts)
      data
    end

    # Get List of RmaTag
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(Array<RmaTag>, Integer, Hash)>] Array<RmaTag> data, response status code and response headers
    def get_procurement_rma_tags_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RmaTagsApi.get_procurement_rma_tags ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling RmaTagsApi.get_procurement_rma_tags"
      end

      # resource path
      local_var_path = '/procurement/rmaTags'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<RmaTag>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'RmaTagsApi.get_procurement_rma_tags',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RmaTagsApi#get_procurement_rma_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get RmaTag
    # @param id [Integer] rmaTagId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [RmaTag]
    def get_procurement_rma_tags_by_id(id, client_id, opts = {})
      data, _status_code, _headers = get_procurement_rma_tags_by_id_with_http_info(id, client_id, opts)
      data
    end

    # Get RmaTag
    # @param id [Integer] rmaTagId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(RmaTag, Integer, Hash)>] RmaTag data, response status code and response headers
    def get_procurement_rma_tags_by_id_with_http_info(id, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RmaTagsApi.get_procurement_rma_tags_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError,
              "Missing the required parameter 'id' when calling RmaTagsApi.get_procurement_rma_tags_by_id"
      end

      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling RmaTagsApi.get_procurement_rma_tags_by_id"
      end

      # resource path
      local_var_path = '/procurement/rmaTags/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RmaTag'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'RmaTagsApi.get_procurement_rma_tags_by_id',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RmaTagsApi#get_procurement_rma_tags_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Count of RmaTag
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Count]
    def get_procurement_rma_tags_count(client_id, opts = {})
      data, _status_code, _headers = get_procurement_rma_tags_count_with_http_info(client_id, opts)
      data
    end

    # Get Count of RmaTag
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(Count, Integer, Hash)>] Count data, response status code and response headers
    def get_procurement_rma_tags_count_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RmaTagsApi.get_procurement_rma_tags_count ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling RmaTagsApi.get_procurement_rma_tags_count"
      end

      # resource path
      local_var_path = '/procurement/rmaTags/count'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Count'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'RmaTagsApi.get_procurement_rma_tags_count',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RmaTagsApi#get_procurement_rma_tags_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get RmaTag
    # @param client_id [String]
    # @param product_id [Integer] productId
    # @param billing_log_id [Integer] billingLogId
    # @param ticket_id [Integer] ticketId
    # @param project_id [Integer] projectId
    # @param sales_order_id [Integer] salesOrderId
    # @param company_id [Integer] companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [RmaTag]
    def get_procurement_rma_tags_default(client_id, product_id, billing_log_id, ticket_id, project_id, sales_order_id,
                                         company_id, opts = {})
      data, _status_code, _headers = get_procurement_rma_tags_default_with_http_info(client_id, product_id,
                                                                                     billing_log_id, ticket_id, project_id, sales_order_id, company_id, opts)
      data
    end

    # Get RmaTag
    # @param client_id [String]
    # @param product_id [Integer] productId
    # @param billing_log_id [Integer] billingLogId
    # @param ticket_id [Integer] ticketId
    # @param project_id [Integer] projectId
    # @param sales_order_id [Integer] salesOrderId
    # @param company_id [Integer] companyId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(RmaTag, Integer, Hash)>] RmaTag data, response status code and response headers
    def get_procurement_rma_tags_default_with_http_info(client_id, product_id, billing_log_id, ticket_id, project_id,
                                                        sales_order_id, company_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RmaTagsApi.get_procurement_rma_tags_default ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling RmaTagsApi.get_procurement_rma_tags_default"
      end
      # verify the required parameter 'product_id' is set
      if @api_client.config.client_side_validation && product_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'product_id' when calling RmaTagsApi.get_procurement_rma_tags_default"
      end
      # verify the required parameter 'billing_log_id' is set
      if @api_client.config.client_side_validation && billing_log_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'billing_log_id' when calling RmaTagsApi.get_procurement_rma_tags_default"
      end
      # verify the required parameter 'ticket_id' is set
      if @api_client.config.client_side_validation && ticket_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'ticket_id' when calling RmaTagsApi.get_procurement_rma_tags_default"
      end
      # verify the required parameter 'project_id' is set
      if @api_client.config.client_side_validation && project_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'project_id' when calling RmaTagsApi.get_procurement_rma_tags_default"
      end
      # verify the required parameter 'sales_order_id' is set
      if @api_client.config.client_side_validation && sales_order_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'sales_order_id' when calling RmaTagsApi.get_procurement_rma_tags_default"
      end
      # verify the required parameter 'company_id' is set
      if @api_client.config.client_side_validation && company_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'company_id' when calling RmaTagsApi.get_procurement_rma_tags_default"
      end

      # resource path
      local_var_path = '/procurement/rmaTags/default'.sub('{' + 'productId' + '}', CGI.escape(product_id.to_s)).sub('{' + 'billingLogId' + '}', CGI.escape(billing_log_id.to_s)).sub('{' + 'ticketId' + '}', CGI.escape(ticket_id.to_s)).sub('{' + 'projectId' + '}', CGI.escape(project_id.to_s)).sub('{' + 'salesOrderId' + '}', CGI.escape(sales_order_id.to_s)).sub(
        '{' + 'companyId' + '}', CGI.escape(company_id.to_s)
      )

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RmaTag'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'RmaTagsApi.get_procurement_rma_tags_default',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RmaTagsApi#get_procurement_rma_tags_default\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Patch RmaTag
    # @param id [Integer] rmaTagId
    # @param client_id [String]
    # @param patch_operation [Array<PatchOperation>] List of PatchOperation
    # @param [Hash] opts the optional parameters
    # @return [RmaTag]
    def patch_procurement_rma_tags_by_id(id, client_id, patch_operation, opts = {})
      data, _status_code, _headers = patch_procurement_rma_tags_by_id_with_http_info(id, client_id, patch_operation,
                                                                                     opts)
      data
    end

    # Patch RmaTag
    # @param id [Integer] rmaTagId
    # @param client_id [String]
    # @param patch_operation [Array<PatchOperation>] List of PatchOperation
    # @param [Hash] opts the optional parameters
    # @return [Array<(RmaTag, Integer, Hash)>] RmaTag data, response status code and response headers
    def patch_procurement_rma_tags_by_id_with_http_info(id, client_id, patch_operation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RmaTagsApi.patch_procurement_rma_tags_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError,
              "Missing the required parameter 'id' when calling RmaTagsApi.patch_procurement_rma_tags_by_id"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling RmaTagsApi.patch_procurement_rma_tags_by_id"
      end
      # verify the required parameter 'patch_operation' is set
      if @api_client.config.client_side_validation && patch_operation.nil?
        raise ArgumentError,
              "Missing the required parameter 'patch_operation' when calling RmaTagsApi.patch_procurement_rma_tags_by_id"
      end

      # resource path
      local_var_path = '/procurement/rmaTags/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_operation)

      # return_type
      return_type = opts[:debug_return_type] || 'RmaTag'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'RmaTagsApi.patch_procurement_rma_tags_by_id',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RmaTagsApi#patch_procurement_rma_tags_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Post RmaTag
    # @param client_id [String]
    # @param rma_tag [RmaTag] rmaTag
    # @param [Hash] opts the optional parameters
    # @return [RmaTag]
    def post_procurement_rma_tags(client_id, rma_tag, opts = {})
      data, _status_code, _headers = post_procurement_rma_tags_with_http_info(client_id, rma_tag, opts)
      data
    end

    # Post RmaTag
    # @param client_id [String]
    # @param rma_tag [RmaTag] rmaTag
    # @param [Hash] opts the optional parameters
    # @return [Array<(RmaTag, Integer, Hash)>] RmaTag data, response status code and response headers
    def post_procurement_rma_tags_with_http_info(client_id, rma_tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RmaTagsApi.post_procurement_rma_tags ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling RmaTagsApi.post_procurement_rma_tags"
      end
      # verify the required parameter 'rma_tag' is set
      if @api_client.config.client_side_validation && rma_tag.nil?
        raise ArgumentError,
              "Missing the required parameter 'rma_tag' when calling RmaTagsApi.post_procurement_rma_tags"
      end

      # resource path
      local_var_path = '/procurement/rmaTags'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rma_tag)

      # return_type
      return_type = opts[:debug_return_type] || 'RmaTag'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'RmaTagsApi.post_procurement_rma_tags',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RmaTagsApi#post_procurement_rma_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Put RmaTag
    # @param id [Integer] rmaTagId
    # @param client_id [String]
    # @param rma_tag [RmaTag] rmaTag
    # @param [Hash] opts the optional parameters
    # @return [RmaTag]
    def put_procurement_rma_tags_by_id(id, client_id, rma_tag, opts = {})
      data, _status_code, _headers = put_procurement_rma_tags_by_id_with_http_info(id, client_id, rma_tag, opts)
      data
    end

    # Put RmaTag
    # @param id [Integer] rmaTagId
    # @param client_id [String]
    # @param rma_tag [RmaTag] rmaTag
    # @param [Hash] opts the optional parameters
    # @return [Array<(RmaTag, Integer, Hash)>] RmaTag data, response status code and response headers
    def put_procurement_rma_tags_by_id_with_http_info(id, client_id, rma_tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RmaTagsApi.put_procurement_rma_tags_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError,
              "Missing the required parameter 'id' when calling RmaTagsApi.put_procurement_rma_tags_by_id"
      end

      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling RmaTagsApi.put_procurement_rma_tags_by_id"
      end
      # verify the required parameter 'rma_tag' is set
      if @api_client.config.client_side_validation && rma_tag.nil?
        raise ArgumentError,
              "Missing the required parameter 'rma_tag' when calling RmaTagsApi.put_procurement_rma_tags_by_id"
      end

      # resource path
      local_var_path = '/procurement/rmaTags/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rma_tag)

      # return_type
      return_type = opts[:debug_return_type] || 'RmaTag'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'RmaTagsApi.put_procurement_rma_tags_by_id',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RmaTagsApi#put_procurement_rma_tags_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
