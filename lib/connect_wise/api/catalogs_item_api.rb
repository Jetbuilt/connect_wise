# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'cgi'

module ConnectWise
  class CatalogsItemApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete CatalogItem
    # @param id [Integer] catalogId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_procurement_catalog_by_id(id, client_id, opts = {})
      delete_procurement_catalog_by_id_with_http_info(id, client_id, opts)
      nil
    end

    # Delete CatalogItem
    # @param id [Integer] catalogId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_procurement_catalog_by_id_with_http_info(id, client_id, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.delete_procurement_catalog_by_id ...' if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling CatalogsItemApi.delete_procurement_catalog_by_id" if @api_client.config.client_side_validation && id.nil?
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.delete_procurement_catalog_by_id" if @api_client.config.client_side_validation && client_id.nil?

      # resource path
      local_var_path = '/procurement/catalog/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.delete_procurement_catalog_by_id',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#delete_procurement_catalog_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Delete CatalogItem
    # @param parent_id [Integer] catalogId
    # @param id [Integer] vendorId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_procurement_catalog_by_parent_id_vendors_by_id(parent_id, id, client_id, opts = {})
      delete_procurement_catalog_by_parent_id_vendors_by_id_with_http_info(parent_id, id, client_id, opts)
      nil
    end

    # Delete CatalogItem
    # @param parent_id [Integer] catalogId
    # @param id [Integer] vendorId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_procurement_catalog_by_parent_id_vendors_by_id_with_http_info(parent_id, id, client_id, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.delete_procurement_catalog_by_parent_id_vendors_by_id ...' if @api_client.config.debugging
      # verify the required parameter 'parent_id' is set
      raise ArgumentError, "Missing the required parameter 'parent_id' when calling CatalogsItemApi.delete_procurement_catalog_by_parent_id_vendors_by_id" if @api_client.config.client_side_validation && parent_id.nil?
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling CatalogsItemApi.delete_procurement_catalog_by_parent_id_vendors_by_id" if @api_client.config.client_side_validation && id.nil?
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.delete_procurement_catalog_by_parent_id_vendors_by_id" if @api_client.config.client_side_validation && client_id.nil?

      # resource path
      local_var_path = '/procurement/catalog/{parentId}/vendors/{id}'.sub('{' + 'parentId' + '}', CGI.escape(parent_id.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.delete_procurement_catalog_by_parent_id_vendors_by_id',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#delete_procurement_catalog_by_parent_id_vendors_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Get List of CatalogItem
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<CatalogItem>]
    def get_procurement_catalog(client_id, opts = {})
      data, _status_code, _headers = get_procurement_catalog_with_http_info(client_id, opts)
      data
    end

    # Get List of CatalogItem
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(Array<CatalogItem>, Integer, Hash)>] Array<CatalogItem> data, response status code and response headers
    def get_procurement_catalog_with_http_info(client_id, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.get_procurement_catalog ...' if @api_client.config.debugging
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.get_procurement_catalog" if @api_client.config.client_side_validation && client_id.nil?

      # resource path
      local_var_path = '/procurement/catalog'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1']) unless header_params['Accept']
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CatalogItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.get_procurement_catalog',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#get_procurement_catalog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Get Count of CatalogItem
    # @param catalog_item_identifier [String] catalogItemIdentifier
    # @param client_id [String]
    # @param warehouse_bin_id [Integer] warehouseBinId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Count]
    def get_procurement_catalog_by_catalog_item_identifier_quantity_on_hand(catalog_item_identifier, client_id, warehouse_bin_id, opts = {})
      data, _status_code, _headers = get_procurement_catalog_by_catalog_item_identifier_quantity_on_hand_with_http_info(catalog_item_identifier, client_id, warehouse_bin_id, opts)
      data
    end

    # Get Count of CatalogItem
    # @param catalog_item_identifier [String] catalogItemIdentifier
    # @param client_id [String]
    # @param warehouse_bin_id [Integer] warehouseBinId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(Count, Integer, Hash)>] Count data, response status code and response headers
    def get_procurement_catalog_by_catalog_item_identifier_quantity_on_hand_with_http_info(catalog_item_identifier, client_id, warehouse_bin_id, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.get_procurement_catalog_by_catalog_item_identifier_quantity_on_hand ...' if @api_client.config.debugging
      # verify the required parameter 'catalog_item_identifier' is set
      raise ArgumentError, "Missing the required parameter 'catalog_item_identifier' when calling CatalogsItemApi.get_procurement_catalog_by_catalog_item_identifier_quantity_on_hand" if @api_client.config.client_side_validation && catalog_item_identifier.nil?
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.get_procurement_catalog_by_catalog_item_identifier_quantity_on_hand" if @api_client.config.client_side_validation && client_id.nil?
      # verify the required parameter 'warehouse_bin_id' is set
      raise ArgumentError, "Missing the required parameter 'warehouse_bin_id' when calling CatalogsItemApi.get_procurement_catalog_by_catalog_item_identifier_quantity_on_hand" if @api_client.config.client_side_validation && warehouse_bin_id.nil?

      # resource path
      local_var_path = '/procurement/catalog/{catalogItemIdentifier}/quantityOnHand'.sub('{' + 'catalogItemIdentifier' + '}', CGI.escape(catalog_item_identifier.to_s)).sub('{' + 'warehouseBinId' + '}', CGI.escape(warehouse_bin_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1']) unless header_params['Accept']
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Count'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.get_procurement_catalog_by_catalog_item_identifier_quantity_on_hand',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#get_procurement_catalog_by_catalog_item_identifier_quantity_on_hand\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Get CatalogItem
    # @param id [Integer] catalogId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [CatalogItem]
    def get_procurement_catalog_by_id(id, client_id, opts = {})
      data, _status_code, _headers = get_procurement_catalog_by_id_with_http_info(id, client_id, opts)
      data
    end

    # Get CatalogItem
    # @param id [Integer] catalogId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(CatalogItem, Integer, Hash)>] CatalogItem data, response status code and response headers
    def get_procurement_catalog_by_id_with_http_info(id, client_id, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.get_procurement_catalog_by_id ...' if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling CatalogsItemApi.get_procurement_catalog_by_id" if @api_client.config.client_side_validation && id.nil?
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.get_procurement_catalog_by_id" if @api_client.config.client_side_validation && client_id.nil?

      # resource path
      local_var_path = '/procurement/catalog/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1']) unless header_params['Accept']
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CatalogItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.get_procurement_catalog_by_id',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#get_procurement_catalog_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Get CatalogItemInfo
    # @param id [Integer] catalogId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [CatalogItemInfo]
    def get_procurement_catalog_by_id_info(id, client_id, opts = {})
      data, _status_code, _headers = get_procurement_catalog_by_id_info_with_http_info(id, client_id, opts)
      data
    end

    # Get CatalogItemInfo
    # @param id [Integer] catalogId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(CatalogItemInfo, Integer, Hash)>] CatalogItemInfo data, response status code and response headers
    def get_procurement_catalog_by_id_info_with_http_info(id, client_id, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.get_procurement_catalog_by_id_info ...' if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling CatalogsItemApi.get_procurement_catalog_by_id_info" if @api_client.config.client_side_validation && id.nil?
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.get_procurement_catalog_by_id_info" if @api_client.config.client_side_validation && client_id.nil?

      # resource path
      local_var_path = '/procurement/catalog/{id}/info'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1']) unless header_params['Accept']
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CatalogItemInfo'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.get_procurement_catalog_by_id_info',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#get_procurement_catalog_by_id_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Get Count of CatalogItem
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Count]
    def get_procurement_catalog_count(client_id, opts = {})
      data, _status_code, _headers = get_procurement_catalog_count_with_http_info(client_id, opts)
      data
    end

    # Get Count of CatalogItem
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(Count, Integer, Hash)>] Count data, response status code and response headers
    def get_procurement_catalog_count_with_http_info(client_id, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.get_procurement_catalog_count ...' if @api_client.config.debugging
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.get_procurement_catalog_count" if @api_client.config.client_side_validation && client_id.nil?

      # resource path
      local_var_path = '/procurement/catalog/count'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1']) unless header_params['Accept']
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Count'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.get_procurement_catalog_count',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#get_procurement_catalog_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Get List of CatalogItemInfo
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<CatalogItemInfo>]
    def get_procurement_catalog_info(client_id, opts = {})
      data, _status_code, _headers = get_procurement_catalog_info_with_http_info(client_id, opts)
      data
    end

    # Get List of CatalogItemInfo
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(Array<CatalogItemInfo>, Integer, Hash)>] Array<CatalogItemInfo> data, response status code and response headers
    def get_procurement_catalog_info_with_http_info(client_id, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.get_procurement_catalog_info ...' if @api_client.config.debugging
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.get_procurement_catalog_info" if @api_client.config.client_side_validation && client_id.nil?

      # resource path
      local_var_path = '/procurement/catalog/info'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1']) unless header_params['Accept']
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CatalogItemInfo>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.get_procurement_catalog_info',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#get_procurement_catalog_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Get Count of CatalogItemInfo
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Count]
    def get_procurement_catalog_info_count(client_id, opts = {})
      data, _status_code, _headers = get_procurement_catalog_info_count_with_http_info(client_id, opts)
      data
    end

    # Get Count of CatalogItemInfo
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(Count, Integer, Hash)>] Count data, response status code and response headers
    def get_procurement_catalog_info_count_with_http_info(client_id, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.get_procurement_catalog_info_count ...' if @api_client.config.debugging
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.get_procurement_catalog_info_count" if @api_client.config.client_side_validation && client_id.nil?

      # resource path
      local_var_path = '/procurement/catalog/info/count'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1']) unless header_params['Accept']
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Count'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.get_procurement_catalog_info_count',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#get_procurement_catalog_info_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Get List of CatalogItem
    # @param parent_id [Integer] vendorId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<CatalogVendors>]
    def get_procurement_catalog_vendors_by_parent_id(parent_id, client_id, opts = {})
      data, _status_code, _headers = get_procurement_catalog_vendors_by_parent_id_with_http_info(parent_id, client_id, opts)
      data
    end

    # Get List of CatalogItem
    # @param parent_id [Integer] vendorId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(Array<CatalogVendors>, Integer, Hash)>] Array<CatalogVendors> data, response status code and response headers
    def get_procurement_catalog_vendors_by_parent_id_with_http_info(parent_id, client_id, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.get_procurement_catalog_vendors_by_parent_id ...' if @api_client.config.debugging
      # verify the required parameter 'parent_id' is set
      raise ArgumentError, "Missing the required parameter 'parent_id' when calling CatalogsItemApi.get_procurement_catalog_vendors_by_parent_id" if @api_client.config.client_side_validation && parent_id.nil?
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.get_procurement_catalog_vendors_by_parent_id" if @api_client.config.client_side_validation && client_id.nil?

      # resource path
      local_var_path = '/procurement/catalog/vendors/{parentId}'.sub('{' + 'parentId' + '}', CGI.escape(parent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1']) unless header_params['Accept']
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CatalogVendors>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.get_procurement_catalog_vendors_by_parent_id',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#get_procurement_catalog_vendors_by_parent_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Patch CatalogItem
    # @param id [Integer] catalogId
    # @param client_id [String]
    # @param patch_operation [Array<PatchOperation>] List of PatchOperation
    # @param [Hash] opts the optional parameters
    # @return [CatalogItem]
    def patch_procurement_catalog_by_id(id, client_id, patch_operation, opts = {})
      data, _status_code, _headers = patch_procurement_catalog_by_id_with_http_info(id, client_id, patch_operation, opts)
      data
    end

    # Patch CatalogItem
    # @param id [Integer] catalogId
    # @param client_id [String]
    # @param patch_operation [Array<PatchOperation>] List of PatchOperation
    # @param [Hash] opts the optional parameters
    # @return [Array<(CatalogItem, Integer, Hash)>] CatalogItem data, response status code and response headers
    def patch_procurement_catalog_by_id_with_http_info(id, client_id, patch_operation, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.patch_procurement_catalog_by_id ...' if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling CatalogsItemApi.patch_procurement_catalog_by_id" if @api_client.config.client_side_validation && id.nil?
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.patch_procurement_catalog_by_id" if @api_client.config.client_side_validation && client_id.nil?
      # verify the required parameter 'patch_operation' is set
      raise ArgumentError, "Missing the required parameter 'patch_operation' when calling CatalogsItemApi.patch_procurement_catalog_by_id" if @api_client.config.client_side_validation && patch_operation.nil?

      # resource path
      local_var_path = '/procurement/catalog/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_operation)

      # return_type
      return_type = opts[:debug_return_type] || 'CatalogItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.patch_procurement_catalog_by_id',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#patch_procurement_catalog_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Post CatalogItem
    # @param client_id [String]
    # @param catalog_item [CatalogItem] catalogItem
    # @param [Hash] opts the optional parameters
    # @return [CatalogItem]
    def post_procurement_catalog(client_id, catalog_item, opts = {})
      data, _status_code, _headers = post_procurement_catalog_with_http_info(client_id, catalog_item, opts)
      data
    end

    # Post CatalogItem
    # @param client_id [String]
    # @param catalog_item [CatalogItem] catalogItem
    # @param [Hash] opts the optional parameters
    # @return [Array<(CatalogItem, Integer, Hash)>] CatalogItem data, response status code and response headers
    def post_procurement_catalog_with_http_info(client_id, catalog_item, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.post_procurement_catalog ...' if @api_client.config.debugging
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.post_procurement_catalog" if @api_client.config.client_side_validation && client_id.nil?
      # verify the required parameter 'catalog_item' is set
      raise ArgumentError, "Missing the required parameter 'catalog_item' when calling CatalogsItemApi.post_procurement_catalog" if @api_client.config.client_side_validation && catalog_item.nil?

      # resource path
      local_var_path = '/procurement/catalog'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(catalog_item)

      # return_type
      return_type = opts[:debug_return_type] || 'CatalogItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.post_procurement_catalog',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#post_procurement_catalog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Post Copy CatalogItem
    # @param id [Integer] catalogId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @return [CatalogItem]
    def post_procurement_catalog_by_id_copy(id, client_id, opts = {})
      data, _status_code, _headers = post_procurement_catalog_by_id_copy_with_http_info(id, client_id, opts)
      data
    end

    # Post Copy CatalogItem
    # @param id [Integer] catalogId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @return [Array<(CatalogItem, Integer, Hash)>] CatalogItem data, response status code and response headers
    def post_procurement_catalog_by_id_copy_with_http_info(id, client_id, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.post_procurement_catalog_by_id_copy ...' if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling CatalogsItemApi.post_procurement_catalog_by_id_copy" if @api_client.config.client_side_validation && id.nil?
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.post_procurement_catalog_by_id_copy" if @api_client.config.client_side_validation && client_id.nil?

      # resource path
      local_var_path = '/procurement/catalog/{id}/copy'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1']) unless header_params['Accept']
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CatalogItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.post_procurement_catalog_by_id_copy',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#post_procurement_catalog_by_id_copy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Post CatalogPricing
    # @param id [Integer] catalogId
    # @param client_id [String]
    # @param catalog_pricing [CatalogPricing] catalogPricing
    # @param [Hash] opts the optional parameters
    # @return [CatalogPricing]
    def post_procurement_catalog_by_id_pricing(id, client_id, catalog_pricing, opts = {})
      data, _status_code, _headers = post_procurement_catalog_by_id_pricing_with_http_info(id, client_id, catalog_pricing, opts)
      data
    end

    # Post CatalogPricing
    # @param id [Integer] catalogId
    # @param client_id [String]
    # @param catalog_pricing [CatalogPricing] catalogPricing
    # @param [Hash] opts the optional parameters
    # @return [Array<(CatalogPricing, Integer, Hash)>] CatalogPricing data, response status code and response headers
    def post_procurement_catalog_by_id_pricing_with_http_info(id, client_id, catalog_pricing, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.post_procurement_catalog_by_id_pricing ...' if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling CatalogsItemApi.post_procurement_catalog_by_id_pricing" if @api_client.config.client_side_validation && id.nil?
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.post_procurement_catalog_by_id_pricing" if @api_client.config.client_side_validation && client_id.nil?
      # verify the required parameter 'catalog_pricing' is set
      raise ArgumentError, "Missing the required parameter 'catalog_pricing' when calling CatalogsItemApi.post_procurement_catalog_by_id_pricing" if @api_client.config.client_side_validation && catalog_pricing.nil?

      # resource path
      local_var_path = '/procurement/catalog/{id}/pricing'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(catalog_pricing)

      # return_type
      return_type = opts[:debug_return_type] || 'CatalogPricing'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.post_procurement_catalog_by_id_pricing',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#post_procurement_catalog_by_id_pricing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Post CatalogItem
    # @param client_id [String]
    # @param catalog_vendors [CatalogVendors] catalogVendors
    # @param [Hash] opts the optional parameters
    # @return [CatalogVendors]
    def post_procurement_catalog_vendors(client_id, catalog_vendors, opts = {})
      data, _status_code, _headers = post_procurement_catalog_vendors_with_http_info(client_id, catalog_vendors, opts)
      data
    end

    # Post CatalogItem
    # @param client_id [String]
    # @param catalog_vendors [CatalogVendors] catalogVendors
    # @param [Hash] opts the optional parameters
    # @return [Array<(CatalogVendors, Integer, Hash)>] CatalogVendors data, response status code and response headers
    def post_procurement_catalog_vendors_with_http_info(client_id, catalog_vendors, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.post_procurement_catalog_vendors ...' if @api_client.config.debugging
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.post_procurement_catalog_vendors" if @api_client.config.client_side_validation && client_id.nil?
      # verify the required parameter 'catalog_vendors' is set
      raise ArgumentError, "Missing the required parameter 'catalog_vendors' when calling CatalogsItemApi.post_procurement_catalog_vendors" if @api_client.config.client_side_validation && catalog_vendors.nil?

      # resource path
      local_var_path = '/procurement/catalog/vendors'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(catalog_vendors)

      # return_type
      return_type = opts[:debug_return_type] || 'CatalogVendors'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.post_procurement_catalog_vendors',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#post_procurement_catalog_vendors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Put CatalogItem
    # @param id [Integer] catalogId
    # @param client_id [String]
    # @param catalog_item [CatalogItem] catalogItem
    # @param [Hash] opts the optional parameters
    # @return [CatalogItem]
    def put_procurement_catalog_by_id(id, client_id, catalog_item, opts = {})
      data, _status_code, _headers = put_procurement_catalog_by_id_with_http_info(id, client_id, catalog_item, opts)
      data
    end

    # Put CatalogItem
    # @param id [Integer] catalogId
    # @param client_id [String]
    # @param catalog_item [CatalogItem] catalogItem
    # @param [Hash] opts the optional parameters
    # @return [Array<(CatalogItem, Integer, Hash)>] CatalogItem data, response status code and response headers
    def put_procurement_catalog_by_id_with_http_info(id, client_id, catalog_item, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.put_procurement_catalog_by_id ...' if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling CatalogsItemApi.put_procurement_catalog_by_id" if @api_client.config.client_side_validation && id.nil?
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.put_procurement_catalog_by_id" if @api_client.config.client_side_validation && client_id.nil?
      # verify the required parameter 'catalog_item' is set
      raise ArgumentError, "Missing the required parameter 'catalog_item' when calling CatalogsItemApi.put_procurement_catalog_by_id" if @api_client.config.client_side_validation && catalog_item.nil?

      # resource path
      local_var_path = '/procurement/catalog/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(catalog_item)

      # return_type
      return_type = opts[:debug_return_type] || 'CatalogItem'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.put_procurement_catalog_by_id',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#put_procurement_catalog_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end

    # Put CatalogItem
    # @param id [Integer] vendorId
    # @param parent_id [Integer] catalogId
    # @param client_id [String]
    # @param catalog_item [CatalogItem] catalogItem
    # @param [Hash] opts the optional parameters
    # @return [CatalogVendors]
    def put_procurement_catalog_by_parent_id_vendors_by_id(id, parent_id, client_id, catalog_item, opts = {})
      data, _status_code, _headers = put_procurement_catalog_by_parent_id_vendors_by_id_with_http_info(id, parent_id, client_id, catalog_item, opts)
      data
    end

    # Put CatalogItem
    # @param id [Integer] vendorId
    # @param parent_id [Integer] catalogId
    # @param client_id [String]
    # @param catalog_item [CatalogItem] catalogItem
    # @param [Hash] opts the optional parameters
    # @return [Array<(CatalogVendors, Integer, Hash)>] CatalogVendors data, response status code and response headers
    def put_procurement_catalog_by_parent_id_vendors_by_id_with_http_info(id, parent_id, client_id, catalog_item, opts = {})
      @api_client.config.logger.debug 'Calling API: CatalogsItemApi.put_procurement_catalog_by_parent_id_vendors_by_id ...' if @api_client.config.debugging
      # verify the required parameter 'id' is set
      raise ArgumentError, "Missing the required parameter 'id' when calling CatalogsItemApi.put_procurement_catalog_by_parent_id_vendors_by_id" if @api_client.config.client_side_validation && id.nil?
      # verify the required parameter 'parent_id' is set
      raise ArgumentError, "Missing the required parameter 'parent_id' when calling CatalogsItemApi.put_procurement_catalog_by_parent_id_vendors_by_id" if @api_client.config.client_side_validation && parent_id.nil?
      # verify the required parameter 'client_id' is set
      raise ArgumentError, "Missing the required parameter 'client_id' when calling CatalogsItemApi.put_procurement_catalog_by_parent_id_vendors_by_id" if @api_client.config.client_side_validation && client_id.nil?
      # verify the required parameter 'catalog_item' is set
      raise ArgumentError, "Missing the required parameter 'catalog_item' when calling CatalogsItemApi.put_procurement_catalog_by_parent_id_vendors_by_id" if @api_client.config.client_side_validation && catalog_item.nil?

      # resource path
      local_var_path = '/procurement/catalog/{parentId}/vendors/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'parentId' + '}', CGI.escape(parent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(catalog_item)

      # return_type
      return_type = opts[:debug_return_type] || 'CatalogVendors'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'CatalogsItemApi.put_procurement_catalog_by_parent_id_vendors_by_id',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      @api_client.config.logger.debug "API called: CatalogsItemApi#put_procurement_catalog_by_parent_id_vendors_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}" if @api_client.config.debugging
      [data, status_code, headers]
    end
  end
end
