# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'cgi'

module ConnectWise
  class OpportunitiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_sales_opportunities_by_id(id, client_id, opts = {})
      delete_sales_opportunities_by_id_with_http_info(id, client_id, opts)
      nil
    end

    # Delete ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_sales_opportunities_by_id_with_http_info(id, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OpportunitiesApi.delete_sales_opportunities_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError,
              "Missing the required parameter 'id' when calling OpportunitiesApi.delete_sales_opportunities_by_id"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling OpportunitiesApi.delete_sales_opportunities_by_id"
      end

      # resource path
      local_var_path = '/sales/opportunities/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'OpportunitiesApi.delete_sales_opportunities_by_id',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OpportunitiesApi#delete_sales_opportunities_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get List of ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<Opportunity>]
    def get_sales_opportunities(client_id, opts = {})
      data, _status_code, _headers = get_sales_opportunities_with_http_info(client_id, opts)
      data
    end

    # Get List of ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(Array<Opportunity>, Integer, Hash)>] Array<Opportunity> data, response status code and response headers
    def get_sales_opportunities_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OpportunitiesApi.get_sales_opportunities ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling OpportunitiesApi.get_sales_opportunities"
      end

      # resource path
      local_var_path = '/sales/opportunities'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Opportunity>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'OpportunitiesApi.get_sales_opportunities',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OpportunitiesApi#get_sales_opportunities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Opportunity]
    def get_sales_opportunities_by_id(id, client_id, opts = {})
      data, _status_code, _headers = get_sales_opportunities_by_id_with_http_info(id, client_id, opts)
      data
    end

    # Get ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(Opportunity, Integer, Hash)>] Opportunity data, response status code and response headers
    def get_sales_opportunities_by_id_with_http_info(id, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OpportunitiesApi.get_sales_opportunities_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError,
              "Missing the required parameter 'id' when calling OpportunitiesApi.get_sales_opportunities_by_id"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling OpportunitiesApi.get_sales_opportunities_by_id"
      end

      # resource path
      local_var_path = '/sales/opportunities/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Opportunity'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'OpportunitiesApi.get_sales_opportunities_by_id',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OpportunitiesApi#get_sales_opportunities_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Conversion
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<SalesConversion>]
    def get_sales_opportunities_conversions_by_id(id, client_id, opts = {})
      data, _status_code, _headers = get_sales_opportunities_conversions_by_id_with_http_info(id, client_id, opts)
      data
    end

    # Get Conversion
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(Array<SalesConversion>, Integer, Hash)>] Array<SalesConversion> data, response status code and response headers
    def get_sales_opportunities_conversions_by_id_with_http_info(id, client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OpportunitiesApi.get_sales_opportunities_conversions_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError,
              "Missing the required parameter 'id' when calling OpportunitiesApi.get_sales_opportunities_conversions_by_id"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling OpportunitiesApi.get_sales_opportunities_conversions_by_id"
      end

      # resource path
      local_var_path = '/sales/opportunities/conversions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SalesConversion>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'OpportunitiesApi.get_sales_opportunities_conversions_by_id',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OpportunitiesApi#get_sales_opportunities_conversions_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get Count of ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Count]
    def get_sales_opportunities_count(client_id, opts = {})
      data, _status_code, _headers = get_sales_opportunities_count_with_http_info(client_id, opts)
      data
    end

    # Get Count of ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(Count, Integer, Hash)>] Count data, response status code and response headers
    def get_sales_opportunities_count_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OpportunitiesApi.get_sales_opportunities_count ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling OpportunitiesApi.get_sales_opportunities_count"
      end

      # resource path
      local_var_path = '/sales/opportunities/count'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Count'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'OpportunitiesApi.get_sales_opportunities_count',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OpportunitiesApi#get_sales_opportunities_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Get ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Opportunity]
    def get_sales_opportunities_default(client_id, opts = {})
      data, _status_code, _headers = get_sales_opportunities_default_with_http_info(client_id, opts)
      data
    end

    # Get ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity
    # @param client_id [String]
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conditions
    # @option opts [String] :child_conditions
    # @option opts [String] :custom_field_conditions
    # @option opts [String] :order_by
    # @option opts [String] :fields
    # @option opts [Integer] :page
    # @option opts [Integer] :page_size
    # @option opts [Integer] :page_id
    # @return [Array<(Opportunity, Integer, Hash)>] Opportunity data, response status code and response headers
    def get_sales_opportunities_default_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OpportunitiesApi.get_sales_opportunities_default ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling OpportunitiesApi.get_sales_opportunities_default"
      end

      # resource path
      local_var_path = '/sales/opportunities/default'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:conditions] = opts[:conditions] unless opts[:conditions].nil?
      query_params[:childConditions] = opts[:child_conditions] unless opts[:child_conditions].nil?
      query_params[:customFieldConditions] = opts[:custom_field_conditions] unless opts[:custom_field_conditions].nil?
      query_params[:orderBy] = opts[:order_by] unless opts[:order_by].nil?
      query_params[:fields] = opts[:fields] unless opts[:fields].nil?
      query_params[:page] = opts[:page] unless opts[:page].nil?
      query_params[:pageSize] = opts[:page_size] unless opts[:page_size].nil?
      query_params[:pageId] = opts[:page_id] unless opts[:page_id].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Opportunity'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'OpportunitiesApi.get_sales_opportunities_default',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OpportunitiesApi#get_sales_opportunities_default\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Patch ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param patch_operation [Array<PatchOperation>] List of PatchOperation
    # @param [Hash] opts the optional parameters
    # @return [Opportunity]
    def patch_sales_opportunities_by_id(id, client_id, patch_operation, opts = {})
      data, _status_code, _headers = patch_sales_opportunities_by_id_with_http_info(id, client_id, patch_operation,
                                                                                    opts)
      data
    end

    # Patch ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param patch_operation [Array<PatchOperation>] List of PatchOperation
    # @param [Hash] opts the optional parameters
    # @return [Array<(Opportunity, Integer, Hash)>] Opportunity data, response status code and response headers
    def patch_sales_opportunities_by_id_with_http_info(id, client_id, patch_operation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OpportunitiesApi.patch_sales_opportunities_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError,
              "Missing the required parameter 'id' when calling OpportunitiesApi.patch_sales_opportunities_by_id"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling OpportunitiesApi.patch_sales_opportunities_by_id"
      end
      # verify the required parameter 'patch_operation' is set
      if @api_client.config.client_side_validation && patch_operation.nil?
        raise ArgumentError,
              "Missing the required parameter 'patch_operation' when calling OpportunitiesApi.patch_sales_opportunities_by_id"
      end

      # resource path
      local_var_path = '/sales/opportunities/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(patch_operation)

      # return_type
      return_type = opts[:debug_return_type] || 'Opportunity'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'OpportunitiesApi.patch_sales_opportunities_by_id',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OpportunitiesApi#patch_sales_opportunities_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Post ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity
    # @param client_id [String]
    # @param opportunity [Opportunity] opportunity
    # @param [Hash] opts the optional parameters
    # @return [Opportunity]
    def post_sales_opportunities(client_id, opportunity, opts = {})
      data, _status_code, _headers = post_sales_opportunities_with_http_info(client_id, opportunity, opts)
      data
    end

    # Post ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity
    # @param client_id [String]
    # @param opportunity [Opportunity] opportunity
    # @param [Hash] opts the optional parameters
    # @return [Array<(Opportunity, Integer, Hash)>] Opportunity data, response status code and response headers
    def post_sales_opportunities_with_http_info(client_id, opportunity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OpportunitiesApi.post_sales_opportunities ...'
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling OpportunitiesApi.post_sales_opportunities"
      end
      # verify the required parameter 'opportunity' is set
      if @api_client.config.client_side_validation && opportunity.nil?
        raise ArgumentError,
              "Missing the required parameter 'opportunity' when calling OpportunitiesApi.post_sales_opportunities"
      end

      # resource path
      local_var_path = '/sales/opportunities'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opportunity)

      # return_type
      return_type = opts[:debug_return_type] || 'Opportunity'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'OpportunitiesApi.post_sales_opportunities',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OpportunitiesApi#post_sales_opportunities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Post ApiAgreement
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param opportunity_to_agreement_conversion [OpportunityToAgreementConversion] conversion
    # @param [Hash] opts the optional parameters
    # @return [Agreement]
    def post_sales_opportunities_by_id_convert_to_agreement(id, client_id, opportunity_to_agreement_conversion,
                                                            opts = {})
      data, _status_code, _headers = post_sales_opportunities_by_id_convert_to_agreement_with_http_info(id, client_id,
                                                                                                        opportunity_to_agreement_conversion, opts)
      data
    end

    # Post ApiAgreement
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param opportunity_to_agreement_conversion [OpportunityToAgreementConversion] conversion
    # @param [Hash] opts the optional parameters
    # @return [Array<(Agreement, Integer, Hash)>] Agreement data, response status code and response headers
    def post_sales_opportunities_by_id_convert_to_agreement_with_http_info(id, client_id,
                                                                           opportunity_to_agreement_conversion, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OpportunitiesApi.post_sales_opportunities_by_id_convert_to_agreement ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError,
              "Missing the required parameter 'id' when calling OpportunitiesApi.post_sales_opportunities_by_id_convert_to_agreement"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling OpportunitiesApi.post_sales_opportunities_by_id_convert_to_agreement"
      end
      # verify the required parameter 'opportunity_to_agreement_conversion' is set
      if @api_client.config.client_side_validation && opportunity_to_agreement_conversion.nil?
        raise ArgumentError,
              "Missing the required parameter 'opportunity_to_agreement_conversion' when calling OpportunitiesApi.post_sales_opportunities_by_id_convert_to_agreement"
      end

      # resource path
      local_var_path = '/sales/opportunities/{id}/convertToAgreement'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opportunity_to_agreement_conversion)

      # return_type
      return_type = opts[:debug_return_type] || 'Agreement'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'OpportunitiesApi.post_sales_opportunities_by_id_convert_to_agreement',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OpportunitiesApi#post_sales_opportunities_by_id_convert_to_agreement\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Post ApiProject
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param opportunity_to_project_conversion [OpportunityToProjectConversion] conversion
    # @param [Hash] opts the optional parameters
    # @return [Project]
    def post_sales_opportunities_by_id_convert_to_project(id, client_id, opportunity_to_project_conversion, opts = {})
      data, _status_code, _headers = post_sales_opportunities_by_id_convert_to_project_with_http_info(id, client_id,
                                                                                                      opportunity_to_project_conversion, opts)
      data
    end

    # Post ApiProject
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param opportunity_to_project_conversion [OpportunityToProjectConversion] conversion
    # @param [Hash] opts the optional parameters
    # @return [Array<(Project, Integer, Hash)>] Project data, response status code and response headers
    def post_sales_opportunities_by_id_convert_to_project_with_http_info(id, client_id,
                                                                         opportunity_to_project_conversion, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OpportunitiesApi.post_sales_opportunities_by_id_convert_to_project ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError,
              "Missing the required parameter 'id' when calling OpportunitiesApi.post_sales_opportunities_by_id_convert_to_project"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling OpportunitiesApi.post_sales_opportunities_by_id_convert_to_project"
      end
      # verify the required parameter 'opportunity_to_project_conversion' is set
      if @api_client.config.client_side_validation && opportunity_to_project_conversion.nil?
        raise ArgumentError,
              "Missing the required parameter 'opportunity_to_project_conversion' when calling OpportunitiesApi.post_sales_opportunities_by_id_convert_to_project"
      end

      # resource path
      local_var_path = '/sales/opportunities/{id}/convertToProject'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opportunity_to_project_conversion)

      # return_type
      return_type = opts[:debug_return_type] || 'Project'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'OpportunitiesApi.post_sales_opportunities_by_id_convert_to_project',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OpportunitiesApi#post_sales_opportunities_by_id_convert_to_project\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Post ApiSalesOrder
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param opportunity_to_sales_order_conversion [OpportunityToSalesOrderConversion] conversion
    # @param [Hash] opts the optional parameters
    # @return [Order]
    def post_sales_opportunities_by_id_convert_to_sales_order(id, client_id, opportunity_to_sales_order_conversion,
                                                              opts = {})
      data, _status_code, _headers = post_sales_opportunities_by_id_convert_to_sales_order_with_http_info(id,
                                                                                                          client_id, opportunity_to_sales_order_conversion, opts)
      data
    end

    # Post ApiSalesOrder
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param opportunity_to_sales_order_conversion [OpportunityToSalesOrderConversion] conversion
    # @param [Hash] opts the optional parameters
    # @return [Array<(Order, Integer, Hash)>] Order data, response status code and response headers
    def post_sales_opportunities_by_id_convert_to_sales_order_with_http_info(id, client_id,
                                                                             opportunity_to_sales_order_conversion, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OpportunitiesApi.post_sales_opportunities_by_id_convert_to_sales_order ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError,
              "Missing the required parameter 'id' when calling OpportunitiesApi.post_sales_opportunities_by_id_convert_to_sales_order"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling OpportunitiesApi.post_sales_opportunities_by_id_convert_to_sales_order"
      end
      # verify the required parameter 'opportunity_to_sales_order_conversion' is set
      if @api_client.config.client_side_validation && opportunity_to_sales_order_conversion.nil?
        raise ArgumentError,
              "Missing the required parameter 'opportunity_to_sales_order_conversion' when calling OpportunitiesApi.post_sales_opportunities_by_id_convert_to_sales_order"
      end

      # resource path
      local_var_path = '/sales/opportunities/{id}/convertToSalesOrder'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opportunity_to_sales_order_conversion)

      # return_type
      return_type = opts[:debug_return_type] || 'Order'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'OpportunitiesApi.post_sales_opportunities_by_id_convert_to_sales_order',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OpportunitiesApi#post_sales_opportunities_by_id_convert_to_sales_order\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Post ApiTicket
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param opportunity_to_service_ticket_conversion [OpportunityToServiceTicketConversion] conversion
    # @param [Hash] opts the optional parameters
    # @return [Ticket]
    def post_sales_opportunities_by_id_convert_to_service_ticket(id, client_id,
                                                                 opportunity_to_service_ticket_conversion, opts = {})
      data, _status_code, _headers = post_sales_opportunities_by_id_convert_to_service_ticket_with_http_info(id,
                                                                                                             client_id, opportunity_to_service_ticket_conversion, opts)
      data
    end

    # Post ApiTicket
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param opportunity_to_service_ticket_conversion [OpportunityToServiceTicketConversion] conversion
    # @param [Hash] opts the optional parameters
    # @return [Array<(Ticket, Integer, Hash)>] Ticket data, response status code and response headers
    def post_sales_opportunities_by_id_convert_to_service_ticket_with_http_info(id, client_id,
                                                                                opportunity_to_service_ticket_conversion, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OpportunitiesApi.post_sales_opportunities_by_id_convert_to_service_ticket ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError,
              "Missing the required parameter 'id' when calling OpportunitiesApi.post_sales_opportunities_by_id_convert_to_service_ticket"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling OpportunitiesApi.post_sales_opportunities_by_id_convert_to_service_ticket"
      end
      # verify the required parameter 'opportunity_to_service_ticket_conversion' is set
      if @api_client.config.client_side_validation && opportunity_to_service_ticket_conversion.nil?
        raise ArgumentError,
              "Missing the required parameter 'opportunity_to_service_ticket_conversion' when calling OpportunitiesApi.post_sales_opportunities_by_id_convert_to_service_ticket"
      end

      # resource path
      local_var_path = '/sales/opportunities/{id}/convertToServiceTicket'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opportunity_to_service_ticket_conversion)

      # return_type
      return_type = opts[:debug_return_type] || 'Ticket'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'OpportunitiesApi.post_sales_opportunities_by_id_convert_to_service_ticket',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OpportunitiesApi#post_sales_opportunities_by_id_convert_to_service_ticket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # Put ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param opportunity [Opportunity] opportunity
    # @param [Hash] opts the optional parameters
    # @return [Opportunity]
    def put_sales_opportunities_by_id(id, client_id, opportunity, opts = {})
      data, _status_code, _headers = put_sales_opportunities_by_id_with_http_info(id, client_id, opportunity, opts)
      data
    end

    # Put ConnectWise.Apis.v3_0.v2015_3.Sales.Opportunity.Opportunity
    # @param id [Integer] opportunityId
    # @param client_id [String]
    # @param opportunity [Opportunity] opportunity
    # @param [Hash] opts the optional parameters
    # @return [Array<(Opportunity, Integer, Hash)>] Opportunity data, response status code and response headers
    def put_sales_opportunities_by_id_with_http_info(id, client_id, opportunity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OpportunitiesApi.put_sales_opportunities_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError,
              "Missing the required parameter 'id' when calling OpportunitiesApi.put_sales_opportunities_by_id"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        raise ArgumentError,
              "Missing the required parameter 'client_id' when calling OpportunitiesApi.put_sales_opportunities_by_id"
      end
      # verify the required parameter 'opportunity' is set
      if @api_client.config.client_side_validation && opportunity.nil?
        raise ArgumentError,
              "Missing the required parameter 'opportunity' when calling OpportunitiesApi.put_sales_opportunities_by_id"
      end

      # resource path
      local_var_path = '/sales/opportunities/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      unless header_params['Accept']
        header_params['Accept'] =
          @api_client.select_header_accept(['application/vnd.connectwise.com+json; version=2025.1'])
      end
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      header_params['Content-Type'] = content_type unless content_type.nil?
      header_params[:clientId] = client_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opportunity)

      # return_type
      return_type = opts[:debug_return_type] || 'Opportunity'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        operation: :'OpportunitiesApi.put_sales_opportunities_by_id',
        header_params: header_params,
        query_params: query_params,
        form_params: form_params,
        body: post_body,
        auth_names: auth_names,
        return_type: return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OpportunitiesApi#put_sales_opportunities_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
