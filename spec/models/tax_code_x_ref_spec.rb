# #Connectwise Manage Public Endpoints
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 2025.1
#
# Generated by: https://openapi-generator.tech
# Generator version: 7.12.0
#

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for ConnectWise::TaxCodeXRef
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe ConnectWise::TaxCodeXRef do
  let(:instance) { ConnectWise::TaxCodeXRef.new }

  describe 'test an instance of TaxCodeXRef' do
    it 'should create an instance of TaxCodeXRef' do
      # uncomment below to test the instance creation
      # expect(instance).to be_instance_of(ConnectWise::TaxCodeXRef)
    end
  end

  describe 'test attribute "description"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "id"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "default_flag"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "level_one"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["NonTaxable", "Taxable"])
      # validator.allowable_values.each do |value|
      #   expect { instance.level_one = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "level_two"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["NonTaxable", "Taxable"])
      # validator.allowable_values.each do |value|
      #   expect { instance.level_two = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "level_three"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["NonTaxable", "Taxable"])
      # validator.allowable_values.each do |value|
      #   expect { instance.level_three = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "level_four"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["NonTaxable", "Taxable"])
      # validator.allowable_values.each do |value|
      #   expect { instance.level_four = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "level_five"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["NonTaxable", "Taxable"])
      # validator.allowable_values.each do |value|
      #   expect { instance.level_five = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "level_six"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["NonTaxable", "Taxable"])
      # validator.allowable_values.each do |value|
      #   expect { instance.level_six = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "tax_code"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "taxable_levels"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  describe 'test attribute "_info"' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end
end
